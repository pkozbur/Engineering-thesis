
Inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003864  0800dde8  0800dde8  0000ede8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801164c  0801164c  000131e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801164c  0801164c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011654  08011654  000131e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011654  08011654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011658  08011658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0801165c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a588  200001e8  08011844  000131e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a770  08011844  00013770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002194f  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1f  00000000  00000000  00034b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f8  00000000  00000000  0003b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e2b1  00000000  00000000  0003cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000278c0  00000000  00000000  0006afd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115646  00000000  00000000  00092899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f7c  00000000  00000000  001a7f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  001b0ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddcc 	.word	0x0800ddcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ddcc 	.word	0x0800ddcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MFRC522_SPI_CS_low>:

static SPI_HandleTypeDef *_MFRC522_SPI;



void MFRC522_SPI_CS_low() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_SPI_CS_GPIO_Port, MFRC522_SPI_CS_Pin,
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <MFRC522_SPI_CS_low+0x14>)
 8000ea2:	f003 ffb5 	bl	8004e10 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	48000800 	.word	0x48000800

08000eb0 <MFRC522_SPI_CS_high>:
void MFRC522_SPI_CS_high() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_SPI_CS_GPIO_Port, MFRC522_SPI_CS_Pin,
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <MFRC522_SPI_CS_high+0x14>)
 8000eba:	f003 ffa9 	bl	8004e10 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	48000800 	.word	0x48000800

08000ec8 <MFRC522_writeRegister>:

void MFRC522_writeRegister(uint8_t addr, uint8_t value) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	MFRC522_SPI_CS_low();
 8000ed8:	f7ff ffde 	bl	8000e98 <MFRC522_SPI_CS_low>
	HAL_SPI_Transmit(_MFRC522_SPI, &addr, 1, 100);
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MFRC522_writeRegister+0x3c>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	1df9      	adds	r1, r7, #7
 8000ee2:	2364      	movs	r3, #100	@ 0x64
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f006 fab0 	bl	800744a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_MFRC522_SPI, &value, 1, 100);
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MFRC522_writeRegister+0x3c>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	1db9      	adds	r1, r7, #6
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f006 faa9 	bl	800744a <HAL_SPI_Transmit>
	MFRC522_SPI_CS_high();
 8000ef8:	f7ff ffda 	bl	8000eb0 <MFRC522_SPI_CS_high>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000204 	.word	0x20000204

08000f08 <MFRC522_readRegister>:

uint8_t MFRC522_readRegister(uint8_t addr) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_bits;
	uint8_t addr_bits = (((addr << 1) & 0x7E) | 0x80);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	73bb      	strb	r3, [r7, #14]

	MFRC522_SPI_CS_low();
 8000f28:	f7ff ffb6 	bl	8000e98 <MFRC522_SPI_CS_low>

	HAL_SPI_Transmit(_MFRC522_SPI, &addr_bits, 1, 500);
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MFRC522_readRegister+0x58>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	f107 010e 	add.w	r1, r7, #14
 8000f34:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f006 fa86 	bl	800744a <HAL_SPI_Transmit>

	HAL_SPI_Receive(_MFRC522_SPI, &rx_bits, 1, 500);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MFRC522_readRegister+0x58>)
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	f107 010f 	add.w	r1, r7, #15
 8000f46:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f006 fbf3 	bl	8007736 <HAL_SPI_Receive>
	MFRC522_SPI_CS_high();
 8000f50:	f7ff ffae 	bl	8000eb0 <MFRC522_SPI_CS_high>

	return (uint8_t) rx_bits;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000204 	.word	0x20000204

08000f64 <Write_MFRC522>:


void Write_MFRC522(uint8_t addr, uint8_t val) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
	uint8_t addr_bits = (((addr << 1) & 0x7E));
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000f7e:	73fb      	strb	r3, [r7, #15]

	MFRC522_writeRegister(addr_bits, val);
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff9e 	bl	8000ec8 <MFRC522_writeRegister>
	return;
 8000f8c:	bf00      	nop

}
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SetBitMask>:

void SetBitMask(uint8_t reg, uint8_t mask) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = MFRC522_readRegister(reg);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffae 	bl	8000f08 <MFRC522_readRegister>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffd1 	bl	8000f64 <Write_MFRC522>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <ClearBitMask>:

void ClearBitMask(uint8_t reg, uint8_t mask) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = MFRC522_readRegister(reg);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff93 	bl	8000f08 <MFRC522_readRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));
 8000fe6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffb1 	bl	8000f64 <Write_MFRC522>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <AntennaOn>:


void AntennaOn(void) {
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 800100e:	2103      	movs	r1, #3
 8001010:	2014      	movs	r0, #20
 8001012:	f7ff ffbf 	bl	8000f94 <SetBitMask>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <MFRC522_Reset>:
void AntennaOff(void) {
	ClearBitMask(TxControlReg, 0x03);
}


void MFRC522_Reset(void) {
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800101e:	210f      	movs	r1, #15
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff9f 	bl	8000f64 <Write_MFRC522>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MFRC522_Init>:

void MFRC522_Init(SPI_HandleTypeDef *spi) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	_MFRC522_SPI = spi;
 8001034:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MFRC522_Init+0x54>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
	MFRC522_SPI_CS_high();
 800103a:	f7ff ff39 	bl	8000eb0 <MFRC522_SPI_CS_high>
	MFRC522_Reset();
 800103e:	f7ff ffec 	bl	800101a <MFRC522_Reset>

	Write_MFRC522(TModeReg, 0x80);
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	202a      	movs	r0, #42	@ 0x2a
 8001046:	f7ff ff8d 	bl	8000f64 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0xA9);
 800104a:	21a9      	movs	r1, #169	@ 0xa9
 800104c:	202b      	movs	r0, #43	@ 0x2b
 800104e:	f7ff ff89 	bl	8000f64 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 0x03);
 8001052:	2103      	movs	r1, #3
 8001054:	202d      	movs	r0, #45	@ 0x2d
 8001056:	f7ff ff85 	bl	8000f64 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0xE8);
 800105a:	21e8      	movs	r1, #232	@ 0xe8
 800105c:	202c      	movs	r0, #44	@ 0x2c
 800105e:	f7ff ff81 	bl	8000f64 <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);
 8001062:	2140      	movs	r1, #64	@ 0x40
 8001064:	2015      	movs	r0, #21
 8001066:	f7ff ff7d 	bl	8000f64 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);
 800106a:	213d      	movs	r1, #61	@ 0x3d
 800106c:	2011      	movs	r0, #17
 800106e:	f7ff ff79 	bl	8000f64 <Write_MFRC522>

	AntennaOn();
 8001072:	f7ff ffca 	bl	800100a <AntennaOn>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000204 	.word	0x20000204

08001084 <MFRC522_Request>:


uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t backBits;

	Write_MFRC522(BitFramingReg, 0x07);
 8001090:	2107      	movs	r1, #7
 8001092:	200d      	movs	r0, #13
 8001094:	f7ff ff66 	bl	8000f64 <Write_MFRC522>

	TagType[0] = reqMode;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800109e:	f107 030e 	add.w	r3, r7, #14
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2201      	movs	r2, #1
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	200c      	movs	r0, #12
 80010ac:	f000 f80f 	bl	80010ce <MFRC522_ToCard>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <MFRC522_Request+0x3c>
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b10      	cmp	r3, #16
 80010be:	d001      	beq.n	80010c4 <MFRC522_Request+0x40>
		status = MI_ERR;
 80010c0:	2302      	movs	r3, #2
 80010c2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <MFRC522_ToCard>:


uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
		uint8_t *backData, uint32_t *backLen) {
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b089      	sub	sp, #36	@ 0x24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	4613      	mov	r3, r2
 80010de:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80010e0:	2302      	movs	r3, #2
 80010e2:	77fb      	strb	r3, [r7, #31]
	uint8_t irqEn = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	77bb      	strb	r3, [r7, #30]
	uint8_t waitIRq = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	777b      	strb	r3, [r7, #29]
	uint8_t lastBits;
	uint8_t n;
	uint32_t i;

	switch (command) {
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d006      	beq.n	8001100 <MFRC522_ToCard+0x32>
 80010f2:	2b0e      	cmp	r3, #14
 80010f4:	d109      	bne.n	800110a <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:
	{
		irqEn = 0x12;
 80010f6:	2312      	movs	r3, #18
 80010f8:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 80010fa:	2310      	movs	r3, #16
 80010fc:	777b      	strb	r3, [r7, #29]
		break;
 80010fe:	e005      	b.n	800110c <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:
	{
		irqEn = 0x77;
 8001100:	2377      	movs	r3, #119	@ 0x77
 8001102:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8001104:	2330      	movs	r3, #48	@ 0x30
 8001106:	777b      	strb	r3, [r7, #29]
		break;
 8001108:	e000      	b.n	800110c <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 800110a:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);
 800110c:	7fbb      	ldrb	r3, [r7, #30]
 800110e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff ff24 	bl	8000f64 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	2004      	movs	r0, #4
 8001120:	f7ff ff53 	bl	8000fca <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff ff34 	bl	8000f94 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);
 800112c:	2100      	movs	r1, #0
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ff18 	bl	8000f64 <Write_MFRC522>

	for (i = 0; i < sendLen; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	e00a      	b.n	8001150 <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	2009      	movs	r0, #9
 8001146:	f7ff ff0d 	bl	8000f64 <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	3301      	adds	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3f0      	bcc.n	800113a <MFRC522_ToCard+0x6c>
	}

	Write_MFRC522(CommandReg, command);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4619      	mov	r1, r3
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff ff01 	bl	8000f64 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d103      	bne.n	8001170 <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80);
 8001168:	2180      	movs	r1, #128	@ 0x80
 800116a:	200d      	movs	r0, #13
 800116c:	f7ff ff12 	bl	8000f94 <SetBitMask>
	}
	i = 2000;
 8001170:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001174:	61bb      	str	r3, [r7, #24]
	do {
		n = MFRC522_readRegister(CommIrqReg);
 8001176:	2004      	movs	r0, #4
 8001178:	f7ff fec6 	bl	8000f08 <MFRC522_readRegister>
 800117c:	4603      	mov	r3, r0
 800117e:	773b      	strb	r3, [r7, #28]
		i--;
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3b01      	subs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <MFRC522_ToCard+0xd4>
 800118c:	7f3b      	ldrb	r3, [r7, #28]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <MFRC522_ToCard+0xd4>
 8001196:	7f3a      	ldrb	r2, [r7, #28]
 8001198:	7f7b      	ldrb	r3, [r7, #29]
 800119a:	4013      	ands	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0e9      	beq.n	8001176 <MFRC522_ToCard+0xa8>

	ClearBitMask(BitFramingReg, 0x80);
 80011a2:	2180      	movs	r1, #128	@ 0x80
 80011a4:	200d      	movs	r0, #13
 80011a6:	f7ff ff10 	bl	8000fca <ClearBitMask>

	if (i != 0) {
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d052      	beq.n	8001256 <MFRC522_ToCard+0x188>
		if (!(MFRC522_readRegister(ErrorReg) & 0x1B))
 80011b0:	2006      	movs	r0, #6
 80011b2:	f7ff fea9 	bl	8000f08 <MFRC522_readRegister>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f003 031b 	and.w	r3, r3, #27
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d148      	bne.n	8001252 <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 80011c4:	7f3a      	ldrb	r2, [r7, #28]
 80011c6:	7fbb      	ldrb	r3, [r7, #30]
 80011c8:	4013      	ands	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d13b      	bne.n	8001256 <MFRC522_ToCard+0x188>
				n = MFRC522_readRegister(FIFOLevelReg);
 80011de:	200a      	movs	r0, #10
 80011e0:	f7ff fe92 	bl	8000f08 <MFRC522_readRegister>
 80011e4:	4603      	mov	r3, r0
 80011e6:	773b      	strb	r3, [r7, #28]
				lastBits = MFRC522_readRegister(ControlReg) & 0x07;
 80011e8:	200c      	movs	r0, #12
 80011ea:	f7ff fe8d 	bl	8000f08 <MFRC522_readRegister>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 80011fc:	7f3b      	ldrb	r3, [r7, #28]
 80011fe:	3b01      	subs	r3, #1
 8001200:	00da      	lsls	r2, r3, #3
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	4413      	add	r3, r2
 8001206:	461a      	mov	r2, r3
 8001208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e004      	b.n	8001218 <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 800120e:	7f3b      	ldrb	r3, [r7, #28]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	461a      	mov	r2, r3
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <MFRC522_ToCard+0x154>
					n = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8001222:	7f3b      	ldrb	r3, [r7, #28]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d901      	bls.n	800122c <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8001228:	2310      	movs	r3, #16
 800122a:	773b      	strb	r3, [r7, #28]
				}

				for (i = 0; i < n; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	e00a      	b.n	8001248 <MFRC522_ToCard+0x17a>
					backData[i] = MFRC522_readRegister(FIFODataReg);
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	18d4      	adds	r4, r2, r3
 8001238:	2009      	movs	r0, #9
 800123a:	f7ff fe65 	bl	8000f08 <MFRC522_readRegister>
 800123e:	4603      	mov	r3, r0
 8001240:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	7f3b      	ldrb	r3, [r7, #28]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3f0      	bcc.n	8001232 <MFRC522_ToCard+0x164>
 8001250:	e001      	b.n	8001256 <MFRC522_ToCard+0x188>
				}
			}
		} else {

			status = MI_ERR;
 8001252:	2302      	movs	r3, #2
 8001254:	77fb      	strb	r3, [r7, #31]
		}
	} else {

	}

	return status;
 8001256:	7ffb      	ldrb	r3, [r7, #31]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3724      	adds	r7, #36	@ 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <MFRC522_Anticoll>:


uint8_t MFRC522_Anticoll(uint8_t *serNum) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	737b      	strb	r3, [r7, #13]
	uint32_t unLen;

	Write_MFRC522(BitFramingReg, 0x00);
 800126c:	2100      	movs	r1, #0
 800126e:	200d      	movs	r0, #13
 8001270:	f7ff fe78 	bl	8000f64 <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2293      	movs	r2, #147	@ 0x93
 8001278:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3301      	adds	r3, #1
 800127e:	2220      	movs	r2, #32
 8001280:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	200c      	movs	r0, #12
 8001290:	f7ff ff1d 	bl	80010ce <MFRC522_ToCard>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d118      	bne.n	80012d0 <MFRC522_Anticoll+0x70>
		for (i = 0; i < 4; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	73bb      	strb	r3, [r7, #14]
 80012a2:	e009      	b.n	80012b8 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	4053      	eors	r3, r2
 80012b0:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	3301      	adds	r3, #1
 80012b6:	73bb      	strb	r3, [r7, #14]
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d9f2      	bls.n	80012a4 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	7b7a      	ldrb	r2, [r7, #13]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80012cc:	2302      	movs	r3, #2
 80012ce:	73fb      	strb	r3, [r7, #15]
		}
	}



	return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001300:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <MX_ADC1_Init+0xe8>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001310:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131c:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800131e:	2204      	movs	r2, #4
 8001320:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001324:	2200      	movs	r2, #0
 8001326:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800132a:	2201      	movs	r2, #1
 800132c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001330:	2201      	movs	r2, #1
 8001332:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001352:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001356:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 8001362:	f002 f957 	bl	8003614 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800136c:	f001 f905 	bl	800257a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 800137c:	f003 f9c4 	bl	8004708 <HAL_ADCEx_MultiModeConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001386:	f001 f8f8 	bl	800257a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_ADC1_Init+0xec>)
 800138c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138e:	2306      	movs	r3, #6
 8001390:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001396:	237f      	movs	r3, #127	@ 0x7f
 8001398:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139a:	2304      	movs	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_ADC1_Init+0xe4>)
 80013a8:	f002 fc24 	bl	8003bf4 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80013b2:	f001 f8e2 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000208 	.word	0x20000208
 80013c4:	50040000 	.word	0x50040000
 80013c8:	08600004 	.word	0x08600004

080013cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	@ 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2288      	movs	r2, #136	@ 0x88
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 ff1f 	bl	800b230 <memset>
  if(adcHandle->Instance==ADC1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <HAL_ADC_MspInit+0xc8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d146      	bne.n	800148a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001400:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001402:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001412:	2308      	movs	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001422:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f005 f98f 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001438:	f001 f89f 	bl	800257a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	4a15      	ldr	r2, [pc, #84]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 8001442:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <HAL_ADC_MspInit+0xcc>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001472:	230b      	movs	r3, #11
 8001474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_ADC_MspInit+0xd0>)
 8001486:	f003 fb01 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	37b0      	adds	r7, #176	@ 0xb0
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	50040000 	.word	0x50040000
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800

080014a0 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  return wire_init();
 80014a4:	f001 fcba 	bl	8002e1c <wire_init>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}

080014ae <ds18b20_read_address>:

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80014b6:	f001 fcd3 	bl	8002e60 <wire_reset>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e021      	b.n	8001508 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 80014c4:	2033      	movs	r0, #51	@ 0x33
 80014c6:	f001 fd67 	bl	8002f98 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e009      	b.n	80014e4 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d4      	adds	r4, r2, r3
 80014d6:	f001 fd11 	bl	8002efc <wire_read>
 80014da:	4603      	mov	r3, r0
 80014dc:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	ddf2      	ble.n	80014d0 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80014ea:	2107      	movs	r1, #7
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 fd9b 	bl	8003028 <wire_crc>
 80014f2:	4603      	mov	r3, r0
 80014f4:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3307      	adds	r3, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	7afa      	ldrb	r2, [r7, #11]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d101      	bne.n	8001506 <ds18b20_read_address+0x58>
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}

08001510 <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 800151c:	f001 fca0 	bl	8002e60 <wire_reset>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <send_cmd+0x1a>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e01e      	b.n	8001568 <send_cmd+0x58>

  if (!rom_code) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8001530:	20cc      	movs	r0, #204	@ 0xcc
 8001532:	f001 fd31 	bl	8002f98 <wire_write>
 8001536:	e012      	b.n	800155e <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8001538:	2055      	movs	r0, #85	@ 0x55
 800153a:	f001 fd2d 	bl	8002f98 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e009      	b.n	8001558 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fd23 	bl	8002f98 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b07      	cmp	r3, #7
 800155c:	ddf2      	ble.n	8001544 <send_cmd+0x34>
  }
  wire_write(cmd);
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fd19 	bl	8002f98 <wire_write>
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8001578:	2144      	movs	r1, #68	@ 0x44
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffc8 	bl	8001510 <send_cmd>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001594:	21be      	movs	r1, #190	@ 0xbe
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffba 	bl	8001510 <send_cmd>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01e      	b.n	80015e4 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e009      	b.n	80015c0 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	18d4      	adds	r4, r2, r3
 80015b2:	f001 fca3 	bl	8002efc <wire_read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	ddf2      	ble.n	80015ac <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80015c6:	2108      	movs	r1, #8
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f001 fd2d 	bl	8003028 <wire_crc>
 80015ce:	4603      	mov	r3, r0
 80015d0:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3308      	adds	r3, #8
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	7afa      	ldrb	r2, [r7, #11]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d101      	bne.n	80015e2 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffc5 	bl	800158a <ds18b20_read_scratchpad>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <ds18b20_get_temp+0x20>
    return 85.0f;
 8001606:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001634 <ds18b20_get_temp+0x48>
 800160a:	e00b      	b.n	8001624 <ds18b20_get_temp+0x38>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8001610:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001620:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001624:	eef0 7a47 	vmov.f32	s15, s14
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	42aa0000 	.word	0x42aa0000

08001638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b50      	ldr	r3, [pc, #320]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a4f      	ldr	r2, [pc, #316]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b4d      	ldr	r3, [pc, #308]	@ (8001790 <MX_GPIO_Init+0x158>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a49      	ldr	r2, [pc, #292]	@ (8001790 <MX_GPIO_Init+0x158>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b47      	ldr	r3, [pc, #284]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b44      	ldr	r3, [pc, #272]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a43      	ldr	r2, [pc, #268]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <MX_GPIO_Init+0x158>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <MX_GPIO_Init+0x158>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	4a3d      	ldr	r2, [pc, #244]	@ (8001790 <MX_GPIO_Init+0x158>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <MX_GPIO_Init+0x158>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2104      	movs	r1, #4
 80016b2:	4838      	ldr	r0, [pc, #224]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016b4:	f003 fbac 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f003 fba6 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	4832      	ldr	r0, [pc, #200]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016ca:	f003 fba1 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f640 0104 	movw	r1, #2052	@ 0x804
 80016d4:	4830      	ldr	r0, [pc, #192]	@ (8001798 <MX_GPIO_Init+0x160>)
 80016d6:	f003 fb9b 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e0:	482d      	ldr	r0, [pc, #180]	@ (8001798 <MX_GPIO_Init+0x160>)
 80016e2:	f003 fb95 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522IRQ_GPIO_Port, RC522IRQ_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f0:	f003 fb8e 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4822      	ldr	r0, [pc, #136]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800170c:	f003 f9be 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001710:	2304      	movs	r3, #4
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	481b      	ldr	r0, [pc, #108]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001728:	f003 f9b0 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|RC522IRQ_Pin;
 800172c:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001748:	f003 f9a0 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 800174c:	2310      	movs	r3, #16
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001750:	2311      	movs	r3, #17
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480c      	ldr	r0, [pc, #48]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001764:	f003 f992 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001768:	f641 0304 	movw	r3, #6148	@ 0x1804
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_GPIO_Init+0x160>)
 8001782:	f003 f983 	bl	8004a8c <HAL_GPIO_Init>

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	@ 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	48000400 	.word	0x48000400

0800179c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <MX_I2C1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <MX_I2C1_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017d8:	f003 fb32 	bl	8004e40 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 feca 	bl	800257a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017ea:	f004 f8b5 	bl	8005958 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 fec1 	bl	800257a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_I2C1_Init+0x74>)
 80017fc:	f004 f8f7 	bl	80059ee <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 feb8 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000026c 	.word	0x2000026c
 8001814:	40005400 	.word	0x40005400
 8001818:	10d19ce4 	.word	0x10d19ce4

0800181c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0ac      	sub	sp, #176	@ 0xb0
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2288      	movs	r2, #136	@ 0x88
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f009 fcf7 	bl	800b230 <memset>
  if(i2cHandle->Instance==I2C1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_I2C_MspInit+0xb0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d13a      	bne.n	80018c2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800184c:	2340      	movs	r3, #64	@ 0x40
 800184e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001850:	2300      	movs	r3, #0
 8001852:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4618      	mov	r0, r3
 800185a:	f004 ff79 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001864:	f000 fe89 	bl	800257a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001880:	23c0      	movs	r3, #192	@ 0xc0
 8001882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001898:	2304      	movs	r3, #4
 800189a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018a2:	4619      	mov	r1, r3
 80018a4:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <HAL_I2C_MspInit+0xb8>)
 80018a6:	f003 f8f1 	bl	8004a8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 80018b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_I2C_MspInit+0xb4>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018c2:	bf00      	nop
 80018c4:	37b0      	adds	r7, #176	@ 0xb0
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40005400 	.word	0x40005400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400

080018d8 <lcd_cmd>:
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];



static void lcd_cmd(uint8_t cmd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <lcd_cmd+0x44>)
 80018ea:	f003 fa91 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f4:	4809      	ldr	r0, [pc, #36]	@ (800191c <lcd_cmd+0x44>)
 80018f6:	f003 fa8b 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80018fa:	1df9      	adds	r1, r7, #7
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	2201      	movs	r2, #1
 8001902:	4807      	ldr	r0, [pc, #28]	@ (8001920 <lcd_cmd+0x48>)
 8001904:	f005 fda1 	bl	800744a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800190e:	4803      	ldr	r0, [pc, #12]	@ (800191c <lcd_cmd+0x44>)
 8001910:	f003 fa7e 	bl	8004e10 <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	48000400 	.word	0x48000400
 8001920:	2000a3ac 	.word	0x2000a3ac

08001924 <lcd_data>:


static void lcd_data(uint8_t data)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001934:	480c      	ldr	r0, [pc, #48]	@ (8001968 <lcd_data+0x44>)
 8001936:	f003 fa6b 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001940:	4809      	ldr	r0, [pc, #36]	@ (8001968 <lcd_data+0x44>)
 8001942:	f003 fa65 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001946:	1df9      	adds	r1, r7, #7
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	2201      	movs	r2, #1
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <lcd_data+0x48>)
 8001950:	f005 fd7b 	bl	800744a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195a:	4803      	ldr	r0, [pc, #12]	@ (8001968 <lcd_data+0x44>)
 800195c:	f003 fa58 	bl	8004e10 <HAL_GPIO_WritePin>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	48000400 	.word	0x48000400
 800196c:	2000a3ac 	.word	0x2000a3ac

08001970 <lcd_send>:


#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <lcd_send+0x20>
		lcd_cmd(value);
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ffa5 	bl	80018d8 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800198e:	e004      	b.n	800199a <lcd_send+0x2a>
		lcd_data(value);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffc5 	bl	8001924 <lcd_data>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <lcd_data16>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_data16(uint16_t value)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ffb5 	bl	8001924 <lcd_data>
	lcd_data(value);
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffb0 	bl	8001924 <lcd_data>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80019da:	202a      	movs	r0, #42	@ 0x2a
 80019dc:	f7ff ff7c 	bl	80018d8 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ffda 	bl	80019a2 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffd1 	bl	80019a2 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001a00:	202b      	movs	r0, #43	@ 0x2b
 8001a02:	f7ff ff69 	bl	80018d8 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffc7 	bl	80019a2 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffbc 	bl	80019a2 <lcd_data16>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <lcd_put_pixel+0x34>)
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200002c0 	.word	0x200002c0

08001a6c <lcd_copy>:

void lcd_copy(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	22a0      	movs	r2, #160	@ 0xa0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff ffa8 	bl	80019cc <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001a7c:	202c      	movs	r0, #44	@ 0x2c
 8001a7e:	f7ff ff2b 	bl	80018d8 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <lcd_copy+0x50>)
 8001a8a:	f003 f9c1 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a94:	4809      	ldr	r0, [pc, #36]	@ (8001abc <lcd_copy+0x50>)
 8001a96:	f003 f9bb 	bl	8004e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001aa2:	4907      	ldr	r1, [pc, #28]	@ (8001ac0 <lcd_copy+0x54>)
 8001aa4:	4807      	ldr	r0, [pc, #28]	@ (8001ac4 <lcd_copy+0x58>)
 8001aa6:	f005 fcd0 	bl	800744a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <lcd_copy+0x50>)
 8001ab2:	f003 f9ad 	bl	8004e10 <HAL_GPIO_WritePin>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	200002c0 	.word	0x200002c0
 8001ac4:	2000a3ac 	.word	0x2000a3ac

08001ac8 <lcd_init>:

void lcd_init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <lcd_init+0x68>)
 8001ad4:	f003 f99c 	bl	8004e10 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001ad8:	2064      	movs	r0, #100	@ 0x64
 8001ada:	f001 fb6d 	bl	80031b8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <lcd_init+0x68>)
 8001ae4:	f003 f994 	bl	8004e10 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	@ 0x64
 8001aea:	f001 fb65 	bl	80031b8 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	e009      	b.n	8001b08 <lcd_init+0x40>
    lcd_send(init_table[i]);
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <lcd_init+0x6c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff37 	bl	8001970 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3301      	adds	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b0c:	d9f2      	bls.n	8001af4 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001b0e:	20c8      	movs	r0, #200	@ 0xc8
 8001b10:	f001 fb52 	bl	80031b8 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001b14:	2011      	movs	r0, #17
 8001b16:	f7ff fedf 	bl	80018d8 <lcd_cmd>
  HAL_Delay(120);
 8001b1a:	2078      	movs	r0, #120	@ 0x78
 8001b1c:	f001 fb4c 	bl	80031b8 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001b20:	2029      	movs	r0, #41	@ 0x29
 8001b22:	f7ff fed9 	bl	80018d8 <lcd_cmd>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	48000400 	.word	0x48000400
 8001b34:	0800e098 	.word	0x0800e098

08001b38 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	f107 030f 	add.w	r3, r7, #15
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	21ba      	movs	r1, #186	@ 0xba
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <lps_read_reg+0x34>)
 8001b5e:	f003 fb1f 	bl	80051a0 <HAL_I2C_Mem_Read>

    return value;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000026c 	.word	0x2000026c

08001b70 <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2364      	movs	r3, #100	@ 0x64
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	1dbb      	adds	r3, r7, #6
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	21ba      	movs	r1, #186	@ 0xba
 8001b94:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <lps_write_reg+0x34>)
 8001b96:	f003 f9ef 	bl	8004f78 <HAL_I2C_Mem_Write>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000026c 	.word	0x2000026c

08001ba8 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 8001bac:	200f      	movs	r0, #15
 8001bae:	f7ff ffc3 	bl	8001b38 <lps_read_reg>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2bbd      	cmp	r3, #189	@ 0xbd
 8001bb6:	d001      	beq.n	8001bbc <lps25hb_init+0x14>
         return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e004      	b.n	8001bc6 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 8001bbc:	21c0      	movs	r1, #192	@ 0xc0
 8001bbe:	2020      	movs	r0, #32
 8001bc0:	f7ff ffd6 	bl	8001b70 <lps_write_reg>
    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 8001bd2:	2364      	movs	r3, #100	@ 0x64
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	1dbb      	adds	r3, r7, #6
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2301      	movs	r3, #1
 8001be0:	22ab      	movs	r2, #171	@ 0xab
 8001be2:	21ba      	movs	r1, #186	@ 0xba
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <lps25hb_read_temp+0x50>)
 8001be6:	f003 fadb 	bl	80051a0 <HAL_I2C_Mem_Read>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001bf0:	f000 fcc3 	bl	800257a <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c00:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001c20 <lps25hb_read_temp+0x54>
 8001c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c08:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001c24 <lps25hb_read_temp+0x58>
 8001c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001c10:	eeb0 0a67 	vmov.f32	s0, s15
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000026c 	.word	0x2000026c
 8001c20:	43f00000 	.word	0x43f00000
 8001c24:	422a0000 	.word	0x422a0000

08001c28 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 8001c32:	2364      	movs	r3, #100	@ 0x64
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	2303      	movs	r3, #3
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	22a8      	movs	r2, #168	@ 0xa8
 8001c42:	21ba      	movs	r1, #186	@ 0xba
 8001c44:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <lps25hb_read_pressure+0x4c>)
 8001c46:	f003 faab 	bl	80051a0 <HAL_I2C_Mem_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 8001c50:	f000 fc93 	bl	800257a <Error_Handler>

     return pressure / 4096.0f;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001c78 <lps25hb_read_pressure+0x50>
 8001c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c66:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000026c 	.word	0x2000026c
 8001c78:	45800000 	.word	0x45800000

08001c7c <find_person_by_card>:
Person registered_people[] = {
    {{0xA3, 0xBD, 0x45, 0x90, 0xCB}, false},  // Person 1
    {{0xC1, 0xFC, 0x71, 0x1C, 0x50}, false}   // Person 2
};

int find_person_by_card(uint8_t *cardstr) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < sizeof(registered_people) / sizeof(Person); i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e025      	b.n	8001cd6 <find_person_by_card+0x5a>
        int match = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
        for (int j = 0; j < 5; j++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e015      	b.n	8001cc0 <find_person_by_card+0x44>
            if (cardstr[j] != registered_people[i].id[j]) {
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	7819      	ldrb	r1, [r3, #0]
 8001c9c:	4813      	ldr	r0, [pc, #76]	@ (8001cec <find_person_by_card+0x70>)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	18c2      	adds	r2, r0, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4299      	cmp	r1, r3
 8001cb2:	d002      	beq.n	8001cba <find_person_by_card+0x3e>
                match = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
                break;
 8001cb8:	e005      	b.n	8001cc6 <find_person_by_card+0x4a>
        for (int j = 0; j < 5; j++) {
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	dde6      	ble.n	8001c94 <find_person_by_card+0x18>
            }
        }
        if (match) {
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <find_person_by_card+0x54>
            return i;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	e007      	b.n	8001ce0 <find_person_by_card+0x64>
    for (int i = 0; i < sizeof(registered_people) / sizeof(Person); i++) {
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d9d6      	bls.n	8001c8a <find_person_by_card+0xe>
        }
    }
    return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000000 	.word	0x20000000

08001cf0 <process_card_scan>:

void process_card_scan(uint8_t *cardstr) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    int person_index = find_person_by_card(cardstr);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffbf 	bl	8001c7c <find_person_by_card>
 8001cfe:	60f8      	str	r0, [r7, #12]

    // If the card is registered
    if (person_index != -1) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d02d      	beq.n	8001d64 <process_card_scan+0x74>
        Person *person = &registered_people[person_index];  // Get the person details
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <process_card_scan+0x84>)
 8001d14:	4413      	add	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]

        // Check if the person has entered or exited
        if (person->hasEntered) {
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <process_card_scan+0x56>
            // Person exits
            if (people_in_building > 0) {
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <process_card_scan+0x88>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dd0a      	ble.n	8001d3e <process_card_scan+0x4e>
                people_in_building--;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <process_card_scan+0x88>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <process_card_scan+0x88>)
 8001d30:	6013      	str	r3, [r2, #0]
                printf("Person exited. People in building: %d\n", people_in_building);
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <process_card_scan+0x88>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4810      	ldr	r0, [pc, #64]	@ (8001d7c <process_card_scan+0x8c>)
 8001d3a:	f009 f8dd 	bl	800aef8 <iprintf>
            }
            person->hasEntered = false;  // Toggle to exit status
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	715a      	strb	r2, [r3, #5]
            person->hasEntered = true;   // Toggle to enter status
        }
    } else {
        printf("Unregistered card scanned!\n");
    }
}
 8001d44:	e011      	b.n	8001d6a <process_card_scan+0x7a>
            people_in_building++;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <process_card_scan+0x88>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <process_card_scan+0x88>)
 8001d4e:	6013      	str	r3, [r2, #0]
            printf("Person entered. People in building: %d\n", people_in_building);
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <process_card_scan+0x88>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	480a      	ldr	r0, [pc, #40]	@ (8001d80 <process_card_scan+0x90>)
 8001d58:	f009 f8ce 	bl	800aef8 <iprintf>
            person->hasEntered = true;   // Toggle to enter status
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	715a      	strb	r2, [r3, #5]
}
 8001d62:	e002      	b.n	8001d6a <process_card_scan+0x7a>
        printf("Unregistered card scanned!\n");
 8001d64:	4807      	ldr	r0, [pc, #28]	@ (8001d84 <process_card_scan+0x94>)
 8001d66:	f009 f92f 	bl	800afc8 <puts>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	2000a380 	.word	0x2000a380
 8001d7c:	0800dde8 	.word	0x0800dde8
 8001d80:	0800de10 	.word	0x0800de10
 8001d84:	0800de38 	.word	0x0800de38

08001d88 <__io_putchar>:

int __io_putchar(int ch)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b0a      	cmp	r3, #10
 8001d94:	d102      	bne.n	8001d9c <__io_putchar+0x14>
    __io_putchar('\r');
 8001d96:	200d      	movs	r0, #13
 8001d98:	f7ff fff6 	bl	8001d88 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001d9c:	1d39      	adds	r1, r7, #4
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	2201      	movs	r2, #1
 8001da4:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <__io_putchar+0x2c>)
 8001da6:	f006 fdd3 	bl	8008950 <HAL_UART_Transmit>

  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000a598 	.word	0x2000a598

08001db8 <ConvertFloatToWchar>:

void ConvertFloatToWchar(float value, wchar_t* wbuffer, size_t buffer_size) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001dc2:	60b8      	str	r0, [r7, #8]
 8001dc4:	6079      	str	r1, [r7, #4]
    swprintf(wbuffer, buffer_size, L"%.1f °C", value);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7fe fbbe 	bl	8000548 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <ConvertFloatToWchar+0x30>)
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f009 f9f5 	bl	800b1c8 <swprintf>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	0800de54 	.word	0x0800de54

08001dec <ConvertFloatToWchar2>:
void ConvertFloatToWchar2(float value, wchar_t* wbuffer, size_t buffer_size) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001df6:	60b8      	str	r0, [r7, #8]
 8001df8:	6079      	str	r1, [r7, #4]
    swprintf(wbuffer, buffer_size, L"Temperatura %.1f °C", value);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7fe fba4 	bl	8000548 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9cd 2300 	strd	r2, r3, [sp]
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <ConvertFloatToWchar2+0x30>)
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f009 f9db 	bl	800b1c8 <swprintf>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	0800de74 	.word	0x0800de74

08001e20 <ConvertFloatToWchar3>:
void ConvertFloatToWchar3(float value, wchar_t* wbuffer, size_t buffer_size) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e2a:	60b8      	str	r0, [r7, #8]
 8001e2c:	6079      	str	r1, [r7, #4]
    swprintf(wbuffer, buffer_size, L"Ciśnienie %.1f hPa", value);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7fe fb8a 	bl	8000548 <__aeabi_f2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <ConvertFloatToWchar3+0x30>)
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f009 f9c1 	bl	800b1c8 <swprintf>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	0800dec4 	.word	0x0800dec4

08001e54 <send_telemetry_to_esp32>:

    HAL_UART_Transmit(&huart1, tx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
}


void send_telemetry_to_esp32(float temperature, float pressure, float light_level, int people_count) {
 8001e54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e58:	b0a4      	sub	sp, #144	@ 0x90
 8001e5a:	af06      	add	r7, sp, #24
 8001e5c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e60:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e64:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e68:	6038      	str	r0, [r7, #0]
    char message[100];
    sprintf(message, "TELE:%.2f,%.2f,%.2f,%d\n", temperature, pressure, light_level, people_count);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_f2d>
 8001e70:	4680      	mov	r8, r0
 8001e72:	4689      	mov	r9, r1
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	f7fe fb67 	bl	8000548 <__aeabi_f2d>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fb62 	bl	8000548 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	f107 0014 	add.w	r0, r7, #20
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	9104      	str	r1, [sp, #16]
 8001e90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e94:	e9cd 4500 	strd	r4, r5, [sp]
 8001e98:	4642      	mov	r2, r8
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	490a      	ldr	r1, [pc, #40]	@ (8001ec8 <send_telemetry_to_esp32+0x74>)
 8001e9e:	f009 f89b 	bl	800afd8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f9e2 	bl	8000270 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f107 0114 	add.w	r1, r7, #20
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	4804      	ldr	r0, [pc, #16]	@ (8001ecc <send_telemetry_to_esp32+0x78>)
 8001eba:	f006 fd49 	bl	8008950 <HAL_UART_Transmit>
}
 8001ebe:	bf00      	nop
 8001ec0:	3778      	adds	r7, #120	@ 0x78
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ec8:	0800df10 	.word	0x0800df10
 8001ecc:	2000a510 	.word	0x2000a510

08001ed0 <send_rfid_to_esp32>:

void send_rfid_to_esp32(float temperature, uint8_t *card_info) {
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	b0a5      	sub	sp, #148	@ 0x94
 8001ed4:	af06      	add	r7, sp, #24
 8001ed6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eda:	60b8      	str	r0, [r7, #8]
    char message[100];
    sprintf(message, "RFID:%.2f,%02X%02X%02X%02X%02X\n", temperature, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4]);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7fe fb33 	bl	8000548 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	7809      	ldrb	r1, [r1, #0]
 8001eea:	460c      	mov	r4, r1
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	3101      	adds	r1, #1
 8001ef0:	7809      	ldrb	r1, [r1, #0]
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	3102      	adds	r1, #2
 8001ef8:	7809      	ldrb	r1, [r1, #0]
 8001efa:	460e      	mov	r6, r1
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	3103      	adds	r1, #3
 8001f00:	7809      	ldrb	r1, [r1, #0]
 8001f02:	6079      	str	r1, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	3104      	adds	r1, #4
 8001f08:	7809      	ldrb	r1, [r1, #0]
 8001f0a:	f107 0014 	add.w	r0, r7, #20
 8001f0e:	9104      	str	r1, [sp, #16]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	9103      	str	r1, [sp, #12]
 8001f14:	9602      	str	r6, [sp, #8]
 8001f16:	9501      	str	r5, [sp, #4]
 8001f18:	9400      	str	r4, [sp, #0]
 8001f1a:	4911      	ldr	r1, [pc, #68]	@ (8001f60 <send_rfid_to_esp32+0x90>)
 8001f1c:	f009 f85c 	bl	800afd8 <siprintf>

    if (HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY) != HAL_OK) {
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe f9a3 	bl	8000270 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f107 0114 	add.w	r1, r7, #20
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <send_rfid_to_esp32+0x94>)
 8001f38:	f006 fd0a 	bl	8008950 <HAL_UART_Transmit>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <send_rfid_to_esp32+0x7a>
        printf("UART Transmit failed for RFID data\n");
 8001f42:	4809      	ldr	r0, [pc, #36]	@ (8001f68 <send_rfid_to_esp32+0x98>)
 8001f44:	f009 f840 	bl	800afc8 <puts>
    } else {
        printf("RFID data sent: %s\n", message);  // Debug print to console
    }
}
 8001f48:	e005      	b.n	8001f56 <send_rfid_to_esp32+0x86>
        printf("RFID data sent: %s\n", message);  // Debug print to console
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <send_rfid_to_esp32+0x9c>)
 8001f52:	f008 ffd1 	bl	800aef8 <iprintf>
}
 8001f56:	bf00      	nop
 8001f58:	377c      	adds	r7, #124	@ 0x7c
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800df28 	.word	0x0800df28
 8001f64:	2000a510 	.word	0x2000a510
 8001f68:	0800df48 	.word	0x0800df48
 8001f6c:	0800df6c 	.word	0x0800df6c

08001f70 <HAL_TIM_PeriodElapsedCallback>:

int overflow_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a13      	ldr	r2, [pc, #76]	@ (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d11f      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
        overflow_count++;
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f88:	6013      	str	r3, [r2, #0]

        if (overflow_count >= 8) {  // After 8 overflows (~60 seconds)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	dd16      	ble.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
            overflow_count = 0;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
            send_telemetry_to_esp32(templps25TempAmount, templps25PressureAmount, voltage, people_in_building);// Send data to ESP32
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	eeb0 1a66 	vmov.f32	s2, s13
 8001fb4:	eef0 0a47 	vmov.f32	s1, s14
 8001fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbc:	f7ff ff4a 	bl	8001e54 <send_telemetry_to_esp32>
        }
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000a4c4 	.word	0x2000a4c4
 8001fcc:	2000a384 	.word	0x2000a384
 8001fd0:	2000a2c8 	.word	0x2000a2c8
 8001fd4:	2000a2cc 	.word	0x2000a2cc
 8001fd8:	2000a2c0 	.word	0x2000a2c0
 8001fdc:	2000a380 	.word	0x2000a380

08001fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	b0c9      	sub	sp, #292	@ 0x124
 8001fe6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe8:	f001 f86a 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fec:	f000 fa72 	bl	80024d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff0:	f7ff fb22 	bl	8001638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ff4:	f000 fe40 	bl	8002c78 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001ff8:	f000 fb20 	bl	800263c <MX_SPI2_Init>
  MX_RTC_Init();
 8001ffc:	f000 fac4 	bl	8002588 <MX_RTC_Init>
  MX_SPI3_Init();
 8002000:	f000 fb5a 	bl	80026b8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002004:	f000 fe08 	bl	8002c18 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002008:	f7ff fbc8 	bl	800179c <MX_I2C1_Init>
  MX_ADC1_Init();
 800200c:	f7ff f966 	bl	80012dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8002010:	f000 fd5a 	bl	8002ac8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002014:	f000 fd8e 	bl	8002b34 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init(&hspi3);
 8002018:	48c0      	ldr	r0, [pc, #768]	@ (800231c <main+0x33c>)
 800201a:	f7ff f807 	bl	800102c <MFRC522_Init>
  HAL_ADC_Start(&hadc1);
 800201e:	48c0      	ldr	r0, [pc, #768]	@ (8002320 <main+0x340>)
 8002020:	f001 fc48 	bl	80038b4 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8002024:	48bf      	ldr	r0, [pc, #764]	@ (8002324 <main+0x344>)
 8002026:	f006 f959 	bl	80082dc <HAL_TIM_Base_Start_IT>




  if (ds18b20_init() != HAL_OK) {
 800202a:	f7ff fa39 	bl	80014a0 <ds18b20_init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <main+0x58>
    Error_Handler();
 8002034:	f000 faa1 	bl	800257a <Error_Handler>
  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8002038:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fa36 	bl	80014ae <ds18b20_read_address>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <main+0x6c>
    Error_Handler();
 8002048:	f000 fa97 	bl	800257a <Error_Handler>
  }
  lcd_init();
 800204c:	f7ff fd3c 	bl	8001ac8 <lcd_init>

  for (int i = 0; i < 8; i++) {
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002056:	e03a      	b.n	80020ce <main+0xee>
  	    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(100, 0, i*16));
 8002058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800205c:	b29b      	uxth	r3, r3
 800205e:	3302      	adds	r3, #2
 8002060:	b29b      	uxth	r3, r3
 8002062:	b21d      	sxth	r5, r3
 8002064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002068:	b29b      	uxth	r3, r3
 800206a:	3302      	adds	r3, #2
 800206c:	b29b      	uxth	r3, r3
 800206e:	b21e      	sxth	r6, r3
 8002070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002074:	b29b      	uxth	r3, r3
 8002076:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 800207a:	b29b      	uxth	r3, r3
 800207c:	fa0f f883 	sxth.w	r8, r3
 8002080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002084:	b29b      	uxth	r3, r3
 8002086:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 800208a:	b29b      	uxth	r3, r3
 800208c:	fa0f f983 	sxth.w	r9, r3
 8002090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002094:	b29b      	uxth	r3, r3
 8002096:	f1c3 0308 	rsb	r3, r3, #8
 800209a:	b29b      	uxth	r3, r3
 800209c:	b21c      	sxth	r4, r3
 800209e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	2064      	movs	r0, #100	@ 0x64
 80020ae:	f008 f92d 	bl	800a30c <rgb565>
 80020b2:	4603      	mov	r3, r0
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	9400      	str	r4, [sp, #0]
 80020b8:	464b      	mov	r3, r9
 80020ba:	4642      	mov	r2, r8
 80020bc:	4631      	mov	r1, r6
 80020be:	4628      	mov	r0, r5
 80020c0:	f007 ff8a 	bl	8009fd8 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 80020c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020c8:	3301      	adds	r3, #1
 80020ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80020ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	ddc0      	ble.n	8002058 <main+0x78>
  }

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80020d6:	217f      	movs	r1, #127	@ 0x7f
 80020d8:	4891      	ldr	r0, [pc, #580]	@ (8002320 <main+0x340>)
 80020da:	f002 fab5 	bl	8004648 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lps25hb_init();
 80020de:	f7ff fd63 	bl	8001ba8 <lps25hb_init>
	  ds18b20_start_measure(NULL);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fa44 	bl	8001570 <ds18b20_start_measure>
	  HAL_Delay(750);
 80020e8:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80020ec:	f001 f864 	bl	80031b8 <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	488a      	ldr	r0, [pc, #552]	@ (8002320 <main+0x340>)
 80020f6:	f001 fc97 	bl	8003a28 <HAL_ADC_PollForConversion>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d133      	bne.n	8002168 <main+0x188>
	  	uint32_t LDR_Value = HAL_ADC_GetValue(&hadc1);
 8002100:	4887      	ldr	r0, [pc, #540]	@ (8002320 <main+0x340>)
 8002102:	f001 fd69 	bl	8003bd8 <HAL_ADC_GetValue>
 8002106:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	  	voltage = 100 - (LDR_Value * 0.0008f / 2.5f * 100);
 800210a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002116:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8002328 <main+0x348>
 800211a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800211e:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 8002122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002126:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800232c <main+0x34c>
 800212a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800232c <main+0x34c>
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002136:	4b7e      	ldr	r3, [pc, #504]	@ (8002330 <main+0x350>)
 8002138:	edc3 7a00 	vstr	s15, [r3]
	  	sprintf(buffer, "Poziom natężenia oświetlenia: %f\r\n", voltage);
 800213c:	4b7c      	ldr	r3, [pc, #496]	@ (8002330 <main+0x350>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa01 	bl	8000548 <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	497a      	ldr	r1, [pc, #488]	@ (8002334 <main+0x354>)
 800214c:	487a      	ldr	r0, [pc, #488]	@ (8002338 <main+0x358>)
 800214e:	f008 ff43 	bl	800afd8 <siprintf>
	  	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002152:	4879      	ldr	r0, [pc, #484]	@ (8002338 <main+0x358>)
 8002154:	f7fe f88c 	bl	8000270 <strlen>
 8002158:	4603      	mov	r3, r0
 800215a:	b29a      	uxth	r2, r3
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	4975      	ldr	r1, [pc, #468]	@ (8002338 <main+0x358>)
 8002162:	4876      	ldr	r0, [pc, #472]	@ (800233c <main+0x35c>)
 8002164:	f006 fbf4 	bl	8008950 <HAL_UART_Transmit>
	  }
	    temp = ds18b20_get_temp(NULL);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff fa3f 	bl	80015ec <ds18b20_get_temp>
 800216e:	eef0 7a40 	vmov.f32	s15, s0
 8002172:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <main+0x360>)
 8002174:	edc3 7a00 	vstr	s15, [r3]
	    templps25TempAmount = lps25hb_read_temp();
 8002178:	f7ff fd28 	bl	8001bcc <lps25hb_read_temp>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <main+0x364>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
	    templps25PressureAmount = lps25hb_read_pressure();
 8002186:	f7ff fd4f 	bl	8001c28 <lps25hb_read_pressure>
 800218a:	eef0 7a40 	vmov.f32	s15, s0
 800218e:	4b6e      	ldr	r3, [pc, #440]	@ (8002348 <main+0x368>)
 8002190:	edc3 7a00 	vstr	s15, [r3]
	    wchar_t wbuffer[20];
	    wchar_t wbufferlps25hpTemp[20];
	    wchar_t wbufferlps25hpPress[21];
	    ConvertFloatToWchar(temp, wbuffer, sizeof(wbuffer) / sizeof(wchar_t));
 8002194:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <main+0x360>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2114      	movs	r1, #20
 800219e:	4618      	mov	r0, r3
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	f7ff fe08 	bl	8001db8 <ConvertFloatToWchar>
	    ConvertFloatToWchar2(templps25TempAmount, wbufferlps25hpTemp, sizeof(wbufferlps25hpTemp) / sizeof(wchar_t));
 80021a8:	4b66      	ldr	r3, [pc, #408]	@ (8002344 <main+0x364>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021b2:	2114      	movs	r1, #20
 80021b4:	4618      	mov	r0, r3
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	f7ff fe17 	bl	8001dec <ConvertFloatToWchar2>
	    ConvertFloatToWchar3(templps25PressureAmount, wbufferlps25hpPress, sizeof(wbufferlps25hpPress) / sizeof(wchar_t));
 80021be:	4b62      	ldr	r3, [pc, #392]	@ (8002348 <main+0x368>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021c8:	2115      	movs	r1, #21
 80021ca:	4618      	mov	r0, r3
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	f7ff fe26 	bl	8001e20 <ConvertFloatToWchar3>
	    if (temp >= 80.0f){
 80021d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002340 <main+0x360>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800234c <main+0x36c>
 80021de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	db03      	blt.n	80021f0 <main+0x210>
	      printf(" DS18 sensor error...\n");
 80021e8:	4859      	ldr	r0, [pc, #356]	@ (8002350 <main+0x370>)
 80021ea:	f008 feed 	bl	800afc8 <puts>
 80021ee:	e027      	b.n	8002240 <main+0x260>
	    }
	    else{
	    	hagl_put_text(wbuffer, 10, 15, YELLOW, font6x9);
 80021f0:	1d38      	adds	r0, r7, #4
 80021f2:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <main+0x374>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80021fa:	220f      	movs	r2, #15
 80021fc:	210a      	movs	r1, #10
 80021fe:	f007 fe39 	bl	8009e74 <hagl_put_text>
	    	hagl_put_text(L"Na zewnątrz", 10, 90, YELLOW, font6x9);
 8002202:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <main+0x374>)
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 800220a:	225a      	movs	r2, #90	@ 0x5a
 800220c:	210a      	movs	r1, #10
 800220e:	4852      	ldr	r0, [pc, #328]	@ (8002358 <main+0x378>)
 8002210:	f007 fe30 	bl	8009e74 <hagl_put_text>
	    	hagl_put_text(wbufferlps25hpTemp, 10, 100, YELLOW, font6x9);
 8002214:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002218:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <main+0x374>)
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8002220:	2264      	movs	r2, #100	@ 0x64
 8002222:	210a      	movs	r1, #10
 8002224:	f007 fe26 	bl	8009e74 <hagl_put_text>
	    	hagl_put_text(wbufferlps25hpPress, 10, 110, YELLOW, font6x9);
 8002228:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800222c:	4b49      	ldr	r3, [pc, #292]	@ (8002354 <main+0x374>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 8002234:	226e      	movs	r2, #110	@ 0x6e
 8002236:	210a      	movs	r1, #10
 8002238:	f007 fe1c 	bl	8009e74 <hagl_put_text>
	    	lcd_copy();
 800223c:	f7ff fc16 	bl	8001a6c <lcd_copy>
	    }
	    status = MFRC522_Request(PICC_REQIDL, &(cardstr[0]));
 8002240:	4946      	ldr	r1, [pc, #280]	@ (800235c <main+0x37c>)
 8002242:	2026      	movs	r0, #38	@ 0x26
 8002244:	f7fe ff1e 	bl	8001084 <MFRC522_Request>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b44      	ldr	r3, [pc, #272]	@ (8002360 <main+0x380>)
 800224e:	701a      	strb	r2, [r3, #0]
	   	if (status == MI_OK) {
 8002250:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <main+0x380>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f af42 	bne.w	80020de <main+0xfe>
	   	  	status = MFRC522_Anticoll(&(cardstr[0]));
 800225a:	4840      	ldr	r0, [pc, #256]	@ (800235c <main+0x37c>)
 800225c:	f7ff f800 	bl	8001260 <MFRC522_Anticoll>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <main+0x380>)
 8002266:	701a      	strb	r2, [r3, #0]
	   	  	if (status == MI_OK) {
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <main+0x380>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f af36 	bne.w	80020de <main+0xfe>
	   	  		sprintf(str1, "Card:%x,%x,%x,%x,%x\r\n", cardstr[0], cardstr[1], cardstr[2], cardstr[3], cardstr[4]);
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <main+0x37c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	4b38      	ldr	r3, [pc, #224]	@ (800235c <main+0x37c>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	461c      	mov	r4, r3
 800227e:	4b37      	ldr	r3, [pc, #220]	@ (800235c <main+0x37c>)
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	461a      	mov	r2, r3
 8002284:	4b35      	ldr	r3, [pc, #212]	@ (800235c <main+0x37c>)
 8002286:	78db      	ldrb	r3, [r3, #3]
 8002288:	4619      	mov	r1, r3
 800228a:	4b34      	ldr	r3, [pc, #208]	@ (800235c <main+0x37c>)
 800228c:	791b      	ldrb	r3, [r3, #4]
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	9101      	str	r1, [sp, #4]
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	4623      	mov	r3, r4
 8002296:	4602      	mov	r2, r0
 8002298:	4932      	ldr	r1, [pc, #200]	@ (8002364 <main+0x384>)
 800229a:	4833      	ldr	r0, [pc, #204]	@ (8002368 <main+0x388>)
 800229c:	f008 fe9c 	bl	800afd8 <siprintf>
	   	  		process_card_scan(cardstr);
 80022a0:	482e      	ldr	r0, [pc, #184]	@ (800235c <main+0x37c>)
 80022a2:	f7ff fd25 	bl	8001cf0 <process_card_scan>
	   	  		HAL_UART_Transmit(&huart2, str1, strlen(str1), 500);
 80022a6:	4830      	ldr	r0, [pc, #192]	@ (8002368 <main+0x388>)
 80022a8:	f7fd ffe2 	bl	8000270 <strlen>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022b4:	492c      	ldr	r1, [pc, #176]	@ (8002368 <main+0x388>)
 80022b6:	4821      	ldr	r0, [pc, #132]	@ (800233c <main+0x35c>)
 80022b8:	f006 fb4a 	bl	8008950 <HAL_UART_Transmit>
	   	  				if(cardstr[0] == 0xc1){
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <main+0x37c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2bc1      	cmp	r3, #193	@ 0xc1
 80022c2:	f040 809a 	bne.w	80023fa <main+0x41a>
	   	  					//hagl_put_text(L"Witaj Patryk", 45, 55, YELLOW, font6x9);
	   	  					if(registered_people[1].hasEntered == true){
 80022c6:	4b29      	ldr	r3, [pc, #164]	@ (800236c <main+0x38c>)
 80022c8:	7adb      	ldrb	r3, [r3, #11]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <main+0x302>
	   	  						hagl_put_text(L"Logowanie", 45, 55, YELLOW, font6x9);
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <main+0x374>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80022d6:	2237      	movs	r2, #55	@ 0x37
 80022d8:	212d      	movs	r1, #45	@ 0x2d
 80022da:	4825      	ldr	r0, [pc, #148]	@ (8002370 <main+0x390>)
 80022dc:	f007 fdca 	bl	8009e74 <hagl_put_text>
 80022e0:	e008      	b.n	80022f4 <main+0x314>
	   	  					}
	   	  					else{
	   	  						hagl_put_text(L"Wylogowanie", 45, 55, YELLOW, font6x9);
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <main+0x374>)
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 80022ea:	2237      	movs	r2, #55	@ 0x37
 80022ec:	212d      	movs	r1, #45	@ 0x2d
 80022ee:	4821      	ldr	r0, [pc, #132]	@ (8002374 <main+0x394>)
 80022f0:	f007 fdc0 	bl	8009e74 <hagl_put_text>

	   	  					}
	   	  					lcd_copy();
 80022f4:	f7ff fbba 	bl	8001a6c <lcd_copy>
	   	  					send_rfid_to_esp32(temp, cardstr);
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <main+0x360>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	4817      	ldr	r0, [pc, #92]	@ (800235c <main+0x37c>)
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f7ff fde4 	bl	8001ed0 <send_rfid_to_esp32>
	   	  					HAL_Delay(2000);
 8002308:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800230c:	f000 ff54 	bl	80031b8 <HAL_Delay>
	   	  					hagl_clear_screen();
 8002310:	f007 fe38 	bl	8009f84 <hagl_clear_screen>
	   	  					for (int i = 0; i < 8; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800231a:	e068      	b.n	80023ee <main+0x40e>
 800231c:	2000a410 	.word	0x2000a410
 8002320:	20000208 	.word	0x20000208
 8002324:	2000a4c4 	.word	0x2000a4c4
 8002328:	3a51b717 	.word	0x3a51b717
 800232c:	42c80000 	.word	0x42c80000
 8002330:	2000a2c0 	.word	0x2000a2c0
 8002334:	0800df80 	.word	0x0800df80
 8002338:	2000a34c 	.word	0x2000a34c
 800233c:	2000a598 	.word	0x2000a598
 8002340:	2000a2c4 	.word	0x2000a2c4
 8002344:	2000a2c8 	.word	0x2000a2c8
 8002348:	2000a2cc 	.word	0x2000a2cc
 800234c:	42a00000 	.word	0x42a00000
 8002350:	0800dfa8 	.word	0x0800dfa8
 8002354:	0800e130 	.word	0x0800e130
 8002358:	0800dfc0 	.word	0x0800dfc0
 800235c:	2000a334 	.word	0x2000a334
 8002360:	2000a348 	.word	0x2000a348
 8002364:	0800dff0 	.word	0x0800dff0
 8002368:	2000a2d0 	.word	0x2000a2d0
 800236c:	20000000 	.word	0x20000000
 8002370:	0800e008 	.word	0x0800e008
 8002374:	0800e030 	.word	0x0800e030
	   	  						hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(100, 0, i*16));
 8002378:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800237c:	b29b      	uxth	r3, r3
 800237e:	3302      	adds	r3, #2
 8002380:	b29b      	uxth	r3, r3
 8002382:	b21d      	sxth	r5, r3
 8002384:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002388:	b29b      	uxth	r3, r3
 800238a:	3302      	adds	r3, #2
 800238c:	b29b      	uxth	r3, r3
 800238e:	b21e      	sxth	r6, r3
 8002390:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002394:	b29b      	uxth	r3, r3
 8002396:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 800239a:	b29b      	uxth	r3, r3
 800239c:	fa0f f883 	sxth.w	r8, r3
 80023a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	fa0f f983 	sxth.w	r9, r3
 80023b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f1c3 0308 	rsb	r3, r3, #8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b21c      	sxth	r4, r3
 80023be:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	2064      	movs	r0, #100	@ 0x64
 80023ce:	f007 ff9d 	bl	800a30c <rgb565>
 80023d2:	4603      	mov	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	464b      	mov	r3, r9
 80023da:	4642      	mov	r2, r8
 80023dc:	4631      	mov	r1, r6
 80023de:	4628      	mov	r0, r5
 80023e0:	f007 fdfa 	bl	8009fd8 <hagl_draw_rounded_rectangle>
	   	  					for (int i = 0; i < 8; i++) {
 80023e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80023ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023f2:	2b07      	cmp	r3, #7
 80023f4:	ddc0      	ble.n	8002378 <main+0x398>
	   	  					}
	   	  					lcd_copy();
 80023f6:	f7ff fb39 	bl	8001a6c <lcd_copy>
	   	  				}
	   	  				if(cardstr[0] == 0xa3){
 80023fa:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <main+0x4e4>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2ba3      	cmp	r3, #163	@ 0xa3
 8002400:	f47f ae6d 	bne.w	80020de <main+0xfe>
	   	  					hagl_put_text(L"Witaj Mariusz", 45, 55, YELLOW, font6x9);
 8002404:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <main+0x4e8>)
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24e 03ff 	movw	r3, #57599	@ 0xe0ff
 800240c:	2237      	movs	r2, #55	@ 0x37
 800240e:	212d      	movs	r1, #45	@ 0x2d
 8002410:	482e      	ldr	r0, [pc, #184]	@ (80024cc <main+0x4ec>)
 8002412:	f007 fd2f 	bl	8009e74 <hagl_put_text>
	   	  					lcd_copy();
 8002416:	f7ff fb29 	bl	8001a6c <lcd_copy>
	   	  					send_rfid_to_esp32(temp, cardstr);
 800241a:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <main+0x4f0>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	4828      	ldr	r0, [pc, #160]	@ (80024c4 <main+0x4e4>)
 8002422:	eeb0 0a67 	vmov.f32	s0, s15
 8002426:	f7ff fd53 	bl	8001ed0 <send_rfid_to_esp32>
	   	  					HAL_Delay(1000);
 800242a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800242e:	f000 fec3 	bl	80031b8 <HAL_Delay>
	   	  					hagl_clear_screen();
 8002432:	f007 fda7 	bl	8009f84 <hagl_clear_screen>
	   	  					for (int i = 0; i < 8; i++) {
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800243c:	e03a      	b.n	80024b4 <main+0x4d4>
	   	  						hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(100, 0, i*16));
 800243e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002442:	b29b      	uxth	r3, r3
 8002444:	3302      	adds	r3, #2
 8002446:	b29b      	uxth	r3, r3
 8002448:	b21d      	sxth	r5, r3
 800244a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800244e:	b29b      	uxth	r3, r3
 8002450:	3302      	adds	r3, #2
 8002452:	b29b      	uxth	r3, r3
 8002454:	b21e      	sxth	r6, r3
 8002456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800245a:	b29b      	uxth	r3, r3
 800245c:	f1c3 039e 	rsb	r3, r3, #158	@ 0x9e
 8002460:	b29b      	uxth	r3, r3
 8002462:	fa0f f883 	sxth.w	r8, r3
 8002466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800246a:	b29b      	uxth	r3, r3
 800246c:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
 8002470:	b29b      	uxth	r3, r3
 8002472:	fa0f f983 	sxth.w	r9, r3
 8002476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800247a:	b29b      	uxth	r3, r3
 800247c:	f1c3 0308 	rsb	r3, r3, #8
 8002480:	b29b      	uxth	r3, r3
 8002482:	b21c      	sxth	r4, r3
 8002484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002488:	b2db      	uxtb	r3, r3
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	2100      	movs	r1, #0
 8002492:	2064      	movs	r0, #100	@ 0x64
 8002494:	f007 ff3a 	bl	800a30c <rgb565>
 8002498:	4603      	mov	r3, r0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	9400      	str	r4, [sp, #0]
 800249e:	464b      	mov	r3, r9
 80024a0:	4642      	mov	r2, r8
 80024a2:	4631      	mov	r1, r6
 80024a4:	4628      	mov	r0, r5
 80024a6:	f007 fd97 	bl	8009fd8 <hagl_draw_rounded_rectangle>
	   	  					for (int i = 0; i < 8; i++) {
 80024aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024ae:	3301      	adds	r3, #1
 80024b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	ddc0      	ble.n	800243e <main+0x45e>
	   	  					}
	   	  					lcd_copy();
 80024bc:	f7ff fad6 	bl	8001a6c <lcd_copy>
  {
 80024c0:	e60d      	b.n	80020de <main+0xfe>
 80024c2:	bf00      	nop
 80024c4:	2000a334 	.word	0x2000a334
 80024c8:	0800e130 	.word	0x0800e130
 80024cc:	0800e060 	.word	0x0800e060
 80024d0:	2000a2c4 	.word	0x2000a2c4

080024d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b096      	sub	sp, #88	@ 0x58
 80024d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	2244      	movs	r2, #68	@ 0x44
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f008 fea4 	bl	800b230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80024fa:	f003 fad3 	bl	8005aa4 <HAL_PWREx_ControlVoltageScaling>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002504:	f000 f839 	bl	800257a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002508:	230a      	movs	r3, #10
 800250a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800250c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002510:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002512:	2310      	movs	r3, #16
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002516:	2301      	movs	r3, #1
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800251a:	2302      	movs	r3, #2
 800251c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800251e:	2302      	movs	r3, #2
 8002520:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002526:	230a      	movs	r3, #10
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800252a:	2307      	movs	r3, #7
 800252c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800252e:	2302      	movs	r3, #2
 8002530:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002532:	2302      	movs	r3, #2
 8002534:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fb08 	bl	8005b50 <HAL_RCC_OscConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002546:	f000 f818 	bl	800257a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	230f      	movs	r3, #15
 800254c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254e:	2303      	movs	r3, #3
 8002550:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800255e:	463b      	mov	r3, r7
 8002560:	2104      	movs	r1, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fed0 	bl	8006308 <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800256e:	f000 f804 	bl	800257a <Error_Handler>
  }
}
 8002572:	bf00      	nop
 8002574:	3758      	adds	r7, #88	@ 0x58
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257e:	b672      	cpsid	i
}
 8002580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <Error_Handler+0x8>
	...

08002588 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <MX_RTC_Init+0x48>)
 800258e:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <MX_RTC_Init+0x4c>)
 8002590:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <MX_RTC_Init+0x48>)
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002598:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <MX_RTC_Init+0x48>)
 800259a:	227f      	movs	r2, #127	@ 0x7f
 800259c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025a0:	22ff      	movs	r2, #255	@ 0xff
 80025a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025b0:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025bc:	4804      	ldr	r0, [pc, #16]	@ (80025d0 <MX_RTC_Init+0x48>)
 80025be:	f004 fd83 	bl	80070c8 <HAL_RTC_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80025c8:	f7ff ffd7 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000a388 	.word	0x2000a388
 80025d4:	40002800 	.word	0x40002800

080025d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0a4      	sub	sp, #144	@ 0x90
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2288      	movs	r2, #136	@ 0x88
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f008 fe21 	bl	800b230 <memset>
  if(rtcHandle->Instance==RTC)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a10      	ldr	r2, [pc, #64]	@ (8002634 <HAL_RTC_MspInit+0x5c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d118      	bne.n	800262a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4618      	mov	r0, r3
 800260c:	f004 f8a0 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002616:	f7ff ffb0 	bl	800257a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_RTC_MspInit+0x60>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <HAL_RTC_MspInit+0x60>)
 8002622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800262a:	bf00      	nop
 800262c:	3790      	adds	r7, #144	@ 0x90
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40002800 	.word	0x40002800
 8002638:	40021000 	.word	0x40021000

0800263c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002640:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <MX_SPI2_Init+0x78>)
 8002644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002648:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800264c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800264e:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002654:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002656:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800265a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <MX_SPI2_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <MX_SPI2_Init+0x74>)
 800266a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <MX_SPI2_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <MX_SPI2_Init+0x74>)
 800268a:	2207      	movs	r2, #7
 800268c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <MX_SPI2_Init+0x74>)
 8002696:	2208      	movs	r2, #8
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800269a:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_SPI2_Init+0x74>)
 800269c:	f004 fe32 	bl	8007304 <HAL_SPI_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80026a6:	f7ff ff68 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000a3ac 	.word	0x2000a3ac
 80026b4:	40003800 	.word	0x40003800

080026b8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <MX_SPI3_Init+0x74>)
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <MX_SPI3_Init+0x78>)
 80026c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <MX_SPI3_Init+0x74>)
 80026c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026ca:	4b18      	ldr	r3, [pc, #96]	@ (800272c <MX_SPI3_Init+0x74>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80026d0:	4b16      	ldr	r3, [pc, #88]	@ (800272c <MX_SPI3_Init+0x74>)
 80026d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <MX_SPI3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <MX_SPI3_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_SPI3_Init+0x74>)
 80026e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <MX_SPI3_Init+0x74>)
 80026ee:	2218      	movs	r2, #24
 80026f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_SPI3_Init+0x74>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_SPI3_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_SPI3_Init+0x74>)
 8002700:	2200      	movs	r2, #0
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_SPI3_Init+0x74>)
 8002706:	2207      	movs	r2, #7
 8002708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_SPI3_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_SPI3_Init+0x74>)
 8002712:	2208      	movs	r2, #8
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_SPI3_Init+0x74>)
 8002718:	f004 fdf4 	bl	8007304 <HAL_SPI_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002722:	f7ff ff2a 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000a410 	.word	0x2000a410
 8002730:	40003c00 	.word	0x40003c00

08002734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	@ 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3d      	ldr	r2, [pc, #244]	@ (8002848 <HAL_SPI_MspInit+0x114>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d145      	bne.n	80027e2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002756:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	4a3c      	ldr	r2, [pc, #240]	@ (800284c <HAL_SPI_MspInit+0x118>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	4a36      	ldr	r2, [pc, #216]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800277a:	4b34      	ldr	r3, [pc, #208]	@ (800284c <HAL_SPI_MspInit+0x118>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a30      	ldr	r2, [pc, #192]	@ (800284c <HAL_SPI_MspInit+0x118>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800279e:	2308      	movs	r3, #8
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ae:	2305      	movs	r3, #5
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	4825      	ldr	r0, [pc, #148]	@ (8002850 <HAL_SPI_MspInit+0x11c>)
 80027ba:	f002 f967 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027d0:	2305      	movs	r3, #5
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	481e      	ldr	r0, [pc, #120]	@ (8002854 <HAL_SPI_MspInit+0x120>)
 80027dc:	f002 f956 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80027e0:	e02d      	b.n	800283e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <HAL_SPI_MspInit+0x124>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d128      	bne.n	800283e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027ec:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_SPI_MspInit+0x118>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	4a16      	ldr	r2, [pc, #88]	@ (800284c <HAL_SPI_MspInit+0x118>)
 80027f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_SPI_MspInit+0x118>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002808:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_SPI_MspInit+0x118>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_SPI_MspInit+0x118>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800281c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800282e:	2306      	movs	r3, #6
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	@ (8002850 <HAL_SPI_MspInit+0x11c>)
 800283a:	f002 f927 	bl	8004a8c <HAL_GPIO_Init>
}
 800283e:	bf00      	nop
 8002840:	3730      	adds	r7, #48	@ 0x30
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40003800 	.word	0x40003800
 800284c:	40021000 	.word	0x40021000
 8002850:	48000800 	.word	0x48000800
 8002854:	48000400 	.word	0x48000400
 8002858:	40003c00 	.word	0x40003c00

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_MspInit+0x44>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_MspInit+0x44>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6613      	str	r3, [r2, #96]	@ 0x60
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_MspInit+0x44>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_MspInit+0x44>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <HAL_MspInit+0x44>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_MspInit+0x44>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <MemManage_Handler+0x4>

080028bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <UsageFault_Handler+0x4>

080028cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028fa:	f000 fc3d 	bl	8003178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <TIM7_IRQHandler+0x10>)
 800290a:	f005 fd57 	bl	80083bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000a4c4 	.word	0x2000a4c4

08002918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_kill>:

int _kill(int pid, int sig)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002932:	f008 fccf 	bl	800b2d4 <__errno>
 8002936:	4603      	mov	r3, r0
 8002938:	2216      	movs	r2, #22
 800293a:	601a      	str	r2, [r3, #0]
  return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_exit>:

void _exit (int status)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe7 	bl	8002928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800295a:	bf00      	nop
 800295c:	e7fd      	b.n	800295a <_exit+0x12>

0800295e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e00a      	b.n	8002986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002970:	f3af 8000 	nop.w
 8002974:	4601      	mov	r1, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	60ba      	str	r2, [r7, #8]
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	dbf0      	blt.n	8002970 <_read+0x12>
  }

  return len;
 800298e:	687b      	ldr	r3, [r7, #4]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e009      	b.n	80029be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	60ba      	str	r2, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f9e8 	bl	8001d88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3301      	adds	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	dbf1      	blt.n	80029aa <_write+0x12>
  }
  return len;
 80029c6:	687b      	ldr	r3, [r7, #4]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <_close>:

int _close(int file)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f8:	605a      	str	r2, [r3, #4]
  return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_isatty>:

int _isatty(int file)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <_sbrk+0x5c>)
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <_sbrk+0x60>)
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a4c:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <_sbrk+0x64>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <_sbrk+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a68:	f008 fc34 	bl	800b2d4 <__errno>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	220c      	movs	r2, #12
 8002a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	e009      	b.n	8002a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <_sbrk+0x64>)
 8002a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20018000 	.word	0x20018000
 8002a98:	00000400 	.word	0x00000400
 8002a9c:	2000a474 	.word	0x2000a474
 8002aa0:	2000a770 	.word	0x2000a770

08002aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <SystemInit+0x20>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <SystemInit+0x20>)
 8002ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002ada:	4a15      	ldr	r2, [pc, #84]	@ (8002b30 <MX_TIM6_Init+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002ae0:	224f      	movs	r2, #79	@ 0x4f
 8002ae2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002af0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002af8:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002afa:	f005 fb2f 	bl	800815c <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b04:	f7ff fd39 	bl	800257a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4805      	ldr	r0, [pc, #20]	@ (8002b2c <MX_TIM6_Init+0x64>)
 8002b16:	f005 fe27 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b20:	f7ff fd2b 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	2000a478 	.word	0x2000a478
 8002b30:	40001000 	.word	0x40001000

08002b34 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b46:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <MX_TIM7_Init+0x6c>)
 8002b48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002b58:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b66:	480d      	ldr	r0, [pc, #52]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b68:	f005 faf8 	bl	800815c <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002b72:	f7ff fd02 	bl	800257a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4806      	ldr	r0, [pc, #24]	@ (8002b9c <MX_TIM7_Init+0x68>)
 8002b84:	f005 fdf0 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002b8e:	f7ff fcf4 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000a4c4 	.word	0x2000a4c4
 8002ba0:	40001400 	.word	0x40001400

08002ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_TIM_Base_MspInit+0x68>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bba:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc2:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002bce:	e018      	b.n	8002c02 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c14 <HAL_TIM_Base_MspInit+0x70>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d113      	bne.n	8002c02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	4a0c      	ldr	r2, [pc, #48]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002be0:	f043 0320 	orr.w	r3, r3, #32
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_TIM_Base_MspInit+0x6c>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	210a      	movs	r1, #10
 8002bf6:	2037      	movs	r0, #55	@ 0x37
 8002bf8:	f001 ff11 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bfc:	2037      	movs	r0, #55	@ 0x37
 8002bfe:	f001 ff2a 	bl	8004a56 <HAL_NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40001000 	.word	0x40001000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40001400 	.word	0x40001400

08002c18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c1e:	4a15      	ldr	r2, [pc, #84]	@ (8002c74 <MX_USART1_UART_Init+0x5c>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	@ (8002c70 <MX_USART1_UART_Init+0x58>)
 8002c5c:	f005 fe2a 	bl	80088b4 <HAL_UART_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c66:	f7ff fc88 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000a510 	.word	0x2000a510
 8002c74:	40013800 	.word	0x40013800

08002c78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c7e:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <MX_USART2_UART_Init+0x5c>)
 8002c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cba:	4805      	ldr	r0, [pc, #20]	@ (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cbc:	f005 fdfa 	bl	80088b4 <HAL_UART_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cc6:	f7ff fc58 	bl	800257a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000a598 	.word	0x2000a598
 8002cd4:	40004400 	.word	0x40004400

08002cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0ae      	sub	sp, #184	@ 0xb8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	2288      	movs	r2, #136	@ 0x88
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f008 fa99 	bl	800b230 <memset>
  if(uartHandle->Instance==USART1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a43      	ldr	r2, [pc, #268]	@ (8002e10 <HAL_UART_MspInit+0x138>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d13d      	bne.n	8002d84 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fd1b 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d20:	f7ff fc2b 	bl	800257a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d24:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d28:	4a3a      	ldr	r2, [pc, #232]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d30:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3c:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d48:	4b32      	ldr	r3, [pc, #200]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d54:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7e:	f001 fe85 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d82:	e040      	b.n	8002e06 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a23      	ldr	r2, [pc, #140]	@ (8002e18 <HAL_UART_MspInit+0x140>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d13b      	bne.n	8002e06 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fcd8 	bl	8006750 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002da6:	f7ff fbe8 	bl	800257a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	4a19      	ldr	r2, [pc, #100]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db6:	4b17      	ldr	r3, [pc, #92]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	4a13      	ldr	r2, [pc, #76]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_UART_MspInit+0x13c>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dda:	230c      	movs	r3, #12
 8002ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df2:	2307      	movs	r3, #7
 8002df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e02:	f001 fe43 	bl	8004a8c <HAL_GPIO_Init>
}
 8002e06:	bf00      	nop
 8002e08:	37b8      	adds	r7, #184	@ 0xb8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40004400 	.word	0x40004400

08002e1c <wire_init>:
#include "wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 8002e20:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <wire_init+0x10>)
 8002e22:	f005 f9f3 	bl	800820c <HAL_TIM_Base_Start>
 8002e26:	4603      	mov	r3, r0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000a478 	.word	0x2000a478

08002e30 <delay_us>:

static void delay_us(uint32_t us)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <delay_us+0x2c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8002e40:	bf00      	nop
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <delay_us+0x2c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d8f9      	bhi.n	8002e42 <delay_us+0x12>
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	2000a478 	.word	0x2000a478

08002e60 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2110      	movs	r1, #16
 8002e6a:	4811      	ldr	r0, [pc, #68]	@ (8002eb0 <wire_reset+0x50>)
 8002e6c:	f001 ffd0 	bl	8004e10 <HAL_GPIO_WritePin>
  delay_us(480);
 8002e70:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8002e74:	f7ff ffdc 	bl	8002e30 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	480c      	ldr	r0, [pc, #48]	@ (8002eb0 <wire_reset+0x50>)
 8002e7e:	f001 ffc7 	bl	8004e10 <HAL_GPIO_WritePin>
  delay_us(70);
 8002e82:	2046      	movs	r0, #70	@ 0x46
 8002e84:	f7ff ffd4 	bl	8002e30 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8002e88:	2110      	movs	r1, #16
 8002e8a:	4809      	ldr	r0, [pc, #36]	@ (8002eb0 <wire_reset+0x50>)
 8002e8c:	f001 ffa8 	bl	8004de0 <HAL_GPIO_ReadPin>
 8002e90:	4603      	mov	r3, r0
 8002e92:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8002e94:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8002e98:	f7ff ffca 	bl	8002e30 <delay_us>

  if (rc == 0)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <wire_reset+0x46>
    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	48000800 	.word	0x48000800

08002eb4 <read_bit>:

static int read_bit(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	480e      	ldr	r0, [pc, #56]	@ (8002ef8 <read_bit+0x44>)
 8002ec0:	f001 ffa6 	bl	8004e10 <HAL_GPIO_WritePin>
  delay_us(6);
 8002ec4:	2006      	movs	r0, #6
 8002ec6:	f7ff ffb3 	bl	8002e30 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2110      	movs	r1, #16
 8002ece:	480a      	ldr	r0, [pc, #40]	@ (8002ef8 <read_bit+0x44>)
 8002ed0:	f001 ff9e 	bl	8004e10 <HAL_GPIO_WritePin>
  delay_us(9);
 8002ed4:	2009      	movs	r0, #9
 8002ed6:	f7ff ffab 	bl	8002e30 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8002eda:	2110      	movs	r1, #16
 8002edc:	4806      	ldr	r0, [pc, #24]	@ (8002ef8 <read_bit+0x44>)
 8002ede:	f001 ff7f 	bl	8004de0 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8002ee6:	2037      	movs	r0, #55	@ 0x37
 8002ee8:	f7ff ffa2 	bl	8002e30 <delay_us>
  return rc;
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	48000800 	.word	0x48000800

08002efc <wire_read>:

uint8_t wire_read(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	e00e      	b.n	8002f2a <wire_read+0x2e>
    value >>= 1;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8002f12:	f7ff ffcf 	bl	8002eb4 <read_bit>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <wire_read+0x28>
      value |= 0x80;
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f22:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	dded      	ble.n	8002f0c <wire_read+0x10>
  }
  return value;
 8002f30:	79fb      	ldrb	r3, [r7, #7]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <write_bit>:

static void write_bit(int value)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if (value) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	4811      	ldr	r0, [pc, #68]	@ (8002f94 <write_bit+0x58>)
 8002f50:	f001 ff5e 	bl	8004e10 <HAL_GPIO_WritePin>
    delay_us(6);
 8002f54:	2006      	movs	r0, #6
 8002f56:	f7ff ff6b 	bl	8002e30 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2110      	movs	r1, #16
 8002f5e:	480d      	ldr	r0, [pc, #52]	@ (8002f94 <write_bit+0x58>)
 8002f60:	f001 ff56 	bl	8004e10 <HAL_GPIO_WritePin>
    delay_us(64);
 8002f64:	2040      	movs	r0, #64	@ 0x40
 8002f66:	f7ff ff63 	bl	8002e30 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8002f6a:	e00f      	b.n	8002f8c <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2110      	movs	r1, #16
 8002f70:	4808      	ldr	r0, [pc, #32]	@ (8002f94 <write_bit+0x58>)
 8002f72:	f001 ff4d 	bl	8004e10 <HAL_GPIO_WritePin>
    delay_us(60);
 8002f76:	203c      	movs	r0, #60	@ 0x3c
 8002f78:	f7ff ff5a 	bl	8002e30 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4804      	ldr	r0, [pc, #16]	@ (8002f94 <write_bit+0x58>)
 8002f82:	f001 ff45 	bl	8004e10 <HAL_GPIO_WritePin>
    delay_us(10);
 8002f86:	200a      	movs	r0, #10
 8002f88:	f7ff ff52 	bl	8002e30 <delay_us>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	48000800 	.word	0x48000800

08002f98 <wire_write>:

void wire_write(uint8_t byte)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e00b      	b.n	8002fc0 <wire_write+0x28>
    write_bit(byte & 0x01);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ffc4 	bl	8002f3c <write_bit>
    byte >>= 1;
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	ddf0      	ble.n	8002fa8 <wire_write+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460a      	mov	r2, r1
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e016      	b.n	8003014 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	4053      	eors	r3, r2
 8002fec:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <byte_crc+0x38>
      crc ^= 0x8c;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8003004:	43db      	mvns	r3, r3
 8003006:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b07      	cmp	r3, #7
 8003018:	dde5      	ble.n	8002fe6 <byte_crc+0x16>
  }
  return crc;
 800301a:	79fb      	ldrb	r3, [r7, #7]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e00d      	b.n	8003058 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ffc1 	bl	8002fd0 <byte_crc>
 800304e:	4603      	mov	r3, r0
 8003050:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3301      	adds	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	dbed      	blt.n	800303c <wire_crc+0x14>

    return crc;
 8003060:	7afb      	ldrb	r3, [r7, #11]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800306c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003070:	f7ff fd18 	bl	8002aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003074:	480c      	ldr	r0, [pc, #48]	@ (80030a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003076:	490d      	ldr	r1, [pc, #52]	@ (80030ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003078:	4a0d      	ldr	r2, [pc, #52]	@ (80030b0 <LoopForever+0xe>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800307c:	e002      	b.n	8003084 <LoopCopyDataInit>

0800307e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003082:	3304      	adds	r3, #4

08003084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003088:	d3f9      	bcc.n	800307e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800308c:	4c0a      	ldr	r4, [pc, #40]	@ (80030b8 <LoopForever+0x16>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003090:	e001      	b.n	8003096 <LoopFillZerobss>

08003092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003094:	3204      	adds	r2, #4

08003096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003098:	d3fb      	bcc.n	8003092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309a:	f008 f921 	bl	800b2e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800309e:	f7fe ff9f 	bl	8001fe0 <main>

080030a2 <LoopForever>:

LoopForever:
    b LoopForever
 80030a2:	e7fe      	b.n	80030a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80030b0:	0801165c 	.word	0x0801165c
  ldr r2, =_sbss
 80030b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80030b8:	2000a770 	.word	0x2000a770

080030bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_2_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ca:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <HAL_Init+0x3c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <HAL_Init+0x3c>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d6:	2003      	movs	r0, #3
 80030d8:	f001 fc96 	bl	8004a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030dc:	2000      	movs	r0, #0
 80030de:	f000 f80f 	bl	8003100 <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	71fb      	strb	r3, [r7, #7]
 80030ec:	e001      	b.n	80030f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030ee:	f7ff fbb5 	bl	800285c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030f2:	79fb      	ldrb	r3, [r7, #7]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_InitTick+0x6c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003114:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <HAL_InitTick+0x70>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <HAL_InitTick+0x6c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003122:	fbb3 f3f1 	udiv	r3, r3, r1
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fca1 	bl	8004a72 <HAL_SYSTICK_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d809      	bhi.n	8003150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800313c:	2200      	movs	r2, #0
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f001 fc6b 	bl	8004a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003148:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <HAL_InitTick+0x74>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e007      	b.n	8003160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e004      	b.n	8003160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e001      	b.n	8003160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000014 	.word	0x20000014
 8003170:	2000000c 	.word	0x2000000c
 8003174:	20000010 	.word	0x20000010

08003178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_IncTick+0x20>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_IncTick+0x24>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4413      	add	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	@ (800319c <HAL_IncTick+0x24>)
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000014 	.word	0x20000014
 800319c:	2000a620 	.word	0x2000a620

080031a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_GetTick+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	2000a620 	.word	0x2000a620

080031b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff ffee 	bl	80031a0 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d005      	beq.n	80031de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <HAL_Delay+0x44>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031de:	bf00      	nop
 80031e0:	f7ff ffde 	bl	80031a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d8f7      	bhi.n	80031e0 <HAL_Delay+0x28>
  {
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000014 	.word	0x20000014

08003200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3360      	adds	r3, #96	@ 0x60
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <LL_ADC_SetOffset+0x44>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	03fff000 	.word	0x03fff000

080032b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3360      	adds	r3, #96	@ 0x60
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3360      	adds	r3, #96	@ 0x60
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3330      	adds	r3, #48	@ 0x30
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	211f      	movs	r1, #31
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 011f 	and.w	r1, r3, #31
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3314      	adds	r3, #20
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0e5b      	lsrs	r3, r3, #25
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0d1b      	lsrs	r3, r3, #20
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2107      	movs	r1, #7
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	401a      	ands	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0d1b      	lsrs	r3, r3, #20
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	431a      	orrs	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0318 	and.w	r3, r3, #24
 800340a:	4908      	ldr	r1, [pc, #32]	@ (800342c <LL_ADC_SetChannelSingleDiff+0x44>)
 800340c:	40d9      	lsrs	r1, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	400b      	ands	r3, r1
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	0007ffff 	.word	0x0007ffff

08003430 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 031f 	and.w	r3, r3, #31
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6093      	str	r3, [r2, #8]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800353c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003540:	f043 0202 	orr.w	r2, r3, #2
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <LL_ADC_IsEnabled+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_ADC_IsEnabled+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d101      	bne.n	8003592 <LL_ADC_IsDisableOngoing+0x18>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <LL_ADC_IsDisableOngoing+0x1a>
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d101      	bne.n	80035e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d101      	bne.n	8003606 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b089      	sub	sp, #36	@ 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e130      	b.n	8003890 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd fec5 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff19 	bl	800348c <LL_ADC_IsDeepPowerDownEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff feff 	bl	8003468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff34 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d115      	bne.n	80036a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff18 	bl	80034b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003684:	4b84      	ldr	r3, [pc, #528]	@ (8003898 <HAL_ADC_Init+0x284>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	4a84      	ldr	r2, [pc, #528]	@ (800389c <HAL_ADC_Init+0x288>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003698:	e002      	b.n	80036a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff16 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10d      	bne.n	80036d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff76 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 80036dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80c9 	bne.w	800387e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 80c5 	bne.w	800387e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80036fc:	f043 0202 	orr.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff23 	bl	8003554 <LL_ADC_IsEnabled>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003714:	4862      	ldr	r0, [pc, #392]	@ (80038a0 <HAL_ADC_Init+0x28c>)
 8003716:	f7ff ff1d 	bl	8003554 <LL_ADC_IsEnabled>
 800371a:	4604      	mov	r4, r0
 800371c:	4861      	ldr	r0, [pc, #388]	@ (80038a4 <HAL_ADC_Init+0x290>)
 800371e:	f7ff ff19 	bl	8003554 <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	431c      	orrs	r4, r3
 8003726:	4860      	ldr	r0, [pc, #384]	@ (80038a8 <HAL_ADC_Init+0x294>)
 8003728:	f7ff ff14 	bl	8003554 <LL_ADC_IsEnabled>
 800372c:	4603      	mov	r3, r0
 800372e:	4323      	orrs	r3, r4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4619      	mov	r1, r3
 800373a:	485c      	ldr	r0, [pc, #368]	@ (80038ac <HAL_ADC_Init+0x298>)
 800373c:	f7ff fd60 	bl	8003200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e5b      	ldrb	r3, [r3, #25]
 8003744:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800374a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003750:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003756:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d106      	bne.n	800377c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	3b01      	subs	r3, #1
 8003774:	045b      	lsls	r3, r3, #17
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b44      	ldr	r3, [pc, #272]	@ (80038b0 <HAL_ADC_Init+0x29c>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff1c 	bl	80035ee <LL_ADC_INJ_IsConversionOngoing>
 80037b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d13d      	bne.n	800383a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d13a      	bne.n	800383a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037e0:	f023 0302 	bic.w	r3, r3, #2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	430b      	orrs	r3, r1
 80037ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d118      	bne.n	800382a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800381a:	430a      	orrs	r2, r1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	611a      	str	r2, [r3, #16]
 8003828:	e007      	b.n	800383a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10c      	bne.n	800385c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f023 010f 	bic.w	r1, r3, #15
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
 800385a:	e007      	b.n	800386c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 020f 	bic.w	r2, r2, #15
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f023 0303 	bic.w	r3, r3, #3
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
 800387c:	e007      	b.n	800388e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f043 0210 	orr.w	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800388e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3724      	adds	r7, #36	@ 0x24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	2000000c 	.word	0x2000000c
 800389c:	053e2d63 	.word	0x053e2d63
 80038a0:	50040000 	.word	0x50040000
 80038a4:	50040100 	.word	0x50040100
 80038a8:	50040200 	.word	0x50040200
 80038ac:	50040300 	.word	0x50040300
 80038b0:	fff0c007 	.word	0xfff0c007

080038b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038bc:	4857      	ldr	r0, [pc, #348]	@ (8003a1c <HAL_ADC_Start+0x168>)
 80038be:	f7ff fdb7 	bl	8003430 <LL_ADC_GetMultimode>
 80038c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fe7d 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 809c 	bne.w	8003a0e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_Start+0x30>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e097      	b.n	8003a14 <HAL_ADC_Start+0x160>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fd73 	bl	80043d8 <ADC_Enable>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 8083 	bne.w	8003a04 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a42      	ldr	r2, [pc, #264]	@ (8003a20 <HAL_ADC_Start+0x16c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d002      	beq.n	8003922 <HAL_ADC_Start+0x6e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	e000      	b.n	8003924 <HAL_ADC_Start+0x70>
 8003922:	4b40      	ldr	r3, [pc, #256]	@ (8003a24 <HAL_ADC_Start+0x170>)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	4293      	cmp	r3, r2
 800392a:	d002      	beq.n	8003932 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d106      	bne.n	800395a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	f023 0206 	bic.w	r2, r3, #6
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	@ 0x58
 8003958:	e002      	b.n	8003960 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	221c      	movs	r2, #28
 8003966:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <HAL_ADC_Start+0x16c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d002      	beq.n	8003980 <HAL_ADC_Start+0xcc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	e000      	b.n	8003982 <HAL_ADC_Start+0xce>
 8003980:	4b28      	ldr	r3, [pc, #160]	@ (8003a24 <HAL_ADC_Start+0x170>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	4293      	cmp	r3, r2
 8003988:	d008      	beq.n	800399c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d002      	beq.n	800399c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b09      	cmp	r3, #9
 800399a:	d114      	bne.n	80039c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fdee 	bl	80035a0 <LL_ADC_REG_StartConversion>
 80039c4:	e025      	b.n	8003a12 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <HAL_ADC_Start+0x16c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d002      	beq.n	80039e2 <HAL_ADC_Start+0x12e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	e000      	b.n	80039e4 <HAL_ADC_Start+0x130>
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <HAL_ADC_Start+0x170>)
 80039e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00f      	beq.n	8003a12 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a02:	e006      	b.n	8003a12 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003a0c:	e001      	b.n	8003a12 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	50040300 	.word	0x50040300
 8003a20:	50040100 	.word	0x50040100
 8003a24:	50040000 	.word	0x50040000

08003a28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a32:	4866      	ldr	r0, [pc, #408]	@ (8003bcc <HAL_ADC_PollForConversion+0x1a4>)
 8003a34:	f7ff fcfc 	bl	8003430 <LL_ADC_GetMultimode>
 8003a38:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d102      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a42:	2308      	movs	r3, #8
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e02a      	b.n	8003a9e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d002      	beq.n	8003a5a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	d111      	bne.n	8003a7e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0a4      	b.n	8003bc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a78:	2304      	movs	r3, #4
 8003a7a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a7c:	e00f      	b.n	8003a9e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a7e:	4853      	ldr	r0, [pc, #332]	@ (8003bcc <HAL_ADC_PollForConversion+0x1a4>)
 8003a80:	f7ff fce4 	bl	800344c <LL_ADC_GetMultiDMATransfer>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	f043 0220 	orr.w	r2, r3, #32
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e093      	b.n	8003bc2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a9e:	f7ff fb7f 	bl	80031a0 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aa4:	e021      	b.n	8003aea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d01d      	beq.n	8003aea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aae:	f7ff fb77 	bl	80031a0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <HAL_ADC_PollForConversion+0x9c>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d112      	bne.n	8003aea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e06b      	b.n	8003bc2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0d6      	beq.n	8003aa6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fc02 	bl	8003312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7e5b      	ldrb	r3, [r3, #25]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d118      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d111      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd0 <HAL_ADC_PollForConversion+0x1a8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d002      	beq.n	8003b5e <HAL_ADC_PollForConversion+0x136>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e000      	b.n	8003b60 <HAL_ADC_PollForConversion+0x138>
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <HAL_ADC_PollForConversion+0x1ac>)
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d008      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d104      	bne.n	8003b84 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e00c      	b.n	8003b9e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <HAL_ADC_PollForConversion+0x1a8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d002      	beq.n	8003b94 <HAL_ADC_PollForConversion+0x16c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	e000      	b.n	8003b96 <HAL_ADC_PollForConversion+0x16e>
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_ADC_PollForConversion+0x1ac>)
 8003b96:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d104      	bne.n	8003bae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e008      	b.n	8003bc0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	220c      	movs	r2, #12
 8003bbe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	50040300 	.word	0x50040300
 8003bd0:	50040100 	.word	0x50040100
 8003bd4:	50040000 	.word	0x50040000

08003bd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0b6      	sub	sp, #216	@ 0xd8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x22>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e3c9      	b.n	80043aa <HAL_ADC_ConfigChannel+0x7b6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fcd0 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 83aa 	bne.w	8004384 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d824      	bhi.n	8003c8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	3b02      	subs	r3, #2
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d81b      	bhi.n	8003c82 <HAL_ADC_ConfigChannel+0x8e>
 8003c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_ADC_ConfigChannel+0x5c>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c69 	.word	0x08003c69
 8003c58:	08003c71 	.word	0x08003c71
 8003c5c:	08003c79 	.word	0x08003c79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c60:	230c      	movs	r3, #12
 8003c62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c66:	e010      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003c68:	2312      	movs	r3, #18
 8003c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c6e:	e00c      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003c70:	2318      	movs	r3, #24
 8003c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c76:	e008      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c80:	e003      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c82:	2306      	movs	r3, #6
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003c98:	f7ff fb4e 	bl	8003338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fc91 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003ca6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fc9d 	bl	80035ee <LL_ADC_INJ_IsConversionOngoing>
 8003cb4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f040 81a4 	bne.w	800400a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 819f 	bne.w	800400a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f7ff fb59 	bl	8003390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d00a      	beq.n	8003d16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6919      	ldr	r1, [r3, #16]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d10:	f7ff faaa 	bl	8003268 <LL_ADC_SetOffset>
 8003d14:	e179      	b.n	800400a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fac7 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x14e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fabc 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	e01e      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x18c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fab1 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e004      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x1a4>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	e018      	b.n	8003dca <HAL_ADC_ConfigChannel+0x1d6>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	e004      	b.n	8003dca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d106      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fa80 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fa64 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x214>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fa59 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	f003 021f 	and.w	r2, r3, #31
 8003e06:	e01e      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x252>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fa4e 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e004      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d105      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x26a>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e9b      	lsrs	r3, r3, #26
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	e018      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x29c>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003e82:	2320      	movs	r3, #32
 8003e84:	e004      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d106      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fa1d 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fa01 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x2da>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f9f6 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0e9b      	lsrs	r3, r3, #26
 8003ec8:	f003 021f 	and.w	r2, r3, #31
 8003ecc:	e01e      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x318>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f9eb 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e004      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x330>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	0e9b      	lsrs	r3, r3, #26
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	e014      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x35a>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e004      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d106      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f9be 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2103      	movs	r1, #3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f9a2 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x398>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f997 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	f003 021f 	and.w	r2, r3, #31
 8003f8a:	e017      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x3c8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2103      	movs	r1, #3
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f98c 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	e003      	b.n	8003fba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x3e0>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	e011      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x404>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003fe6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	2103      	movs	r1, #3
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff f969 	bl	80032dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff faa0 	bl	8003554 <LL_ADC_IsEnabled>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 8140 	bne.w	800429c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	461a      	mov	r2, r3
 800402a:	f7ff f9dd 	bl	80033e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a8f      	ldr	r2, [pc, #572]	@ (8004270 <HAL_ADC_ConfigChannel+0x67c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f040 8131 	bne.w	800429c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x46e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0e9b      	lsrs	r3, r3, #26
 8004050:	3301      	adds	r3, #1
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2b09      	cmp	r3, #9
 8004058:	bf94      	ite	ls
 800405a:	2301      	movls	r3, #1
 800405c:	2300      	movhi	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	e019      	b.n	8004096 <HAL_ADC_ConfigChannel+0x4a2>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004072:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800407a:	2320      	movs	r3, #32
 800407c:	e003      	b.n	8004086 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800407e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2b09      	cmp	r3, #9
 800408e:	bf94      	ite	ls
 8004090:	2301      	movls	r3, #1
 8004092:	2300      	movhi	r3, #0
 8004094:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004096:	2b00      	cmp	r3, #0
 8004098:	d079      	beq.n	800418e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x4c2>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	0e9b      	lsrs	r3, r3, #26
 80040ac:	3301      	adds	r3, #1
 80040ae:	069b      	lsls	r3, r3, #26
 80040b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b4:	e015      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x4ee>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80040ce:	2320      	movs	r3, #32
 80040d0:	e003      	b.n	80040da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80040d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	069b      	lsls	r3, r3, #26
 80040de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x50e>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	3301      	adds	r3, #1
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	e017      	b.n	8004132 <HAL_ADC_ConfigChannel+0x53e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800411a:	2320      	movs	r3, #32
 800411c:	e003      	b.n	8004126 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800411e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	3301      	adds	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	ea42 0103 	orr.w	r1, r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x564>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0e9b      	lsrs	r3, r3, #26
 8004148:	3301      	adds	r3, #1
 800414a:	f003 021f 	and.w	r2, r3, #31
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	051b      	lsls	r3, r3, #20
 8004156:	e018      	b.n	800418a <HAL_ADC_ConfigChannel+0x596>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f003 021f 	and.w	r2, r3, #31
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418a:	430b      	orrs	r3, r1
 800418c:	e081      	b.n	8004292 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x5b6>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0e9b      	lsrs	r3, r3, #26
 80041a0:	3301      	adds	r3, #1
 80041a2:	069b      	lsls	r3, r3, #26
 80041a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a8:	e015      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x5e2>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e003      	b.n	80041ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	069b      	lsls	r3, r3, #26
 80041d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x602>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	3301      	adds	r3, #1
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	e017      	b.n	8004226 <HAL_ADC_ConfigChannel+0x632>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	61bb      	str	r3, [r7, #24]
  return result;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800420e:	2320      	movs	r3, #32
 8004210:	e003      	b.n	800421a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f303 	lsl.w	r3, r1, r3
 8004226:	ea42 0103 	orr.w	r1, r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x65e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	0e9b      	lsrs	r3, r3, #26
 800423c:	3301      	adds	r3, #1
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	3b1e      	subs	r3, #30
 800424a:	051b      	lsls	r3, r3, #20
 800424c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004250:	e01e      	b.n	8004290 <HAL_ADC_ConfigChannel+0x69c>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	60fb      	str	r3, [r7, #12]
  return result;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800426a:	2320      	movs	r3, #32
 800426c:	e006      	b.n	800427c <HAL_ADC_ConfigChannel+0x688>
 800426e:	bf00      	nop
 8004270:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f003 021f 	and.w	r2, r3, #31
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	3b1e      	subs	r3, #30
 800428a:	051b      	lsls	r3, r3, #20
 800428c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004290:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004296:	4619      	mov	r1, r3
 8004298:	f7ff f87a 	bl	8003390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d07a      	beq.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a8:	4843      	ldr	r0, [pc, #268]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80042aa:	f7fe ffcf 	bl	800324c <LL_ADC_GetCommonPathInternalCh>
 80042ae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a41      	ldr	r2, [pc, #260]	@ (80043bc <HAL_ADC_ConfigChannel+0x7c8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d12c      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d126      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3c      	ldr	r2, [pc, #240]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_ADC_ConfigChannel+0x6e8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3b      	ldr	r2, [pc, #236]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7d0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d15d      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042e4:	4619      	mov	r1, r3
 80042e6:	4834      	ldr	r0, [pc, #208]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80042e8:	f7fe ff9d 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ec:	4b36      	ldr	r3, [pc, #216]	@ (80043c8 <HAL_ADC_ConfigChannel+0x7d4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	4a36      	ldr	r2, [pc, #216]	@ (80043cc <HAL_ADC_ConfigChannel+0x7d8>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004306:	e002      	b.n	800430e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3b01      	subs	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f9      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004314:	e040      	b.n	8004398 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2d      	ldr	r2, [pc, #180]	@ (80043d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d118      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004324:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d112      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a23      	ldr	r2, [pc, #140]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x74c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a22      	ldr	r2, [pc, #136]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d12d      	bne.n	800439c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004348:	4619      	mov	r1, r3
 800434a:	481b      	ldr	r0, [pc, #108]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800434c:	f7fe ff6b 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004350:	e024      	b.n	800439c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1f      	ldr	r2, [pc, #124]	@ (80043d4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d120      	bne.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800435c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11a      	bne.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d115      	bne.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004376:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800437a:	4619      	mov	r1, r3
 800437c:	480e      	ldr	r0, [pc, #56]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800437e:	f7fe ff52 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
 8004382:	e00c      	b.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004396:	e002      	b.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800439c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	37d8      	adds	r7, #216	@ 0xd8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	80080000 	.word	0x80080000
 80043b8:	50040300 	.word	0x50040300
 80043bc:	c7520000 	.word	0xc7520000
 80043c0:	50040000 	.word	0x50040000
 80043c4:	50040200 	.word	0x50040200
 80043c8:	2000000c 	.word	0x2000000c
 80043cc:	053e2d63 	.word	0x053e2d63
 80043d0:	cb840000 	.word	0xcb840000
 80043d4:	80000001 	.word	0x80000001

080043d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f8b3 	bl	8003554 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d169      	bne.n	80044c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	4b36      	ldr	r3, [pc, #216]	@ (80044d4 <ADC_Enable+0xfc>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e055      	b.n	80044ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f86e 	bl	8003504 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004428:	482b      	ldr	r0, [pc, #172]	@ (80044d8 <ADC_Enable+0x100>)
 800442a:	f7fe ff0f 	bl	800324c <LL_ADC_GetCommonPathInternalCh>
 800442e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b28      	ldr	r3, [pc, #160]	@ (80044dc <ADC_Enable+0x104>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a28      	ldr	r2, [pc, #160]	@ (80044e0 <ADC_Enable+0x108>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004452:	e002      	b.n	800445a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004460:	f7fe fe9e 	bl	80031a0 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004466:	e028      	b.n	80044ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff f871 	bl	8003554 <LL_ADC_IsEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff f841 	bl	8003504 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004482:	f7fe fe8d 	bl	80031a0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d914      	bls.n	80044ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d00d      	beq.n	80044ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d1cf      	bne.n	8004468 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	8000003f 	.word	0x8000003f
 80044d8:	50040300 	.word	0x50040300
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	053e2d63 	.word	0x053e2d63

080044e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff f842 	bl	800357a <LL_ADC_IsDisableOngoing>
 80044f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff f829 	bl	8003554 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d047      	beq.n	8004598 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d144      	bne.n	8004598 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030d 	and.w	r3, r3, #13
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10c      	bne.n	8004536 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f803 	bl	800352c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2203      	movs	r2, #3
 800452c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800452e:	f7fe fe37 	bl	80031a0 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004534:	e029      	b.n	800458a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f043 0210 	orr.w	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e023      	b.n	800459a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004552:	f7fe fe25 	bl	80031a0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d914      	bls.n	800458a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	f043 0210 	orr.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e007      	b.n	800459a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1dc      	bne.n	8004552 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <LL_ADC_IsEnabled>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <LL_ADC_IsEnabled+0x18>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <LL_ADC_IsEnabled+0x1a>
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_ADC_StartCalibration>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80045da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	609a      	str	r2, [r3, #8]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_ADC_IsCalibrationOnGoing>:
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800460a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800460e:	d101      	bne.n	8004614 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_ADC_REG_IsConversionOngoing>:
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b04      	cmp	r3, #4
 8004634:	d101      	bne.n	800463a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_ADCEx_Calibration_Start+0x1c>
 8004660:	2302      	movs	r3, #2
 8004662:	e04d      	b.n	8004700 <HAL_ADCEx_Calibration_Start+0xb8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff39 	bl	80044e4 <ADC_Disable>
 8004672:	4603      	mov	r3, r0
 8004674:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d136      	bne.n	80046ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004680:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	f043 0202 	orr.w	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff96 	bl	80045c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800469c:	e014      	b.n	80046c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80046aa:	d30d      	bcc.n	80046c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b0:	f023 0312 	bic.w	r3, r3, #18
 80046b4:	f043 0210 	orr.w	r2, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e01b      	b.n	8004700 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff94 	bl	80045fa <LL_ADC_IsCalibrationOnGoing>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e2      	bne.n	800469e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f023 0303 	bic.w	r3, r3, #3
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046e8:	e005      	b.n	80046f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b09f      	sub	sp, #124	@ 0x7c
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004722:	2302      	movs	r3, #2
 8004724:	e093      	b.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800472e:	2300      	movs	r3, #0
 8004730:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004732:	2300      	movs	r3, #0
 8004734:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a47      	ldr	r2, [pc, #284]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d102      	bne.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004740:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	e001      	b.n	800474a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e072      	b.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ff59 	bl	8004622 <LL_ADC_REG_IsConversionOngoing>
 8004770:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff53 	bl	8004622 <LL_ADC_REG_IsConversionOngoing>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d154      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004782:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004784:	2b00      	cmp	r3, #0
 8004786:	d151      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800478a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02c      	beq.n	80047ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047a6:	035b      	lsls	r3, r3, #13
 80047a8:	430b      	orrs	r3, r1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b0:	4829      	ldr	r0, [pc, #164]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047b2:	f7ff fef6 	bl	80045a2 <LL_ADC_IsEnabled>
 80047b6:	4604      	mov	r4, r0
 80047b8:	4828      	ldr	r0, [pc, #160]	@ (800485c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047ba:	f7ff fef2 	bl	80045a2 <LL_ADC_IsEnabled>
 80047be:	4603      	mov	r3, r0
 80047c0:	431c      	orrs	r4, r3
 80047c2:	4828      	ldr	r0, [pc, #160]	@ (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047c4:	f7ff feed 	bl	80045a2 <LL_ADC_IsEnabled>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4323      	orrs	r3, r4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d137      	bne.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047d8:	f023 030f 	bic.w	r3, r3, #15
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	6811      	ldr	r1, [r2, #0]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	431a      	orrs	r2, r3
 80047e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047ec:	e028      	b.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047fa:	4817      	ldr	r0, [pc, #92]	@ (8004858 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047fc:	f7ff fed1 	bl	80045a2 <LL_ADC_IsEnabled>
 8004800:	4604      	mov	r4, r0
 8004802:	4816      	ldr	r0, [pc, #88]	@ (800485c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004804:	f7ff fecd 	bl	80045a2 <LL_ADC_IsEnabled>
 8004808:	4603      	mov	r3, r0
 800480a:	431c      	orrs	r4, r3
 800480c:	4815      	ldr	r0, [pc, #84]	@ (8004864 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800480e:	f7ff fec8 	bl	80045a2 <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	4323      	orrs	r3, r4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d112      	bne.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800481a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004822:	f023 030f 	bic.w	r3, r3, #15
 8004826:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004828:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800482a:	e009      	b.n	8004840 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800483e:	e000      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004840:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800484a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800484e:	4618      	mov	r0, r3
 8004850:	377c      	adds	r7, #124	@ 0x7c
 8004852:	46bd      	mov	sp, r7
 8004854:	bd90      	pop	{r4, r7, pc}
 8004856:	bf00      	nop
 8004858:	50040000 	.word	0x50040000
 800485c:	50040100 	.word	0x50040100
 8004860:	50040300 	.word	0x50040300
 8004864:	50040200 	.word	0x50040200

08004868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <__NVIC_SetPriorityGrouping+0x44>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004884:	4013      	ands	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800489a:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <__NVIC_SetPriorityGrouping+0x44>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	60d3      	str	r3, [r2, #12]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <__NVIC_GetPriorityGrouping+0x18>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	f003 0307 	and.w	r3, r3, #7
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	db0b      	blt.n	80048f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	f003 021f 	and.w	r2, r3, #31
 80048e4:	4907      	ldr	r1, [pc, #28]	@ (8004904 <__NVIC_EnableIRQ+0x38>)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2001      	movs	r0, #1
 80048ee:	fa00 f202 	lsl.w	r2, r0, r2
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	@ (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	@ (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf28      	it	cs
 800497a:	2304      	movcs	r3, #4
 800497c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
 8004982:	2b06      	cmp	r3, #6
 8004984:	d902      	bls.n	800498c <NVIC_EncodePriority+0x30>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3b03      	subs	r3, #3
 800498a:	e000      	b.n	800498e <NVIC_EncodePriority+0x32>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	401a      	ands	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43d9      	mvns	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	4313      	orrs	r3, r2
         );
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	@ 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049d4:	d301      	bcc.n	80049da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049da:	4a0a      	ldr	r2, [pc, #40]	@ (8004a04 <SysTick_Config+0x40>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e2:	210f      	movs	r1, #15
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f7ff ff8e 	bl	8004908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ec:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <SysTick_Config+0x40>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f2:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <SysTick_Config+0x40>)
 80049f4:	2207      	movs	r2, #7
 80049f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000e010 	.word	0xe000e010

08004a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff29 	bl	8004868 <__NVIC_SetPriorityGrouping>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	4603      	mov	r3, r0
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a30:	f7ff ff3e 	bl	80048b0 <__NVIC_GetPriorityGrouping>
 8004a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7ff ff8e 	bl	800495c <NVIC_EncodePriority>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff5d 	bl	8004908 <__NVIC_SetPriority>
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff31 	bl	80048cc <__NVIC_EnableIRQ>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ffa2 	bl	80049c4 <SysTick_Config>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a9a:	e17f      	b.n	8004d9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8171 	beq.w	8004d96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d005      	beq.n	8004acc <HAL_GPIO_Init+0x40>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d130      	bne.n	8004b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b02:	2201      	movs	r2, #1
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 0201 	and.w	r2, r3, #1
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d118      	bne.n	8004b6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004b40:	2201      	movs	r2, #1
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	f003 0201 	and.w	r2, r3, #1
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d017      	beq.n	8004ba8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	2203      	movs	r2, #3
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d123      	bne.n	8004bfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	08da      	lsrs	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3208      	adds	r2, #8
 8004bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	08da      	lsrs	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3208      	adds	r2, #8
 8004bf6:	6939      	ldr	r1, [r7, #16]
 8004bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	2203      	movs	r2, #3
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4013      	ands	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80ac 	beq.w	8004d96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dbc <HAL_GPIO_Init+0x330>)
 8004c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c42:	4a5e      	ldr	r2, [pc, #376]	@ (8004dbc <HAL_GPIO_Init+0x330>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c4a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dbc <HAL_GPIO_Init+0x330>)
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c56:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc0 <HAL_GPIO_Init+0x334>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	220f      	movs	r2, #15
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c80:	d025      	beq.n	8004cce <HAL_GPIO_Init+0x242>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc4 <HAL_GPIO_Init+0x338>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01f      	beq.n	8004cca <HAL_GPIO_Init+0x23e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc8 <HAL_GPIO_Init+0x33c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d019      	beq.n	8004cc6 <HAL_GPIO_Init+0x23a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4d      	ldr	r2, [pc, #308]	@ (8004dcc <HAL_GPIO_Init+0x340>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_GPIO_Init+0x236>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a4c      	ldr	r2, [pc, #304]	@ (8004dd0 <HAL_GPIO_Init+0x344>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00d      	beq.n	8004cbe <HAL_GPIO_Init+0x232>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8004dd4 <HAL_GPIO_Init+0x348>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <HAL_GPIO_Init+0x22e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd8 <HAL_GPIO_Init+0x34c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_GPIO_Init+0x22a>
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	e00c      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cb6:	2307      	movs	r3, #7
 8004cb8:	e00a      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cba:	2305      	movs	r3, #5
 8004cbc:	e008      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	e006      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e004      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e002      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_GPIO_Init+0x244>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	f002 0203 	and.w	r2, r2, #3
 8004cd6:	0092      	lsls	r2, r2, #2
 8004cd8:	4093      	lsls	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ce0:	4937      	ldr	r1, [pc, #220]	@ (8004dc0 <HAL_GPIO_Init+0x334>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cee:	4b3b      	ldr	r3, [pc, #236]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d12:	4a32      	ldr	r2, [pc, #200]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d18:	4b30      	ldr	r3, [pc, #192]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4013      	ands	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d3c:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d42:	4b26      	ldr	r3, [pc, #152]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d66:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d90:	4a12      	ldr	r2, [pc, #72]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f47f ae78 	bne.w	8004a9c <HAL_GPIO_Init+0x10>
  }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	48000400 	.word	0x48000400
 8004dc8:	48000800 	.word	0x48000800
 8004dcc:	48000c00 	.word	0x48000c00
 8004dd0:	48001000 	.word	0x48001000
 8004dd4:	48001400 	.word	0x48001400
 8004dd8:	48001800 	.word	0x48001800
 8004ddc:	40010400 	.word	0x40010400

08004de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e001      	b.n	8004e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e20:	787b      	ldrb	r3, [r7, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e2c:	e002      	b.n	8004e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e08d      	b.n	8004f6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fcd8 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	@ 0x24
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d107      	bne.n	8004eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	e006      	b.n	8004ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d108      	bne.n	8004ee2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e007      	b.n	8004ef2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ef0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	f040 80f9 	bne.w	8005192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_I2C_Mem_Write+0x34>
 8004fa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0ed      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Mem_Write+0x4e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0e6      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fce:	f7fe f8e7 	bl	80031a0 <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2319      	movs	r3, #25
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fac3 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0d1      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2221      	movs	r2, #33	@ 0x21
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2240      	movs	r2, #64	@ 0x40
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005018:	88f8      	ldrh	r0, [r7, #6]
 800501a:	893a      	ldrh	r2, [r7, #8]
 800501c:	8979      	ldrh	r1, [r7, #10]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4603      	mov	r3, r0
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f9d3 	bl	80053d4 <I2C_RequestMemoryWrite>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0a9      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2bff      	cmp	r3, #255	@ 0xff
 8005048:	d90e      	bls.n	8005068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	8979      	ldrh	r1, [r7, #10]
 8005058:	2300      	movs	r3, #0
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fc47 	bl	80058f4 <I2C_TransferConfig>
 8005066:	e00f      	b.n	8005088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005076:	b2da      	uxtb	r2, r3
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	2300      	movs	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fc36 	bl	80058f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fac6 	bl	800561e <I2C_WaitOnTXISFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e07b      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d034      	beq.n	8005140 <HAL_I2C_Mem_Write+0x1c8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d130      	bne.n	8005140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fa3f 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e04d      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2bff      	cmp	r3, #255	@ 0xff
 8005100:	d90e      	bls.n	8005120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22ff      	movs	r2, #255	@ 0xff
 8005106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	b2da      	uxtb	r2, r3
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fbeb 	bl	80058f4 <I2C_TransferConfig>
 800511e:	e00f      	b.n	8005140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512e:	b2da      	uxtb	r2, r3
 8005130:	8979      	ldrh	r1, [r7, #10]
 8005132:	2300      	movs	r3, #0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fbda 	bl	80058f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d19e      	bne.n	8005088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 faac 	bl	80056ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e01a      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2220      	movs	r2, #32
 8005164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <HAL_I2C_Mem_Write+0x224>)
 8005172:	400b      	ands	r3, r1
 8005174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	fe00e800 	.word	0xfe00e800

080051a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	460b      	mov	r3, r1
 80051b4:	813b      	strh	r3, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	f040 80fd 	bne.w	80053c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_I2C_Mem_Read+0x34>
 80051ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0f1      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_I2C_Mem_Read+0x4e>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e0ea      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051f6:	f7fd ffd3 	bl	80031a0 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2319      	movs	r3, #25
 8005202:	2201      	movs	r2, #1
 8005204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f9af 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0d5      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2222      	movs	r2, #34	@ 0x22
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2240      	movs	r2, #64	@ 0x40
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005240:	88f8      	ldrh	r0, [r7, #6]
 8005242:	893a      	ldrh	r2, [r7, #8]
 8005244:	8979      	ldrh	r1, [r7, #10]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	4603      	mov	r3, r0
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f913 	bl	800547c <I2C_RequestMemoryRead>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0ad      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2bff      	cmp	r3, #255	@ 0xff
 8005270:	d90e      	bls.n	8005290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	b2da      	uxtb	r2, r3
 800527e:	8979      	ldrh	r1, [r7, #10]
 8005280:	4b52      	ldr	r3, [pc, #328]	@ (80053cc <HAL_I2C_Mem_Read+0x22c>)
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fb33 	bl	80058f4 <I2C_TransferConfig>
 800528e:	e00f      	b.n	80052b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	8979      	ldrh	r1, [r7, #10]
 80052a2:	4b4a      	ldr	r3, [pc, #296]	@ (80053cc <HAL_I2C_Mem_Read+0x22c>)
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb22 	bl	80058f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	2200      	movs	r2, #0
 80052b8:	2104      	movs	r1, #4
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f956 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e07c      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d034      	beq.n	8005370 <HAL_I2C_Mem_Read+0x1d0>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d130      	bne.n	8005370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	2200      	movs	r2, #0
 8005316:	2180      	movs	r1, #128	@ 0x80
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f927 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e04d      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2bff      	cmp	r3, #255	@ 0xff
 8005330:	d90e      	bls.n	8005350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533c:	b2da      	uxtb	r2, r3
 800533e:	8979      	ldrh	r1, [r7, #10]
 8005340:	2300      	movs	r3, #0
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fad3 	bl	80058f4 <I2C_TransferConfig>
 800534e:	e00f      	b.n	8005370 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535e:	b2da      	uxtb	r2, r3
 8005360:	8979      	ldrh	r1, [r7, #10]
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fac2 	bl	80058f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d19a      	bne.n	80052b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f994 	bl	80056ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e01a      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2220      	movs	r2, #32
 8005394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <HAL_I2C_Mem_Read+0x230>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	80002400 	.word	0x80002400
 80053d0:	fe00e800 	.word	0xfe00e800

080053d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	4608      	mov	r0, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	817b      	strh	r3, [r7, #10]
 80053e6:	460b      	mov	r3, r1
 80053e8:	813b      	strh	r3, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	8979      	ldrh	r1, [r7, #10]
 80053f4:	4b20      	ldr	r3, [pc, #128]	@ (8005478 <I2C_RequestMemoryWrite+0xa4>)
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fa79 	bl	80058f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f909 	bl	800561e <I2C_WaitOnTXISFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e02c      	b.n	8005470 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800541c:	893b      	ldrh	r3, [r7, #8]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	629a      	str	r2, [r3, #40]	@ 0x28
 8005426:	e015      	b.n	8005454 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b29b      	uxth	r3, r3
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f8ef 	bl	800561e <I2C_WaitOnTXISFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e012      	b.n	8005470 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800544a:	893b      	ldrh	r3, [r7, #8]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2200      	movs	r2, #0
 800545c:	2180      	movs	r1, #128	@ 0x80
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f884 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	80002000 	.word	0x80002000

0800547c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	4603      	mov	r3, r0
 800548c:	817b      	strh	r3, [r7, #10]
 800548e:	460b      	mov	r3, r1
 8005490:	813b      	strh	r3, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	8979      	ldrh	r1, [r7, #10]
 800549c:	4b20      	ldr	r3, [pc, #128]	@ (8005520 <I2C_RequestMemoryRead+0xa4>)
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fa26 	bl	80058f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	69b9      	ldr	r1, [r7, #24]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f8b6 	bl	800561e <I2C_WaitOnTXISFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e02c      	b.n	8005516 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054c2:	893b      	ldrh	r3, [r7, #8]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80054cc:	e015      	b.n	80054fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054ce:	893b      	ldrh	r3, [r7, #8]
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f89c 	bl	800561e <I2C_WaitOnTXISFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e012      	b.n	8005516 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2200      	movs	r2, #0
 8005502:	2140      	movs	r1, #64	@ 0x40
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f831 	bl	800556c <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	80002000 	.word	0x80002000

08005524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d103      	bne.n	8005542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d007      	beq.n	8005560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	619a      	str	r2, [r3, #24]
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800557c:	e03b      	b.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8d6 	bl	8005734 <I2C_IsErrorOccurred>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e041      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d02d      	beq.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fd fe01 	bl	80031a0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d122      	bne.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d113      	bne.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e00f      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d0b4      	beq.n	800557e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800562a:	e033      	b.n	8005694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f87f 	bl	8005734 <I2C_IsErrorOccurred>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e031      	b.n	80056a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d025      	beq.n	8005694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7fd fdaa 	bl	80031a0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11a      	bne.n	8005694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d013      	beq.n	8005694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d1c4      	bne.n	800562c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b8:	e02f      	b.n	800571a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f838 	bl	8005734 <I2C_IsErrorOccurred>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e02d      	b.n	800572a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ce:	f7fd fd67 	bl	80031a0 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11a      	bne.n	800571a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d013      	beq.n	800571a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d1c8      	bne.n	80056ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	d068      	beq.n	8005832 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2210      	movs	r2, #16
 8005766:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005768:	e049      	b.n	80057fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d045      	beq.n	80057fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fd fd15 	bl	80031a0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_IsErrorOccurred+0x54>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d13a      	bne.n	80057fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005792:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057aa:	d121      	bne.n	80057f0 <I2C_IsErrorOccurred+0xbc>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b2:	d01d      	beq.n	80057f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d01a      	beq.n	80057f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057ca:	f7fd fce9 	bl	80031a0 <HAL_GetTick>
 80057ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057d0:	e00e      	b.n	80057f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057d2:	f7fd fce5 	bl	80031a0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b19      	cmp	r3, #25
 80057de:	d907      	bls.n	80057f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f043 0320 	orr.w	r3, r3, #32
 80057e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80057ee:	e006      	b.n	80057fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d1e9      	bne.n	80057d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b20      	cmp	r3, #32
 800580a:	d003      	beq.n	8005814 <I2C_IsErrorOccurred+0xe0>
 800580c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0aa      	beq.n	800576a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2220      	movs	r2, #32
 8005822:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f043 0308 	orr.w	r3, r3, #8
 800586c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80058a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01c      	beq.n	80058e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fe3b 	bl	8005524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <I2C_IsErrorOccurred+0x1bc>)
 80058ba:	400b      	ands	r3, r1
 80058bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80058e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3728      	adds	r7, #40	@ 0x28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	fe00e800 	.word	0xfe00e800

080058f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607b      	str	r3, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	4613      	mov	r3, r2
 8005904:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800590c:	7a7b      	ldrb	r3, [r7, #9]
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005914:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4313      	orrs	r3, r2
 800591e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005922:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	0d5b      	lsrs	r3, r3, #21
 800592e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005932:	4b08      	ldr	r3, [pc, #32]	@ (8005954 <I2C_TransferConfig+0x60>)
 8005934:	430b      	orrs	r3, r1
 8005936:	43db      	mvns	r3, r3
 8005938:	ea02 0103 	and.w	r1, r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	03ff63ff 	.word	0x03ff63ff

08005958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b20      	cmp	r3, #32
 800596c:	d138      	bne.n	80059e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005978:	2302      	movs	r3, #2
 800597a:	e032      	b.n	80059e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	@ 0x24
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6819      	ldr	r1, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d139      	bne.n	8005a78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e033      	b.n	8005a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2224      	movs	r2, #36	@ 0x24
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40007000 	.word	0x40007000

08005aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab2:	d130      	bne.n	8005b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac0:	d038      	beq.n	8005b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ac2:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005aca:	4a1e      	ldr	r2, [pc, #120]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2232      	movs	r2, #50	@ 0x32
 8005ad8:	fb02 f303 	mul.w	r3, r2, r3
 8005adc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0c9b      	lsrs	r3, r3, #18
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ae8:	e002      	b.n	8005af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af0:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afc:	d102      	bne.n	8005b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f2      	bne.n	8005aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b04:	4b0f      	ldr	r3, [pc, #60]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b10:	d110      	bne.n	8005b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e00f      	b.n	8005b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b22:	d007      	beq.n	8005b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b24:	4b07      	ldr	r3, [pc, #28]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b2c:	4a05      	ldr	r2, [pc, #20]	@ (8005b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40007000 	.word	0x40007000
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	431bde83 	.word	0x431bde83

08005b50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e3ca      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b62:	4b97      	ldr	r3, [pc, #604]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b6c:	4b94      	ldr	r3, [pc, #592]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80e4 	beq.w	8005d4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_RCC_OscConfig+0x4a>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	f040 808b 	bne.w	8005ca8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	f040 8087 	bne.w	8005ca8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b9a:	4b89      	ldr	r3, [pc, #548]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e3a2      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	4b82      	ldr	r3, [pc, #520]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <HAL_RCC_OscConfig+0x7c>
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bca:	e005      	b.n	8005bd8 <HAL_RCC_OscConfig+0x88>
 8005bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d223      	bcs.n	8005c24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fd55 	bl	8006690 <RCC_SetFlashLatencyFromMSIRange>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e383      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bf0:	4b73      	ldr	r3, [pc, #460]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a72      	ldr	r2, [pc, #456]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bf6:	f043 0308 	orr.w	r3, r3, #8
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4b70      	ldr	r3, [pc, #448]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	496d      	ldr	r1, [pc, #436]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	4968      	ldr	r1, [pc, #416]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
 8005c22:	e025      	b.n	8005c70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c24:	4b66      	ldr	r3, [pc, #408]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a65      	ldr	r2, [pc, #404]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c2a:	f043 0308 	orr.w	r3, r3, #8
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b63      	ldr	r3, [pc, #396]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	4960      	ldr	r1, [pc, #384]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c42:	4b5f      	ldr	r3, [pc, #380]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	495b      	ldr	r1, [pc, #364]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fd15 	bl	8006690 <RCC_SetFlashLatencyFromMSIRange>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e343      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c70:	f000 fc4a 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b52      	ldr	r3, [pc, #328]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	4950      	ldr	r1, [pc, #320]	@ (8005dc4 <HAL_RCC_OscConfig+0x274>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8005dc8 <HAL_RCC_OscConfig+0x278>)
 8005c8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c90:	4b4e      	ldr	r3, [pc, #312]	@ (8005dcc <HAL_RCC_OscConfig+0x27c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fd fa33 	bl	8003100 <HAL_InitTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d052      	beq.n	8005d4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	e327      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d032      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cb0:	4b43      	ldr	r3, [pc, #268]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a42      	ldr	r2, [pc, #264]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cbc:	f7fd fa70 	bl	80031a0 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cc4:	f7fd fa6c 	bl	80031a0 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e310      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ce2:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a36      	ldr	r2, [pc, #216]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	f043 0308 	orr.w	r3, r3, #8
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	4931      	ldr	r1, [pc, #196]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d00:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	492c      	ldr	r1, [pc, #176]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]
 8005d14:	e01a      	b.n	8005d4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d16:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a29      	ldr	r2, [pc, #164]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d22:	f7fd fa3d 	bl	80031a0 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d2a:	f7fd fa39 	bl	80031a0 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e2dd      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d3c:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <HAL_RCC_OscConfig+0x1da>
 8005d48:	e000      	b.n	8005d4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d074      	beq.n	8005e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d005      	beq.n	8005d6a <HAL_RCC_OscConfig+0x21a>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	d10e      	bne.n	8005d82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d064      	beq.n	8005e40 <HAL_RCC_OscConfig+0x2f0>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d160      	bne.n	8005e40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e2ba      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8a:	d106      	bne.n	8005d9a <HAL_RCC_OscConfig+0x24a>
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e026      	b.n	8005de8 <HAL_RCC_OscConfig+0x298>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da2:	d115      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x280>
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a05      	ldr	r2, [pc, #20]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005daa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a02      	ldr	r2, [pc, #8]	@ (8005dc0 <HAL_RCC_OscConfig+0x270>)
 8005db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e014      	b.n	8005de8 <HAL_RCC_OscConfig+0x298>
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	080110e8 	.word	0x080110e8
 8005dc8:	2000000c 	.word	0x2000000c
 8005dcc:	20000010 	.word	0x20000010
 8005dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a9f      	ldr	r2, [pc, #636]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b9d      	ldr	r3, [pc, #628]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a9c      	ldr	r2, [pc, #624]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fd f9d6 	bl	80031a0 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fd f9d2 	bl	80031a0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	@ 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e276      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e0a:	4b92      	ldr	r3, [pc, #584]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x2a8>
 8005e16:	e014      	b.n	8005e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fd f9c2 	bl	80031a0 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fd f9be 	bl	80031a0 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	@ 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e262      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e32:	4b88      	ldr	r3, [pc, #544]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x2d0>
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d060      	beq.n	8005f10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_OscConfig+0x310>
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b0c      	cmp	r3, #12
 8005e58:	d119      	bne.n	8005e8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d116      	bne.n	8005e8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e60:	4b7c      	ldr	r3, [pc, #496]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_OscConfig+0x328>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e23f      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e78:	4b76      	ldr	r3, [pc, #472]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	4973      	ldr	r1, [pc, #460]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e8c:	e040      	b.n	8005f10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d023      	beq.n	8005ede <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e96:	4b6f      	ldr	r3, [pc, #444]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea2:	f7fd f97d 	bl	80031a0 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eaa:	f7fd f979 	bl	80031a0 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e21d      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ebc:	4b65      	ldr	r3, [pc, #404]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec8:	4b62      	ldr	r3, [pc, #392]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	495f      	ldr	r1, [pc, #380]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	604b      	str	r3, [r1, #4]
 8005edc:	e018      	b.n	8005f10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ede:	4b5d      	ldr	r3, [pc, #372]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a5c      	ldr	r2, [pc, #368]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fd f959 	bl	80031a0 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef2:	f7fd f955 	bl	80031a0 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1f9      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f04:	4b53      	ldr	r3, [pc, #332]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d03c      	beq.n	8005f96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f24:	4b4b      	ldr	r3, [pc, #300]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fd f934 	bl	80031a0 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fd f930 	bl	80031a0 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e1d4      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f4e:	4b41      	ldr	r3, [pc, #260]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0ef      	beq.n	8005f3c <HAL_RCC_OscConfig+0x3ec>
 8005f5c:	e01b      	b.n	8005f96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f64:	4a3b      	ldr	r2, [pc, #236]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6e:	f7fd f917 	bl	80031a0 <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f76:	f7fd f913 	bl	80031a0 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e1b7      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f88:	4b32      	ldr	r3, [pc, #200]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1ef      	bne.n	8005f76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80a6 	beq.w	80060f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10d      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb4:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb8:	4a26      	ldr	r2, [pc, #152]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fc0:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd0:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <HAL_RCC_OscConfig+0x508>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d118      	bne.n	800600e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8006058 <HAL_RCC_OscConfig+0x508>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8006058 <HAL_RCC_OscConfig+0x508>)
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe8:	f7fd f8da 	bl	80031a0 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff0:	f7fd f8d6 	bl	80031a0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e17a      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006002:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <HAL_RCC_OscConfig+0x508>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d108      	bne.n	8006028 <HAL_RCC_OscConfig+0x4d8>
 8006016:	4b0f      	ldr	r3, [pc, #60]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601c:	4a0d      	ldr	r2, [pc, #52]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006026:	e029      	b.n	800607c <HAL_RCC_OscConfig+0x52c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b05      	cmp	r3, #5
 800602e:	d115      	bne.n	800605c <HAL_RCC_OscConfig+0x50c>
 8006030:	4b08      	ldr	r3, [pc, #32]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006036:	4a07      	ldr	r2, [pc, #28]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8006038:	f043 0304 	orr.w	r3, r3, #4
 800603c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006040:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	4a03      	ldr	r2, [pc, #12]	@ (8006054 <HAL_RCC_OscConfig+0x504>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006050:	e014      	b.n	800607c <HAL_RCC_OscConfig+0x52c>
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	40007000 	.word	0x40007000
 800605c:	4b9c      	ldr	r3, [pc, #624]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	4a9b      	ldr	r2, [pc, #620]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800606c:	4b98      	ldr	r3, [pc, #608]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006072:	4a97      	ldr	r2, [pc, #604]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d016      	beq.n	80060b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7fd f88c 	bl	80031a0 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608c:	f7fd f888 	bl	80031a0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e12a      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a2:	4b8b      	ldr	r3, [pc, #556]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ed      	beq.n	800608c <HAL_RCC_OscConfig+0x53c>
 80060b0:	e015      	b.n	80060de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b2:	f7fd f875 	bl	80031a0 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060b8:	e00a      	b.n	80060d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ba:	f7fd f871 	bl	80031a0 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e113      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d0:	4b7f      	ldr	r3, [pc, #508]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1ed      	bne.n	80060ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060de:	7ffb      	ldrb	r3, [r7, #31]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e4:	4b7a      	ldr	r3, [pc, #488]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80060e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e8:	4a79      	ldr	r2, [pc, #484]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80060ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80fe 	beq.w	80062f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f040 80d0 	bne.w	80062a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006104:	4b72      	ldr	r3, [pc, #456]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f003 0203 	and.w	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	429a      	cmp	r2, r3
 8006116:	d130      	bne.n	800617a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	3b01      	subs	r3, #1
 8006124:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d127      	bne.n	800617a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006134:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d11f      	bne.n	800617a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006144:	2a07      	cmp	r2, #7
 8006146:	bf14      	ite	ne
 8006148:	2201      	movne	r2, #1
 800614a:	2200      	moveq	r2, #0
 800614c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800614e:	4293      	cmp	r3, r2
 8006150:	d113      	bne.n	800617a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	3b01      	subs	r3, #1
 8006160:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d109      	bne.n	800617a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	3b01      	subs	r3, #1
 8006174:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d06e      	beq.n	8006258 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d069      	beq.n	8006254 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006180:	4b53      	ldr	r3, [pc, #332]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d105      	bne.n	8006198 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800618c:	4b50      	ldr	r3, [pc, #320]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0ad      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800619c:	4b4c      	ldr	r3, [pc, #304]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a4b      	ldr	r2, [pc, #300]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80061a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061a8:	f7fc fffa 	bl	80031a0 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b0:	f7fc fff6 	bl	80031a0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e09a      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c2:	4b43      	ldr	r3, [pc, #268]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061ce:	4b40      	ldr	r3, [pc, #256]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	4b40      	ldr	r3, [pc, #256]	@ (80062d4 <HAL_RCC_OscConfig+0x784>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061de:	3a01      	subs	r2, #1
 80061e0:	0112      	lsls	r2, r2, #4
 80061e2:	4311      	orrs	r1, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061e8:	0212      	lsls	r2, r2, #8
 80061ea:	4311      	orrs	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061f0:	0852      	lsrs	r2, r2, #1
 80061f2:	3a01      	subs	r2, #1
 80061f4:	0552      	lsls	r2, r2, #21
 80061f6:	4311      	orrs	r1, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061fc:	0852      	lsrs	r2, r2, #1
 80061fe:	3a01      	subs	r2, #1
 8006200:	0652      	lsls	r2, r2, #25
 8006202:	4311      	orrs	r1, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006208:	0912      	lsrs	r2, r2, #4
 800620a:	0452      	lsls	r2, r2, #17
 800620c:	430a      	orrs	r2, r1
 800620e:	4930      	ldr	r1, [pc, #192]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006210:	4313      	orrs	r3, r2
 8006212:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006214:	4b2e      	ldr	r3, [pc, #184]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2d      	ldr	r2, [pc, #180]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800621a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800621e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006220:	4b2b      	ldr	r3, [pc, #172]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800622a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800622c:	f7fc ffb8 	bl	80031a0 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fc ffb4 	bl	80031a0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e058      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006246:	4b22      	ldr	r3, [pc, #136]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006252:	e050      	b.n	80062f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e04f      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006258:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d148      	bne.n	80062f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006264:	4b1a      	ldr	r3, [pc, #104]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a19      	ldr	r2, [pc, #100]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 800626a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800626e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006270:	4b17      	ldr	r3, [pc, #92]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800627a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800627c:	f7fc ff90 	bl	80031a0 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006284:	f7fc ff8c 	bl	80031a0 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e030      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006296:	4b0e      	ldr	r3, [pc, #56]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x734>
 80062a2:	e028      	b.n	80062f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b0c      	cmp	r3, #12
 80062a8:	d023      	beq.n	80062f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a08      	ldr	r2, [pc, #32]	@ (80062d0 <HAL_RCC_OscConfig+0x780>)
 80062b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b6:	f7fc ff73 	bl	80031a0 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062bc:	e00c      	b.n	80062d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062be:	f7fc ff6f 	bl	80031a0 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d905      	bls.n	80062d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e013      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
 80062d0:	40021000 	.word	0x40021000
 80062d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d8:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_RCC_OscConfig+0x7b0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ec      	bne.n	80062be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RCC_OscConfig+0x7b0>)
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	4905      	ldr	r1, [pc, #20]	@ (8006300 <HAL_RCC_OscConfig+0x7b0>)
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCC_OscConfig+0x7b4>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	60cb      	str	r3, [r1, #12]
 80062f0:	e001      	b.n	80062f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	feeefffc 	.word	0xfeeefffc

08006308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0e7      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800631c:	4b75      	ldr	r3, [pc, #468]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d910      	bls.n	800634c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b72      	ldr	r3, [pc, #456]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 0207 	bic.w	r2, r3, #7
 8006332:	4970      	ldr	r1, [pc, #448]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	4313      	orrs	r3, r2
 8006338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800633a:	4b6e      	ldr	r3, [pc, #440]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d001      	beq.n	800634c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0cf      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	4b66      	ldr	r3, [pc, #408]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006364:	429a      	cmp	r2, r3
 8006366:	d908      	bls.n	800637a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006368:	4b63      	ldr	r3, [pc, #396]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4960      	ldr	r1, [pc, #384]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d04c      	beq.n	8006420 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638e:	4b5a      	ldr	r3, [pc, #360]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d121      	bne.n	80063de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e0a6      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d107      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063a6:	4b54      	ldr	r3, [pc, #336]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d115      	bne.n	80063de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e09a      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063be:	4b4e      	ldr	r3, [pc, #312]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e08e      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ce:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e086      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063de:	4b46      	ldr	r3, [pc, #280]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 0203 	bic.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4943      	ldr	r1, [pc, #268]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f0:	f7fc fed6 	bl	80031a0 <HAL_GetTick>
 80063f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f6:	e00a      	b.n	800640e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f8:	f7fc fed2 	bl	80031a0 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e06e      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 020c 	and.w	r2, r3, #12
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	429a      	cmp	r2, r3
 800641e:	d1eb      	bne.n	80063f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006438:	429a      	cmp	r2, r3
 800643a:	d208      	bcs.n	800644e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800643c:	4b2e      	ldr	r3, [pc, #184]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	492b      	ldr	r1, [pc, #172]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800644e:	4b29      	ldr	r3, [pc, #164]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d210      	bcs.n	800647e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645c:	4b25      	ldr	r3, [pc, #148]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f023 0207 	bic.w	r2, r3, #7
 8006464:	4923      	ldr	r1, [pc, #140]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646c:	4b21      	ldr	r3, [pc, #132]	@ (80064f4 <HAL_RCC_ClockConfig+0x1ec>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d001      	beq.n	800647e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e036      	b.n	80064ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	4918      	ldr	r1, [pc, #96]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006498:	4313      	orrs	r3, r2
 800649a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a8:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	4910      	ldr	r1, [pc, #64]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064bc:	f000 f824 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <HAL_RCC_ClockConfig+0x1f0>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	490b      	ldr	r1, [pc, #44]	@ (80064fc <HAL_RCC_ClockConfig+0x1f4>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <HAL_RCC_ClockConfig+0x1f8>)
 80064da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <HAL_RCC_ClockConfig+0x1fc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fc fe0d 	bl	8003100 <HAL_InitTick>
 80064e6:	4603      	mov	r3, r0
 80064e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80064ea:	7afb      	ldrb	r3, [r7, #11]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40022000 	.word	0x40022000
 80064f8:	40021000 	.word	0x40021000
 80064fc:	080110e8 	.word	0x080110e8
 8006500:	2000000c 	.word	0x2000000c
 8006504:	20000010 	.word	0x20000010

08006508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	@ 0x24
 800650c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006516:	4b3e      	ldr	r3, [pc, #248]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006520:	4b3b      	ldr	r3, [pc, #236]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x34>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0c      	cmp	r3, #12
 8006534:	d121      	bne.n	800657a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d11e      	bne.n	800657a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800653c:	4b34      	ldr	r3, [pc, #208]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006548:	4b31      	ldr	r3, [pc, #196]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 800654a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e005      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006558:	4b2d      	ldr	r3, [pc, #180]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006564:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10d      	bne.n	8006590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d102      	bne.n	8006586 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006580:	4b25      	ldr	r3, [pc, #148]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x110>)
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e004      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d101      	bne.n	8006590 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800658c:	4b23      	ldr	r3, [pc, #140]	@ (800661c <HAL_RCC_GetSysClockFreq+0x114>)
 800658e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b0c      	cmp	r3, #12
 8006594:	d134      	bne.n	8006600 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006596:	4b1e      	ldr	r3, [pc, #120]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d003      	beq.n	80065ae <HAL_RCC_GetSysClockFreq+0xa6>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d003      	beq.n	80065b4 <HAL_RCC_GetSysClockFreq+0xac>
 80065ac:	e005      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x110>)
 80065b0:	617b      	str	r3, [r7, #20]
      break;
 80065b2:	e005      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065b4:	4b19      	ldr	r3, [pc, #100]	@ (800661c <HAL_RCC_GetSysClockFreq+0x114>)
 80065b6:	617b      	str	r3, [r7, #20]
      break;
 80065b8:	e002      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	617b      	str	r3, [r7, #20]
      break;
 80065be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065c0:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	3301      	adds	r3, #1
 80065cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065ce:	4b10      	ldr	r3, [pc, #64]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	fb03 f202 	mul.w	r2, r3, r2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x108>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	0e5b      	lsrs	r3, r3, #25
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	3301      	adds	r3, #1
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006600:	69bb      	ldr	r3, [r7, #24]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3724      	adds	r7, #36	@ 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
 8006614:	08011100 	.word	0x08011100
 8006618:	00f42400 	.word	0x00f42400
 800661c:	007a1200 	.word	0x007a1200

08006620 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006624:	4b03      	ldr	r3, [pc, #12]	@ (8006634 <HAL_RCC_GetHCLKFreq+0x14>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c

08006638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800663c:	f7ff fff0 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b06      	ldr	r3, [pc, #24]	@ (800665c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4904      	ldr	r1, [pc, #16]	@ (8006660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40021000 	.word	0x40021000
 8006660:	080110f8 	.word	0x080110f8

08006664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006668:	f7ff ffda 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 800666c:	4602      	mov	r2, r0
 800666e:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	0adb      	lsrs	r3, r3, #11
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	4904      	ldr	r1, [pc, #16]	@ (800668c <HAL_RCC_GetPCLK2Freq+0x28>)
 800667a:	5ccb      	ldrb	r3, [r1, r3]
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40021000 	.word	0x40021000
 800668c:	080110f8 	.word	0x080110f8

08006690 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800669c:	4b2a      	ldr	r3, [pc, #168]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066a8:	f7ff f9ee 	bl	8005a88 <HAL_PWREx_GetVoltageRange>
 80066ac:	6178      	str	r0, [r7, #20]
 80066ae:	e014      	b.n	80066da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066b0:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b4:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80066bc:	4b22      	ldr	r3, [pc, #136]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066c8:	f7ff f9de 	bl	8005a88 <HAL_PWREx_GetVoltageRange>
 80066cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80066ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e0:	d10b      	bne.n	80066fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b80      	cmp	r3, #128	@ 0x80
 80066e6:	d919      	bls.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80066ec:	d902      	bls.n	80066f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066ee:	2302      	movs	r3, #2
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	e013      	b.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066f4:	2301      	movs	r3, #1
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e010      	b.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b80      	cmp	r3, #128	@ 0x80
 80066fe:	d902      	bls.n	8006706 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006700:	2303      	movs	r3, #3
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	e00a      	b.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b80      	cmp	r3, #128	@ 0x80
 800670a:	d102      	bne.n	8006712 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800670c:	2302      	movs	r3, #2
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e004      	b.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b70      	cmp	r3, #112	@ 0x70
 8006716:	d101      	bne.n	800671c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006718:	2301      	movs	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800671c:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f023 0207 	bic.w	r2, r3, #7
 8006724:	4909      	ldr	r1, [pc, #36]	@ (800674c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800672c:	4b07      	ldr	r3, [pc, #28]	@ (800674c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d001      	beq.n	800673e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40021000 	.word	0x40021000
 800674c:	40022000 	.word	0x40022000

08006750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006758:	2300      	movs	r3, #0
 800675a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800675c:	2300      	movs	r3, #0
 800675e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006768:	2b00      	cmp	r3, #0
 800676a:	d041      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006770:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006774:	d02a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006776:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800677a:	d824      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800677c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006780:	d008      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006782:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006786:	d81e      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800678c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006790:	d010      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006792:	e018      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006794:	4b86      	ldr	r3, [pc, #536]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a85      	ldr	r2, [pc, #532]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067a0:	e015      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fabb 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067b2:	e00c      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3320      	adds	r3, #32
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fba6 	bl	8006f0c <RCCEx_PLLSAI2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	74fb      	strb	r3, [r7, #19]
      break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80067cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ce:	7cfb      	ldrb	r3, [r7, #19]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067d4:	4b76      	ldr	r3, [pc, #472]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e2:	4973      	ldr	r1, [pc, #460]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80067ea:	e001      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d041      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006800:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006804:	d02a      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006806:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800680a:	d824      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800680c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006810:	d008      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006816:	d81e      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800681c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006820:	d010      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006822:	e018      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006824:	4b62      	ldr	r3, [pc, #392]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a61      	ldr	r2, [pc, #388]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800682a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800682e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006830:	e015      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3304      	adds	r3, #4
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fa73 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006842:	e00c      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3320      	adds	r3, #32
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fb5e 	bl	8006f0c <RCCEx_PLLSAI2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	74fb      	strb	r3, [r7, #19]
      break;
 800685a:	e000      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800685c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685e:	7cfb      	ldrb	r3, [r7, #19]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006864:	4b52      	ldr	r3, [pc, #328]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006872:	494f      	ldr	r1, [pc, #316]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800687a:	e001      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	7cfb      	ldrb	r3, [r7, #19]
 800687e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80a0 	beq.w	80069ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006892:	4b47      	ldr	r3, [pc, #284]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00d      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a8:	4b41      	ldr	r3, [pc, #260]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ac:	4a40      	ldr	r2, [pc, #256]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b4:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068c0:	2301      	movs	r3, #1
 80068c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c4:	4b3b      	ldr	r3, [pc, #236]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3a      	ldr	r2, [pc, #232]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d0:	f7fc fc66 	bl	80031a0 <HAL_GetTick>
 80068d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068d6:	e009      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d8:	f7fc fc62 	bl	80031a0 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d902      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	74fb      	strb	r3, [r7, #19]
        break;
 80068ea:	e005      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068ec:	4b31      	ldr	r3, [pc, #196]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ef      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d15c      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068fe:	4b2c      	ldr	r3, [pc, #176]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006904:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006908:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	429a      	cmp	r2, r3
 800691a:	d019      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800691c:	4b24      	ldr	r3, [pc, #144]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006928:	4b21      	ldr	r3, [pc, #132]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	4a20      	ldr	r2, [pc, #128]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006938:	4b1d      	ldr	r3, [pc, #116]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	4a1c      	ldr	r2, [pc, #112]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006948:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d016      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fc fc21 	bl	80031a0 <HAL_GetTick>
 800695e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006960:	e00b      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006962:	f7fc fc1d 	bl	80031a0 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d902      	bls.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	74fb      	strb	r3, [r7, #19]
            break;
 8006978:	e006      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ec      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006988:	7cfb      	ldrb	r3, [r7, #19]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10c      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800698e:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699e:	4904      	ldr	r1, [pc, #16]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069a6:	e009      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069a8:	7cfb      	ldrb	r3, [r7, #19]
 80069aa:	74bb      	strb	r3, [r7, #18]
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069bc:	7c7b      	ldrb	r3, [r7, #17]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c2:	4b9e      	ldr	r3, [pc, #632]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	4a9d      	ldr	r2, [pc, #628]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069da:	4b98      	ldr	r3, [pc, #608]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e0:	f023 0203 	bic.w	r2, r3, #3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	4994      	ldr	r1, [pc, #592]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069fc:	4b8f      	ldr	r3, [pc, #572]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	f023 020c 	bic.w	r2, r3, #12
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0a:	498c      	ldr	r1, [pc, #560]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a1e:	4b87      	ldr	r3, [pc, #540]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2c:	4983      	ldr	r1, [pc, #524]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a40:	4b7e      	ldr	r3, [pc, #504]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	497b      	ldr	r1, [pc, #492]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a62:	4b76      	ldr	r3, [pc, #472]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a70:	4972      	ldr	r1, [pc, #456]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a84:	4b6d      	ldr	r3, [pc, #436]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a92:	496a      	ldr	r1, [pc, #424]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aa6:	4b65      	ldr	r3, [pc, #404]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab4:	4961      	ldr	r1, [pc, #388]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad6:	4959      	ldr	r1, [pc, #356]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aea:	4b54      	ldr	r3, [pc, #336]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af8:	4950      	ldr	r1, [pc, #320]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1a:	4948      	ldr	r1, [pc, #288]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2e:	4b43      	ldr	r3, [pc, #268]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	493f      	ldr	r1, [pc, #252]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d028      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b50:	4b3a      	ldr	r3, [pc, #232]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b5e:	4937      	ldr	r1, [pc, #220]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b70:	4b32      	ldr	r3, [pc, #200]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4a31      	ldr	r2, [pc, #196]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b7a:	60d3      	str	r3, [r2, #12]
 8006b7c:	e011      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f8c8 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b98:	7cfb      	ldrb	r3, [r7, #19]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d028      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bae:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bbc:	491f      	ldr	r1, [pc, #124]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bcc:	d106      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bce:	4b1b      	ldr	r3, [pc, #108]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd8:	60d3      	str	r3, [r2, #12]
 8006bda:	e011      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f899 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bf6:	7cfb      	ldrb	r3, [r7, #19]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d02b      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1a:	4908      	ldr	r1, [pc, #32]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2a:	d109      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4a02      	ldr	r2, [pc, #8]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c36:	60d3      	str	r3, [r2, #12]
 8006c38:	e014      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 f867 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c5a:	7cfb      	ldrb	r3, [r7, #19]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02f      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c70:	4b2b      	ldr	r3, [pc, #172]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c7e:	4928      	ldr	r1, [pc, #160]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c8e:	d10d      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f844 	bl	8006d24 <RCCEx_PLLSAI1_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ca0:	7cfb      	ldrb	r3, [r7, #19]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d014      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ca6:	7cfb      	ldrb	r3, [r7, #19]
 8006ca8:	74bb      	strb	r3, [r7, #18]
 8006caa:	e011      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3320      	adds	r3, #32
 8006cba:	2102      	movs	r1, #2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f925 	bl	8006f0c <RCCEx_PLLSAI2_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ccc:	7cfb      	ldrb	r3, [r7, #19]
 8006cce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cdc:	4b10      	ldr	r3, [pc, #64]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cea:	490d      	ldr	r1, [pc, #52]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cfe:	4b08      	ldr	r3, [pc, #32]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0e:	4904      	ldr	r1, [pc, #16]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d16:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40021000 	.word	0x40021000

08006d24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d32:	4b75      	ldr	r3, [pc, #468]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d018      	beq.n	8006d70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d3e:	4b72      	ldr	r3, [pc, #456]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0203 	and.w	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d10d      	bne.n	8006d6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
       ||
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d56:	4b6c      	ldr	r3, [pc, #432]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	091b      	lsrs	r3, r3, #4
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
       ||
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d047      	beq.n	8006dfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	e044      	b.n	8006dfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d018      	beq.n	8006daa <RCCEx_PLLSAI1_Config+0x86>
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d825      	bhi.n	8006dc8 <RCCEx_PLLSAI1_Config+0xa4>
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d002      	beq.n	8006d86 <RCCEx_PLLSAI1_Config+0x62>
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d009      	beq.n	8006d98 <RCCEx_PLLSAI1_Config+0x74>
 8006d84:	e020      	b.n	8006dc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d86:	4b60      	ldr	r3, [pc, #384]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d11d      	bne.n	8006dce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d96:	e01a      	b.n	8006dce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d98:	4b5b      	ldr	r3, [pc, #364]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d116      	bne.n	8006dd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da8:	e013      	b.n	8006dd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006daa:	4b57      	ldr	r3, [pc, #348]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10f      	bne.n	8006dd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006db6:	4b54      	ldr	r3, [pc, #336]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dc6:	e006      	b.n	8006dd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
      break;
 8006dcc:	e004      	b.n	8006dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e002      	b.n	8006dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dde:	4b4a      	ldr	r3, [pc, #296]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	430b      	orrs	r3, r1
 8006df4:	4944      	ldr	r1, [pc, #272]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d17d      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e00:	4b41      	ldr	r3, [pc, #260]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a40      	ldr	r2, [pc, #256]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0c:	f7fc f9c8 	bl	80031a0 <HAL_GetTick>
 8006e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e12:	e009      	b.n	8006e28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e14:	f7fc f9c4 	bl	80031a0 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d902      	bls.n	8006e28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	73fb      	strb	r3, [r7, #15]
        break;
 8006e26:	e005      	b.n	8006e34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e28:	4b37      	ldr	r3, [pc, #220]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1ef      	bne.n	8006e14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d160      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d111      	bne.n	8006e64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e40:	4b31      	ldr	r3, [pc, #196]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6892      	ldr	r2, [r2, #8]
 8006e50:	0211      	lsls	r1, r2, #8
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68d2      	ldr	r2, [r2, #12]
 8006e56:	0912      	lsrs	r2, r2, #4
 8006e58:	0452      	lsls	r2, r2, #17
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	492a      	ldr	r1, [pc, #168]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	610b      	str	r3, [r1, #16]
 8006e62:	e027      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d112      	bne.n	8006e90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e6a:	4b27      	ldr	r3, [pc, #156]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006e72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6892      	ldr	r2, [r2, #8]
 8006e7a:	0211      	lsls	r1, r2, #8
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6912      	ldr	r2, [r2, #16]
 8006e80:	0852      	lsrs	r2, r2, #1
 8006e82:	3a01      	subs	r2, #1
 8006e84:	0552      	lsls	r2, r2, #21
 8006e86:	430a      	orrs	r2, r1
 8006e88:	491f      	ldr	r1, [pc, #124]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	610b      	str	r3, [r1, #16]
 8006e8e:	e011      	b.n	8006eb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e90:	4b1d      	ldr	r3, [pc, #116]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006e98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6892      	ldr	r2, [r2, #8]
 8006ea0:	0211      	lsls	r1, r2, #8
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6952      	ldr	r2, [r2, #20]
 8006ea6:	0852      	lsrs	r2, r2, #1
 8006ea8:	3a01      	subs	r2, #1
 8006eaa:	0652      	lsls	r2, r2, #25
 8006eac:	430a      	orrs	r2, r1
 8006eae:	4916      	ldr	r1, [pc, #88]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006eb4:	4b14      	ldr	r3, [pc, #80]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a13      	ldr	r2, [pc, #76]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ebe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fc f96e 	bl	80031a0 <HAL_GetTick>
 8006ec4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ec6:	e009      	b.n	8006edc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ec8:	f7fc f96a 	bl	80031a0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d902      	bls.n	8006edc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eda:	e005      	b.n	8006ee8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006edc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ef      	beq.n	8006ec8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006eee:	4b06      	ldr	r3, [pc, #24]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	4904      	ldr	r1, [pc, #16]	@ (8006f08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000

08006f0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d018      	beq.n	8006f58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f26:	4b67      	ldr	r3, [pc, #412]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0203 	and.w	r2, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d10d      	bne.n	8006f52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
       ||
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f3e:	4b61      	ldr	r3, [pc, #388]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	091b      	lsrs	r3, r3, #4
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d047      	beq.n	8006fe2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e044      	b.n	8006fe2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d018      	beq.n	8006f92 <RCCEx_PLLSAI2_Config+0x86>
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d825      	bhi.n	8006fb0 <RCCEx_PLLSAI2_Config+0xa4>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d002      	beq.n	8006f6e <RCCEx_PLLSAI2_Config+0x62>
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d009      	beq.n	8006f80 <RCCEx_PLLSAI2_Config+0x74>
 8006f6c:	e020      	b.n	8006fb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f6e:	4b55      	ldr	r3, [pc, #340]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d11d      	bne.n	8006fb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f7e:	e01a      	b.n	8006fb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f80:	4b50      	ldr	r3, [pc, #320]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d116      	bne.n	8006fba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f90:	e013      	b.n	8006fba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f92:	4b4c      	ldr	r3, [pc, #304]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f9e:	4b49      	ldr	r3, [pc, #292]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fae:	e006      	b.n	8006fbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	e004      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10d      	bne.n	8006fe2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	4939      	ldr	r1, [pc, #228]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d167      	bne.n	80070b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a35      	ldr	r2, [pc, #212]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff4:	f7fc f8d4 	bl	80031a0 <HAL_GetTick>
 8006ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ffa:	e009      	b.n	8007010 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ffc:	f7fc f8d0 	bl	80031a0 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d902      	bls.n	8007010 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	73fb      	strb	r3, [r7, #15]
        break;
 800700e:	e005      	b.n	800701c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007010:	4b2c      	ldr	r3, [pc, #176]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1ef      	bne.n	8006ffc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d14a      	bne.n	80070b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d111      	bne.n	800704c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007028:	4b26      	ldr	r3, [pc, #152]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6892      	ldr	r2, [r2, #8]
 8007038:	0211      	lsls	r1, r2, #8
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68d2      	ldr	r2, [r2, #12]
 800703e:	0912      	lsrs	r2, r2, #4
 8007040:	0452      	lsls	r2, r2, #17
 8007042:	430a      	orrs	r2, r1
 8007044:	491f      	ldr	r1, [pc, #124]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007046:	4313      	orrs	r3, r2
 8007048:	614b      	str	r3, [r1, #20]
 800704a:	e011      	b.n	8007070 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800704c:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007054:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6892      	ldr	r2, [r2, #8]
 800705c:	0211      	lsls	r1, r2, #8
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6912      	ldr	r2, [r2, #16]
 8007062:	0852      	lsrs	r2, r2, #1
 8007064:	3a01      	subs	r2, #1
 8007066:	0652      	lsls	r2, r2, #25
 8007068:	430a      	orrs	r2, r1
 800706a:	4916      	ldr	r1, [pc, #88]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007070:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a13      	ldr	r2, [pc, #76]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707c:	f7fc f890 	bl	80031a0 <HAL_GetTick>
 8007080:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007082:	e009      	b.n	8007098 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007084:	f7fc f88c 	bl	80031a0 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d902      	bls.n	8007098 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
          break;
 8007096:	e005      	b.n	80070a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007098:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ef      	beq.n	8007084 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80070aa:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4904      	ldr	r1, [pc, #16]	@ (80070c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40021000 	.word	0x40021000

080070c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d079      	beq.n	80071ce <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fb fa72 	bl	80025d8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b10      	cmp	r3, #16
 8007108:	d058      	beq.n	80071bc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	22ca      	movs	r2, #202	@ 0xca
 8007110:	625a      	str	r2, [r3, #36]	@ 0x24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2253      	movs	r2, #83	@ 0x53
 8007118:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f880 	bl	8007220 <RTC_EnterInitMode>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d127      	bne.n	800717a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6812      	ldr	r2, [r2, #0]
 8007134:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800713c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	68d2      	ldr	r2, [r2, #12]
 8007164:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6919      	ldr	r1, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	041a      	lsls	r2, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f884 	bl	8007288 <RTC_ExitInitMode>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d113      	bne.n	80071b2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0203 	bic.w	r2, r2, #3
 8007198:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	22ff      	movs	r2, #255	@ 0xff
 80071b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80071ba:	e001      	b.n	80071c0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0d      	ldr	r2, [pc, #52]	@ (800721c <HAL_RTC_WaitForSynchro+0x44>)
 80071e6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80071e8:	f7fb ffda 	bl	80031a0 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071ee:	e009      	b.n	8007204 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071f0:	f7fb ffd6 	bl	80031a0 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071fe:	d901      	bls.n	8007204 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e007      	b.n	8007214 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0ee      	beq.n	80071f0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	0003ff5f 	.word	0x0003ff5f

08007220 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d120      	bne.n	800727c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007244:	f7fb ffac 	bl	80031a0 <HAL_GetTick>
 8007248:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800724a:	e00d      	b.n	8007268 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800724c:	f7fb ffa8 	bl	80031a0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800725a:	d905      	bls.n	8007268 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2203      	movs	r2, #3
 8007264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <RTC_EnterInitMode+0x5c>
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d1e7      	bne.n	800724c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <RTC_ExitInitMode+0x78>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	4a19      	ldr	r2, [pc, #100]	@ (8007300 <RTC_ExitInitMode+0x78>)
 800729a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800729e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072a0:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <RTC_ExitInitMode+0x78>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff93 	bl	80071d8 <HAL_RTC_WaitForSynchro>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01e      	beq.n	80072f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2203      	movs	r2, #3
 80072bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e017      	b.n	80072f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <RTC_ExitInitMode+0x78>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007300 <RTC_ExitInitMode+0x78>)
 80072cc:	f023 0320 	bic.w	r3, r3, #32
 80072d0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff ff80 	bl	80071d8 <HAL_RTC_WaitForSynchro>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2203      	movs	r2, #3
 80072e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072ea:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <RTC_ExitInitMode+0x78>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <RTC_ExitInitMode+0x78>)
 80072f0:	f043 0320 	orr.w	r3, r3, #32
 80072f4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40002800 	.word	0x40002800

08007304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e095      	b.n	8007442 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007326:	d009      	beq.n	800733c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	61da      	str	r2, [r3, #28]
 800732e:	e005      	b.n	800733c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fb f9ec 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800737c:	d902      	bls.n	8007384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e002      	b.n	800738a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007392:	d007      	beq.n	80073a4 <HAL_SPI_Init+0xa0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800739c:	d002      	beq.n	80073a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e6:	ea42 0103 	orr.w	r1, r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	f003 0204 	and.w	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007420:	ea42 0103 	orr.w	r1, r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800745a:	f7fb fea1 	bl	80031a0 <HAL_GetTick>
 800745e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
 8007472:	e15c      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_SPI_Transmit+0x36>
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e154      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_SPI_Transmit+0x48>
 800748e:	2302      	movs	r3, #2
 8007490:	e14d      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2203      	movs	r2, #3
 800749e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e4:	d10f      	bne.n	8007506 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b40      	cmp	r3, #64	@ 0x40
 8007512:	d007      	beq.n	8007524 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800752c:	d952      	bls.n	80075d4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_SPI_Transmit+0xf2>
 8007536:	8b7b      	ldrh	r3, [r7, #26]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d145      	bne.n	80075c8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007540:	881a      	ldrh	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007560:	e032      	b.n	80075c8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b02      	cmp	r3, #2
 800756e:	d112      	bne.n	8007596 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	881a      	ldrh	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007580:	1c9a      	adds	r2, r3, #2
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007594:	e018      	b.n	80075c8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007596:	f7fb fe03 	bl	80031a0 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d803      	bhi.n	80075ae <HAL_SPI_Transmit+0x164>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_Transmit+0x16a>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e0b2      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1c7      	bne.n	8007562 <HAL_SPI_Transmit+0x118>
 80075d2:	e083      	b.n	80076dc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_SPI_Transmit+0x198>
 80075dc:	8b7b      	ldrh	r3, [r7, #26]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d177      	bne.n	80076d2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d912      	bls.n	8007612 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b02      	subs	r3, #2
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007610:	e05f      	b.n	80076d2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007638:	e04b      	b.n	80076d2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b02      	cmp	r3, #2
 8007646:	d12b      	bne.n	80076a0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d912      	bls.n	8007678 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b02      	subs	r3, #2
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007676:	e02c      	b.n	80076d2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800769e:	e018      	b.n	80076d2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a0:	f7fb fd7e 	bl	80031a0 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d803      	bhi.n	80076b8 <HAL_SPI_Transmit+0x26e>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d102      	bne.n	80076be <HAL_SPI_Transmit+0x274>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e02d      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ae      	bne.n	800763a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fcf5 	bl	80080d0 <SPI_EndRxTxTransaction>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800772c:	2300      	movs	r3, #0
  }
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b088      	sub	sp, #32
 800773a:	af02      	add	r7, sp, #8
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d001      	beq.n	8007756 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
 8007754:	e123      	b.n	800799e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800775e:	d112      	bne.n	8007786 <HAL_SPI_Receive+0x50>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10e      	bne.n	8007786 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2204      	movs	r2, #4
 800776c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007770:	88fa      	ldrh	r2, [r7, #6]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f912 	bl	80079a6 <HAL_SPI_TransmitReceive>
 8007782:	4603      	mov	r3, r0
 8007784:	e10b      	b.n	800799e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007786:	f7fb fd0b 	bl	80031a0 <HAL_GetTick>
 800778a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_SPI_Receive+0x62>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e100      	b.n	800799e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_SPI_Receive+0x74>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e0f9      	b.n	800799e <HAL_SPI_Receive+0x268>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2204      	movs	r2, #4
 80077b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077fc:	d908      	bls.n	8007810 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	e007      	b.n	8007820 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007828:	d10f      	bne.n	800784a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007848:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007854:	2b40      	cmp	r3, #64	@ 0x40
 8007856:	d007      	beq.n	8007868 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007866:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007870:	d875      	bhi.n	800795e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007872:	e037      	b.n	80078e4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b01      	cmp	r3, #1
 8007880:	d117      	bne.n	80078b2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f103 020c 	add.w	r2, r3, #12
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	7812      	ldrb	r2, [r2, #0]
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80078b0:	e018      	b.n	80078e4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b2:	f7fb fc75 	bl	80031a0 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d803      	bhi.n	80078ca <HAL_SPI_Receive+0x194>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d102      	bne.n	80078d0 <HAL_SPI_Receive+0x19a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e05c      	b.n	800799e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1c1      	bne.n	8007874 <HAL_SPI_Receive+0x13e>
 80078f0:	e03b      	b.n	800796a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d115      	bne.n	800792c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	b292      	uxth	r2, r2
 800790c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800792a:	e018      	b.n	800795e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792c:	f7fb fc38 	bl	80031a0 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d803      	bhi.n	8007944 <HAL_SPI_Receive+0x20e>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d102      	bne.n	800794a <HAL_SPI_Receive+0x214>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e01f      	b.n	800799e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1c3      	bne.n	80078f2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fb56 	bl	8008020 <SPI_EndRxTransaction>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800799c:	2300      	movs	r3, #0
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b08a      	sub	sp, #40	@ 0x28
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079b4:	2301      	movs	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b8:	f7fb fbf2 	bl	80031a0 <HAL_GetTick>
 80079bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80079cc:	887b      	ldrh	r3, [r7, #2]
 80079ce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079d4:	7ffb      	ldrb	r3, [r7, #31]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d00c      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x4e>
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079e0:	d106      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x4a>
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d001      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	e1f3      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x60>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x60>
 8007a00:	887b      	ldrh	r3, [r7, #2]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e1e8      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x72>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e1e1      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d003      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2205      	movs	r2, #5
 8007a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	887a      	ldrh	r2, [r7, #2]
 8007a44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	887a      	ldrh	r2, [r7, #2]
 8007a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	887a      	ldrh	r2, [r7, #2]
 8007a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	887a      	ldrh	r2, [r7, #2]
 8007a60:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a76:	d802      	bhi.n	8007a7e <HAL_SPI_TransmitReceive+0xd8>
 8007a78:	8abb      	ldrh	r3, [r7, #20]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d908      	bls.n	8007a90 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	e007      	b.n	8007aa0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a9e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d007      	beq.n	8007abe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ac6:	f240 8083 	bls.w	8007bd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x132>
 8007ad2:	8afb      	ldrh	r3, [r7, #22]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d16f      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007adc:	881a      	ldrh	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae8:	1c9a      	adds	r2, r3, #2
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afc:	e05c      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d11b      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x19e>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d016      	beq.n	8007b44 <HAL_SPI_TransmitReceive+0x19e>
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d113      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	881a      	ldrh	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d11c      	bne.n	8007b8c <HAL_SPI_TransmitReceive+0x1e6>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	1c9a      	adds	r2, r3, #2
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b8c:	f7fb fb08 	bl	80031a0 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d80d      	bhi.n	8007bb8 <HAL_SPI_TransmitReceive+0x212>
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d009      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e111      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d19d      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x158>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d197      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x158>
 8007bce:	e0e5      	b.n	8007d9c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_SPI_TransmitReceive+0x23a>
 8007bd8:	8afb      	ldrh	r3, [r7, #22]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	f040 80d1 	bne.w	8007d82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d912      	bls.n	8007c10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	1c9a      	adds	r2, r3, #2
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b02      	subs	r3, #2
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c0e:	e0b8      	b.n	8007d82 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	330c      	adds	r3, #12
 8007c1a:	7812      	ldrb	r2, [r2, #0]
 8007c1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c36:	e0a4      	b.n	8007d82 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d134      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x30a>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02f      	beq.n	8007cb0 <HAL_SPI_TransmitReceive+0x30a>
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d12c      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d912      	bls.n	8007c86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b02      	subs	r3, #2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c84:	e012      	b.n	8007cac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d148      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x3aa>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d042      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d923      	bls.n	8007d1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce8:	1c9a      	adds	r2, r3, #2
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b02      	subs	r3, #2
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d81f      	bhi.n	8007d4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	e016      	b.n	8007d4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f103 020c 	add.w	r2, r3, #12
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	7812      	ldrb	r2, [r2, #0]
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d50:	f7fb fa26 	bl	80031a0 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d803      	bhi.n	8007d68 <HAL_SPI_TransmitReceive+0x3c2>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d102      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x3c8>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e02c      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f47f af55 	bne.w	8007c38 <HAL_SPI_TransmitReceive+0x292>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f47f af4e 	bne.w	8007c38 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f995 	bl	80080d0 <SPI_EndRxTxTransaction>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e00e      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007dda:	2300      	movs	r3, #0
  }
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3728      	adds	r7, #40	@ 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007df4:	f7fb f9d4 	bl	80031a0 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	4413      	add	r3, r2
 8007e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e04:	f7fb f9cc 	bl	80031a0 <HAL_GetTick>
 8007e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e0a:	4b39      	ldr	r3, [pc, #228]	@ (8007ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	015b      	lsls	r3, r3, #5
 8007e10:	0d1b      	lsrs	r3, r3, #20
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	fb02 f303 	mul.w	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e1a:	e054      	b.n	8007ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d050      	beq.n	8007ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e24:	f7fb f9bc 	bl	80031a0 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d902      	bls.n	8007e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d13d      	bne.n	8007eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e52:	d111      	bne.n	8007e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e5c:	d004      	beq.n	8007e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e66:	d107      	bne.n	8007e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e80:	d10f      	bne.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e017      	b.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d19b      	bne.n	8007e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000000c 	.word	0x2000000c

08007ef4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	@ 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f06:	f7fb f94b 	bl	80031a0 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	4413      	add	r3, r2
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f16:	f7fb f943 	bl	80031a0 <HAL_GetTick>
 8007f1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f24:	4b3d      	ldr	r3, [pc, #244]	@ (800801c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	00da      	lsls	r2, r3, #3
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	0d1b      	lsrs	r3, r3, #20
 8007f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f3c:	e060      	b.n	8008000 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f44:	d107      	bne.n	8007f56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d050      	beq.n	8008000 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f5e:	f7fb f91f 	bl	80031a0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d902      	bls.n	8007f74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d13d      	bne.n	8007ff0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f8c:	d111      	bne.n	8007fb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f96:	d004      	beq.n	8007fa2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa0:	d107      	bne.n	8007fb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fba:	d10f      	bne.n	8007fdc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e010      	b.n	8008012 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d196      	bne.n	8007f3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3728      	adds	r7, #40	@ 0x28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	2000000c 	.word	0x2000000c

08008020 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008034:	d111      	bne.n	800805a <SPI_EndRxTransaction+0x3a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800803e:	d004      	beq.n	800804a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008048:	d107      	bne.n	800805a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008058:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	2180      	movs	r1, #128	@ 0x80
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff febd 	bl	8007de4 <SPI_WaitFlagStateUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d007      	beq.n	8008080 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008074:	f043 0220 	orr.w	r2, r3, #32
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e023      	b.n	80080c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008088:	d11d      	bne.n	80080c6 <SPI_EndRxTransaction+0xa6>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008092:	d004      	beq.n	800809e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800809c:	d113      	bne.n	80080c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff ff22 	bl	8007ef4 <SPI_WaitFifoStateUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ba:	f043 0220 	orr.w	r2, r3, #32
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e000      	b.n	80080c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff ff03 	bl	8007ef4 <SPI_WaitFifoStateUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f8:	f043 0220 	orr.w	r2, r3, #32
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e027      	b.n	8008154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	2180      	movs	r1, #128	@ 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fe68 	bl	8007de4 <SPI_WaitFlagStateUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800811e:	f043 0220 	orr.w	r2, r3, #32
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e014      	b.n	8008154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2200      	movs	r2, #0
 8008132:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fedc 	bl	8007ef4 <SPI_WaitFifoStateUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e000      	b.n	8008154 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e049      	b.n	8008202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fa fd0e 	bl	8002ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f000 fa3e 	bl	800861c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	d001      	beq.n	8008224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e047      	b.n	80082b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <HAL_TIM_Base_Start+0xb4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d01d      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823e:	d018      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <HAL_TIM_Base_Start+0xb8>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d013      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1e      	ldr	r2, [pc, #120]	@ (80082c8 <HAL_TIM_Base_Start+0xbc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00e      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <HAL_TIM_Base_Start+0xc0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d009      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a1b      	ldr	r2, [pc, #108]	@ (80082d0 <HAL_TIM_Base_Start+0xc4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d004      	beq.n	8008272 <HAL_TIM_Base_Start+0x66>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a19      	ldr	r2, [pc, #100]	@ (80082d4 <HAL_TIM_Base_Start+0xc8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d115      	bne.n	800829e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	4b17      	ldr	r3, [pc, #92]	@ (80082d8 <HAL_TIM_Base_Start+0xcc>)
 800827a:	4013      	ands	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b06      	cmp	r3, #6
 8008282:	d015      	beq.n	80082b0 <HAL_TIM_Base_Start+0xa4>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800828a:	d011      	beq.n	80082b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829c:	e008      	b.n	80082b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0201 	orr.w	r2, r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e000      	b.n	80082b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	40012c00 	.word	0x40012c00
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00
 80082d0:	40013400 	.word	0x40013400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	00010007 	.word	0x00010007

080082dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d001      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e04f      	b.n	8008394 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a23      	ldr	r2, [pc, #140]	@ (80083a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d01d      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800831e:	d018      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a1f      	ldr	r2, [pc, #124]	@ (80083a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1e      	ldr	r2, [pc, #120]	@ (80083a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00e      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1c      	ldr	r2, [pc, #112]	@ (80083ac <HAL_TIM_Base_Start_IT+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d009      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1b      	ldr	r2, [pc, #108]	@ (80083b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d004      	beq.n	8008352 <HAL_TIM_Base_Start_IT+0x76>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a19      	ldr	r2, [pc, #100]	@ (80083b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d115      	bne.n	800837e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	4b17      	ldr	r3, [pc, #92]	@ (80083b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800835a:	4013      	ands	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b06      	cmp	r3, #6
 8008362:	d015      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0xb4>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800836a:	d011      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837c:	e008      	b.n	8008390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0201 	orr.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e000      	b.n	8008392 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40012c00 	.word	0x40012c00
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	00010007 	.word	0x00010007

080083bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d020      	beq.n	8008420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01b      	beq.n	8008420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0202 	mvn.w	r2, #2
 80083f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f8e9 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 800840c:	e005      	b.n	800841a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8db 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f8ec 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d020      	beq.n	800846c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01b      	beq.n	800846c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0204 	mvn.w	r2, #4
 800843c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8c3 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 8008458:	e005      	b.n	8008466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8b5 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8c6 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d020      	beq.n	80084b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01b      	beq.n	80084b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0208 	mvn.w	r2, #8
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2204      	movs	r2, #4
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f89d 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f88f 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8a0 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d020      	beq.n	8008504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0210 	mvn.w	r2, #16
 80084d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2208      	movs	r2, #8
 80084da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f877 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f869 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f87a 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0201 	mvn.w	r2, #1
 8008520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f9 fd24 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00c      	beq.n	8008556 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800854e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f99b 	bl	800888c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f993 	bl	80088a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00c      	beq.n	800859e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d007      	beq.n	800859e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f834 	bl	8008606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f06f 0220 	mvn.w	r2, #32
 80085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f95b 	bl	8008878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a46      	ldr	r2, [pc, #280]	@ (8008748 <TIM_Base_SetConfig+0x12c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d013      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	d00f      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a43      	ldr	r2, [pc, #268]	@ (800874c <TIM_Base_SetConfig+0x130>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00b      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a42      	ldr	r2, [pc, #264]	@ (8008750 <TIM_Base_SetConfig+0x134>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d007      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a41      	ldr	r2, [pc, #260]	@ (8008754 <TIM_Base_SetConfig+0x138>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a40      	ldr	r2, [pc, #256]	@ (8008758 <TIM_Base_SetConfig+0x13c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d108      	bne.n	800866e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a35      	ldr	r2, [pc, #212]	@ (8008748 <TIM_Base_SetConfig+0x12c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01f      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867c:	d01b      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a32      	ldr	r2, [pc, #200]	@ (800874c <TIM_Base_SetConfig+0x130>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d017      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a31      	ldr	r2, [pc, #196]	@ (8008750 <TIM_Base_SetConfig+0x134>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d013      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a30      	ldr	r2, [pc, #192]	@ (8008754 <TIM_Base_SetConfig+0x138>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00f      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a2f      	ldr	r2, [pc, #188]	@ (8008758 <TIM_Base_SetConfig+0x13c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00b      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2e      	ldr	r2, [pc, #184]	@ (800875c <TIM_Base_SetConfig+0x140>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d007      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008760 <TIM_Base_SetConfig+0x144>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008764 <TIM_Base_SetConfig+0x148>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d108      	bne.n	80086c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a16      	ldr	r2, [pc, #88]	@ (8008748 <TIM_Base_SetConfig+0x12c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a18      	ldr	r2, [pc, #96]	@ (8008758 <TIM_Base_SetConfig+0x13c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a17      	ldr	r2, [pc, #92]	@ (800875c <TIM_Base_SetConfig+0x140>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <TIM_Base_SetConfig+0x144>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a15      	ldr	r2, [pc, #84]	@ (8008764 <TIM_Base_SetConfig+0x148>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d103      	bne.n	800871c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d105      	bne.n	800873a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	611a      	str	r2, [r3, #16]
  }
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40013400 	.word	0x40013400
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800

08008768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800877c:	2302      	movs	r3, #2
 800877e:	e068      	b.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d108      	bne.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01d      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f2:	d018      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a1a      	ldr	r2, [pc, #104]	@ (800886c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d00e      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a13      	ldr	r2, [pc, #76]	@ (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d004      	beq.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a14      	ldr	r2, [pc, #80]	@ (8008874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d10c      	bne.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800882c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	4313      	orrs	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40012c00 	.word	0x40012c00
 8008864:	40013400 	.word	0x40013400
 8008868:	40000400 	.word	0x40000400
 800886c:	40000800 	.word	0x40000800
 8008870:	40000c00 	.word	0x40000c00
 8008874:	40014000 	.word	0x40014000

08008878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e040      	b.n	8008948 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fa f9fe 	bl	8002cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	@ 0x24
 80088e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0201 	bic.w	r2, r2, #1
 80088f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb6a 	bl	8008fd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8af 	bl	8008a64 <UART_SetConfig>
 8008906:	4603      	mov	r3, r0
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e01b      	b.n	8008948 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800891e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800892e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fbe9 	bl	8009118 <UART_CheckIdleState>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	@ 0x28
 8008954:	af02      	add	r7, sp, #8
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008964:	2b20      	cmp	r3, #32
 8008966:	d177      	bne.n	8008a58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <HAL_UART_Transmit+0x24>
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e070      	b.n	8008a5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2221      	movs	r2, #33	@ 0x21
 8008984:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008986:	f7fa fc0b 	bl	80031a0 <HAL_GetTick>
 800898a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a4:	d108      	bne.n	80089b8 <HAL_UART_Transmit+0x68>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	e003      	b.n	80089c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089c0:	e02f      	b.n	8008a22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fc4b 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e03b      	b.n	8008a5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10b      	bne.n	8008a00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	881a      	ldrh	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f4:	b292      	uxth	r2, r2
 80089f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	3302      	adds	r3, #2
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	e007      	b.n	8008a10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1c9      	bne.n	80089c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2140      	movs	r1, #64	@ 0x40
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fc15 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e005      	b.n	8008a5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e000      	b.n	8008a5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008a58:	2302      	movs	r3, #2
  }
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a68:	b08a      	sub	sp, #40	@ 0x28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4ba4      	ldr	r3, [pc, #656]	@ (8008d24 <UART_SetConfig+0x2c0>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a99      	ldr	r2, [pc, #612]	@ (8008d28 <UART_SetConfig+0x2c4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008acc:	4313      	orrs	r3, r2
 8008ace:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a90      	ldr	r2, [pc, #576]	@ (8008d2c <UART_SetConfig+0x2c8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d126      	bne.n	8008b3c <UART_SetConfig+0xd8>
 8008aee:	4b90      	ldr	r3, [pc, #576]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d81b      	bhi.n	8008b34 <UART_SetConfig+0xd0>
 8008afc:	a201      	add	r2, pc, #4	@ (adr r2, 8008b04 <UART_SetConfig+0xa0>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b15 	.word	0x08008b15
 8008b08:	08008b25 	.word	0x08008b25
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b2d 	.word	0x08008b2d
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b1a:	e116      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b22:	e112      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b24:	2304      	movs	r3, #4
 8008b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b2a:	e10e      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b32:	e10a      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b34:	2310      	movs	r3, #16
 8008b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b3a:	e106      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a7c      	ldr	r2, [pc, #496]	@ (8008d34 <UART_SetConfig+0x2d0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d138      	bne.n	8008bb8 <UART_SetConfig+0x154>
 8008b46:	4b7a      	ldr	r3, [pc, #488]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4c:	f003 030c 	and.w	r3, r3, #12
 8008b50:	2b0c      	cmp	r3, #12
 8008b52:	d82d      	bhi.n	8008bb0 <UART_SetConfig+0x14c>
 8008b54:	a201      	add	r2, pc, #4	@ (adr r2, 8008b5c <UART_SetConfig+0xf8>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b91 	.word	0x08008b91
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008ba9 	.word	0x08008ba9
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b96:	e0d8      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b9e:	e0d4      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ba6:	e0d0      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bae:	e0cc      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bb6:	e0c8      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8008d38 <UART_SetConfig+0x2d4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d125      	bne.n	8008c0e <UART_SetConfig+0x1aa>
 8008bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008bcc:	2b30      	cmp	r3, #48	@ 0x30
 8008bce:	d016      	beq.n	8008bfe <UART_SetConfig+0x19a>
 8008bd0:	2b30      	cmp	r3, #48	@ 0x30
 8008bd2:	d818      	bhi.n	8008c06 <UART_SetConfig+0x1a2>
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d00a      	beq.n	8008bee <UART_SetConfig+0x18a>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d814      	bhi.n	8008c06 <UART_SetConfig+0x1a2>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <UART_SetConfig+0x182>
 8008be0:	2b10      	cmp	r3, #16
 8008be2:	d008      	beq.n	8008bf6 <UART_SetConfig+0x192>
 8008be4:	e00f      	b.n	8008c06 <UART_SetConfig+0x1a2>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bec:	e0ad      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bf4:	e0a9      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bfc:	e0a5      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008bfe:	2308      	movs	r3, #8
 8008c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c04:	e0a1      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c06:	2310      	movs	r3, #16
 8008c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c0c:	e09d      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4a      	ldr	r2, [pc, #296]	@ (8008d3c <UART_SetConfig+0x2d8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d125      	bne.n	8008c64 <UART_SetConfig+0x200>
 8008c18:	4b45      	ldr	r3, [pc, #276]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c24:	d016      	beq.n	8008c54 <UART_SetConfig+0x1f0>
 8008c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c28:	d818      	bhi.n	8008c5c <UART_SetConfig+0x1f8>
 8008c2a:	2b80      	cmp	r3, #128	@ 0x80
 8008c2c:	d00a      	beq.n	8008c44 <UART_SetConfig+0x1e0>
 8008c2e:	2b80      	cmp	r3, #128	@ 0x80
 8008c30:	d814      	bhi.n	8008c5c <UART_SetConfig+0x1f8>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <UART_SetConfig+0x1d8>
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d008      	beq.n	8008c4c <UART_SetConfig+0x1e8>
 8008c3a:	e00f      	b.n	8008c5c <UART_SetConfig+0x1f8>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c42:	e082      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c44:	2302      	movs	r3, #2
 8008c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c4a:	e07e      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c52:	e07a      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c5a:	e076      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c62:	e072      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a35      	ldr	r2, [pc, #212]	@ (8008d40 <UART_SetConfig+0x2dc>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d12a      	bne.n	8008cc4 <UART_SetConfig+0x260>
 8008c6e:	4b30      	ldr	r3, [pc, #192]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c7c:	d01a      	beq.n	8008cb4 <UART_SetConfig+0x250>
 8008c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c82:	d81b      	bhi.n	8008cbc <UART_SetConfig+0x258>
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c88:	d00c      	beq.n	8008ca4 <UART_SetConfig+0x240>
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c8e:	d815      	bhi.n	8008cbc <UART_SetConfig+0x258>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <UART_SetConfig+0x238>
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c98:	d008      	beq.n	8008cac <UART_SetConfig+0x248>
 8008c9a:	e00f      	b.n	8008cbc <UART_SetConfig+0x258>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca2:	e052      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008caa:	e04e      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cb2:	e04a      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cba:	e046      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cc2:	e042      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a17      	ldr	r2, [pc, #92]	@ (8008d28 <UART_SetConfig+0x2c4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d13a      	bne.n	8008d44 <UART_SetConfig+0x2e0>
 8008cce:	4b18      	ldr	r3, [pc, #96]	@ (8008d30 <UART_SetConfig+0x2cc>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cdc:	d01a      	beq.n	8008d14 <UART_SetConfig+0x2b0>
 8008cde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ce2:	d81b      	bhi.n	8008d1c <UART_SetConfig+0x2b8>
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce8:	d00c      	beq.n	8008d04 <UART_SetConfig+0x2a0>
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cee:	d815      	bhi.n	8008d1c <UART_SetConfig+0x2b8>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <UART_SetConfig+0x298>
 8008cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cf8:	d008      	beq.n	8008d0c <UART_SetConfig+0x2a8>
 8008cfa:	e00f      	b.n	8008d1c <UART_SetConfig+0x2b8>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d02:	e022      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0a:	e01e      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d12:	e01a      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d1a:	e016      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0x2e6>
 8008d24:	efff69f3 	.word	0xefff69f3
 8008d28:	40008000 	.word	0x40008000
 8008d2c:	40013800 	.word	0x40013800
 8008d30:	40021000 	.word	0x40021000
 8008d34:	40004400 	.word	0x40004400
 8008d38:	40004800 	.word	0x40004800
 8008d3c:	40004c00 	.word	0x40004c00
 8008d40:	40005000 	.word	0x40005000
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a9f      	ldr	r2, [pc, #636]	@ (8008fcc <UART_SetConfig+0x568>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d17a      	bne.n	8008e4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d824      	bhi.n	8008da6 <UART_SetConfig+0x342>
 8008d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <UART_SetConfig+0x300>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008da7 	.word	0x08008da7
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008da7 	.word	0x08008da7
 8008d74:	08008d97 	.word	0x08008d97
 8008d78:	08008da7 	.word	0x08008da7
 8008d7c:	08008da7 	.word	0x08008da7
 8008d80:	08008da7 	.word	0x08008da7
 8008d84:	08008d9f 	.word	0x08008d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fd fc56 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	61f8      	str	r0, [r7, #28]
        break;
 8008d8e:	e010      	b.n	8008db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d90:	4b8f      	ldr	r3, [pc, #572]	@ (8008fd0 <UART_SetConfig+0x56c>)
 8008d92:	61fb      	str	r3, [r7, #28]
        break;
 8008d94:	e00d      	b.n	8008db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d96:	f7fd fbb7 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8008d9a:	61f8      	str	r0, [r7, #28]
        break;
 8008d9c:	e009      	b.n	8008db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008da2:	61fb      	str	r3, [r7, #28]
        break;
 8008da4:	e005      	b.n	8008db2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80fb 	beq.w	8008fb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d305      	bcc.n	8008dd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d903      	bls.n	8008dde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ddc:	e0e8      	b.n	8008fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	2200      	movs	r2, #0
 8008de2:	461c      	mov	r4, r3
 8008de4:	4615      	mov	r5, r2
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	022b      	lsls	r3, r5, #8
 8008df0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008df4:	0222      	lsls	r2, r4, #8
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6849      	ldr	r1, [r1, #4]
 8008dfa:	0849      	lsrs	r1, r1, #1
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4688      	mov	r8, r1
 8008e00:	4681      	mov	r9, r0
 8008e02:	eb12 0a08 	adds.w	sl, r2, r8
 8008e06:	eb43 0b09 	adc.w	fp, r3, r9
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	603b      	str	r3, [r7, #0]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 fec4 	bl	8000ba8 <__aeabi_uldivmod>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4613      	mov	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e2e:	d308      	bcc.n	8008e42 <UART_SetConfig+0x3de>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e36:	d204      	bcs.n	8008e42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	e0b6      	b.n	8008fb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e48:	e0b2      	b.n	8008fb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e52:	d15e      	bne.n	8008f12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d828      	bhi.n	8008eae <UART_SetConfig+0x44a>
 8008e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <UART_SetConfig+0x400>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	08008eaf 	.word	0x08008eaf
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008eaf 	.word	0x08008eaf
 8008e7c:	08008eaf 	.word	0x08008eaf
 8008e80:	08008eaf 	.word	0x08008eaf
 8008e84:	08008ea7 	.word	0x08008ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e88:	f7fd fbd6 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8008e8c:	61f8      	str	r0, [r7, #28]
        break;
 8008e8e:	e014      	b.n	8008eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e90:	f7fd fbe8 	bl	8006664 <HAL_RCC_GetPCLK2Freq>
 8008e94:	61f8      	str	r0, [r7, #28]
        break;
 8008e96:	e010      	b.n	8008eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e98:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd0 <UART_SetConfig+0x56c>)
 8008e9a:	61fb      	str	r3, [r7, #28]
        break;
 8008e9c:	e00d      	b.n	8008eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e9e:	f7fd fb33 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8008ea2:	61f8      	str	r0, [r7, #28]
        break;
 8008ea4:	e009      	b.n	8008eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eaa:	61fb      	str	r3, [r7, #28]
        break;
 8008eac:	e005      	b.n	8008eba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d077      	beq.n	8008fb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	005a      	lsls	r2, r3, #1
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	441a      	add	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b0f      	cmp	r3, #15
 8008eda:	d916      	bls.n	8008f0a <UART_SetConfig+0x4a6>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee2:	d212      	bcs.n	8008f0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	f023 030f 	bic.w	r3, r3, #15
 8008eec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	8afb      	ldrh	r3, [r7, #22]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	8afa      	ldrh	r2, [r7, #22]
 8008f06:	60da      	str	r2, [r3, #12]
 8008f08:	e052      	b.n	8008fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f10:	e04e      	b.n	8008fb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d827      	bhi.n	8008f6a <UART_SetConfig+0x506>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x4bc>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	08008f6b 	.word	0x08008f6b
 8008f30:	08008f5b 	.word	0x08008f5b
 8008f34:	08008f6b 	.word	0x08008f6b
 8008f38:	08008f6b 	.word	0x08008f6b
 8008f3c:	08008f6b 	.word	0x08008f6b
 8008f40:	08008f63 	.word	0x08008f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f44:	f7fd fb78 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8008f48:	61f8      	str	r0, [r7, #28]
        break;
 8008f4a:	e014      	b.n	8008f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f4c:	f7fd fb8a 	bl	8006664 <HAL_RCC_GetPCLK2Freq>
 8008f50:	61f8      	str	r0, [r7, #28]
        break;
 8008f52:	e010      	b.n	8008f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd0 <UART_SetConfig+0x56c>)
 8008f56:	61fb      	str	r3, [r7, #28]
        break;
 8008f58:	e00d      	b.n	8008f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5a:	f7fd fad5 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 8008f5e:	61f8      	str	r0, [r7, #28]
        break;
 8008f60:	e009      	b.n	8008f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f66:	61fb      	str	r3, [r7, #28]
        break;
 8008f68:	e005      	b.n	8008f76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f74:	bf00      	nop
    }

    if (pclk != 0U)
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d019      	beq.n	8008fb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	085a      	lsrs	r2, r3, #1
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	441a      	add	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d909      	bls.n	8008faa <UART_SetConfig+0x546>
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f9c:	d205      	bcs.n	8008faa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	e002      	b.n	8008fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008fbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3728      	adds	r7, #40	@ 0x28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fca:	bf00      	nop
 8008fcc:	40008000 	.word	0x40008000
 8008fd0:	00f42400 	.word	0x00f42400

08008fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009068:	f003 0310 	and.w	r3, r3, #16
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01a      	beq.n	80090ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d2:	d10a      	bne.n	80090ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	605a      	str	r2, [r3, #4]
  }
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b098      	sub	sp, #96	@ 0x60
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009128:	f7fa f83a 	bl	80031a0 <HAL_GetTick>
 800912c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0308 	and.w	r3, r3, #8
 8009138:	2b08      	cmp	r3, #8
 800913a:	d12e      	bne.n	800919a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800913c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009144:	2200      	movs	r2, #0
 8009146:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f88c 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d021      	beq.n	800919a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800916a:	653b      	str	r3, [r7, #80]	@ 0x50
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009174:	647b      	str	r3, [r7, #68]	@ 0x44
 8009176:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e6      	bne.n	8009156 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2220      	movs	r2, #32
 800918c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e062      	b.n	8009260 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d149      	bne.n	800923c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091b0:	2200      	movs	r2, #0
 80091b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f856 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d03c      	beq.n	800923c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	623b      	str	r3, [r7, #32]
   return(result);
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e6      	bne.n	80091c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	60fb      	str	r3, [r7, #12]
   return(result);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0301 	bic.w	r3, r3, #1
 800920a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009214:	61fa      	str	r2, [r7, #28]
 8009216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	69b9      	ldr	r1, [r7, #24]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	617b      	str	r3, [r7, #20]
   return(result);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e5      	bne.n	80091f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e011      	b.n	8009260 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3758      	adds	r7, #88	@ 0x58
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4613      	mov	r3, r2
 8009276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009278:	e04f      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d04b      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009282:	f7f9 ff8d 	bl	80031a0 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <UART_WaitOnFlagUntilTimeout+0x30>
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e04e      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d037      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b80      	cmp	r3, #128	@ 0x80
 80092ae:	d034      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b40      	cmp	r3, #64	@ 0x40
 80092b4:	d031      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d110      	bne.n	80092e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2208      	movs	r2, #8
 80092ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f838 	bl	8009342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2208      	movs	r2, #8
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e029      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092f4:	d111      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f81e 	bl	8009342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e00f      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	4013      	ands	r3, r2
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	bf0c      	ite	eq
 800932a:	2301      	moveq	r3, #1
 800932c:	2300      	movne	r3, #0
 800932e:	b2db      	uxtb	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	429a      	cmp	r2, r3
 8009336:	d0a0      	beq.n	800927a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009342:	b480      	push	{r7}
 8009344:	b095      	sub	sp, #84	@ 0x54
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800935e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009368:	643b      	str	r3, [r7, #64]	@ 0x40
 800936a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800936e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	61fb      	str	r3, [r7, #28]
   return(result);
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f023 0301 	bic.w	r3, r3, #1
 8009392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800939c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800939e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e5      	bne.n	800937c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d118      	bne.n	80093ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f023 0310 	bic.w	r3, r3, #16
 80093cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093d6:	61bb      	str	r3, [r7, #24]
 80093d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	613b      	str	r3, [r7, #16]
   return(result);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093fe:	bf00      	nop
 8009400:	3754      	adds	r7, #84	@ 0x54
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	7992      	ldrb	r2, [r2, #6]
 800941c:	08d2      	lsrs	r2, r2, #3
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	fb13 f302 	smulbb	r3, r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	889b      	ldrh	r3, [r3, #4]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	885b      	ldrh	r3, [r3, #2]
 8009434:	fb02 f303 	mul.w	r3, r2, r3
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	60da      	str	r2, [r3, #12]
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8009450:	b490      	push	{r4, r7}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	1d39      	adds	r1, r7, #4
 800945c:	e881 000c 	stmia.w	r1, {r2, r3}
 8009460:	4623      	mov	r3, r4
 8009462:	81fb      	strh	r3, [r7, #14]
 8009464:	4603      	mov	r3, r0
 8009466:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8009468:	2300      	movs	r3, #0
 800946a:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800946c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009470:	88ba      	ldrh	r2, [r7, #4]
 8009472:	4293      	cmp	r3, r2
 8009474:	da04      	bge.n	8009480 <code+0x30>
        code |= LEFT;
 8009476:	2201      	movs	r2, #1
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	4313      	orrs	r3, r2
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e008      	b.n	8009492 <code+0x42>
    } else if (x0 > window.x1) {
 8009480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009484:	893a      	ldrh	r2, [r7, #8]
 8009486:	4293      	cmp	r3, r2
 8009488:	dd03      	ble.n	8009492 <code+0x42>
        code |= RIGHT;
 800948a:	2202      	movs	r2, #2
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	4313      	orrs	r3, r2
 8009490:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8009492:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009496:	88fa      	ldrh	r2, [r7, #6]
 8009498:	4293      	cmp	r3, r2
 800949a:	da04      	bge.n	80094a6 <code+0x56>
        code |= BOTTOM;
 800949c:	2204      	movs	r2, #4
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	75fb      	strb	r3, [r7, #23]
 80094a4:	e008      	b.n	80094b8 <code+0x68>
    } else if (y0 > window.y1) {
 80094a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80094aa:	897a      	ldrh	r2, [r7, #10]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	dd03      	ble.n	80094b8 <code+0x68>
        code |= TOP;
 80094b0:	2208      	movs	r2, #8
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc90      	pop	{r4, r7}
 80094c2:	4770      	bx	lr

080094c4 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80094de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80094e2:	cb0c      	ldmia	r3, {r2, r3}
 80094e4:	f7ff ffb4 	bl	8009450 <code>
 80094e8:	4603      	mov	r3, r0
 80094ea:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80094f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80094fc:	cb0c      	ldmia	r3, {r2, r3}
 80094fe:	f7ff ffa7 	bl	8009450 <code>
 8009502:	4603      	mov	r3, r0
 8009504:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8009506:	2300      	movs	r3, #0
 8009508:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800950a:	7ffa      	ldrb	r2, [r7, #31]
 800950c:	7fbb      	ldrb	r3, [r7, #30]
 800950e:	4313      	orrs	r3, r2
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8009516:	2301      	movs	r3, #1
 8009518:	777b      	strb	r3, [r7, #29]
            break;
 800951a:	e0e9      	b.n	80096f0 <clip_line+0x22c>
        } else if (code0 & code1) {
 800951c:	7ffa      	ldrb	r2, [r7, #31]
 800951e:	7fbb      	ldrb	r3, [r7, #30]
 8009520:	4013      	ands	r3, r2
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 80e2 	bne.w	80096ee <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8009532:	7ffb      	ldrb	r3, [r7, #31]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <clip_line+0x78>
 8009538:	7ffb      	ldrb	r3, [r7, #31]
 800953a:	e000      	b.n	800953e <clip_line+0x7a>
 800953c:	7fbb      	ldrb	r3, [r7, #30]
 800953e:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8009540:	2208      	movs	r2, #8
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	4013      	ands	r3, r2
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d024      	beq.n	8009596 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009552:	b29a      	uxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800955a:	4619      	mov	r1, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009562:	1acb      	subs	r3, r1, r3
 8009564:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8009566:	4608      	mov	r0, r1
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800956e:	1a41      	subs	r1, r0, r1
 8009570:	fb03 f101 	mul.w	r1, r3, r1
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800957a:	4618      	mov	r0, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009582:	1ac3      	subs	r3, r0, r3
 8009584:	fb91 f3f3 	sdiv	r3, r1, r3
 8009588:	b29b      	uxth	r3, r3
 800958a:	4413      	add	r3, r2
 800958c:	b29b      	uxth	r3, r3
 800958e:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8009590:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009592:	833b      	strh	r3, [r7, #24]
 8009594:	e07f      	b.n	8009696 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8009596:	2204      	movs	r2, #4
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	4013      	ands	r3, r2
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d024      	beq.n	80095ec <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095b0:	4619      	mov	r1, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095b8:	1acb      	subs	r3, r1, r3
 80095ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80095bc:	4608      	mov	r0, r1
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80095c4:	1a41      	subs	r1, r0, r1
 80095c6:	fb03 f101 	mul.w	r1, r3, r1
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d0:	4618      	mov	r0, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d8:	1ac3      	subs	r3, r0, r3
 80095da:	fb91 f3f3 	sdiv	r3, r1, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	4413      	add	r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80095e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095e8:	833b      	strh	r3, [r7, #24]
 80095ea:	e054      	b.n	8009696 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 80095ec:	2202      	movs	r2, #2
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	4013      	ands	r3, r2
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d024      	beq.n	8009642 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009606:	4619      	mov	r1, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800960e:	1acb      	subs	r3, r1, r3
 8009610:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8009612:	4608      	mov	r0, r1
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	f9b1 1000 	ldrsh.w	r1, [r1]
 800961a:	1a41      	subs	r1, r0, r1
 800961c:	fb03 f101 	mul.w	r1, r3, r1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009626:	4618      	mov	r0, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800962e:	1ac3      	subs	r3, r0, r3
 8009630:	fb91 f3f3 	sdiv	r3, r1, r3
 8009634:	b29b      	uxth	r3, r3
 8009636:	4413      	add	r3, r2
 8009638:	b29b      	uxth	r3, r3
 800963a:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800963c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800963e:	837b      	strh	r3, [r7, #26]
 8009640:	e029      	b.n	8009696 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8009642:	2201      	movs	r2, #1
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	4013      	ands	r3, r2
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d023      	beq.n	8009696 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009654:	b29a      	uxth	r2, r3
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800965c:	4619      	mov	r1, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009664:	1acb      	subs	r3, r1, r3
 8009666:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8009668:	4608      	mov	r0, r1
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009670:	1a41      	subs	r1, r0, r1
 8009672:	fb03 f101 	mul.w	r1, r3, r1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800967c:	4618      	mov	r0, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009684:	1ac3      	subs	r3, r0, r3
 8009686:	fb91 f3f3 	sdiv	r3, r1, r3
 800968a:	b29b      	uxth	r3, r3
 800968c:	4413      	add	r3, r2
 800968e:	b29b      	uxth	r3, r3
 8009690:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8009692:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009694:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8009696:	7dfa      	ldrb	r2, [r7, #23]
 8009698:	7ffb      	ldrb	r3, [r7, #31]
 800969a:	429a      	cmp	r2, r3
 800969c:	d113      	bne.n	80096c6 <clip_line+0x202>
                *x0 = x;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8b7a      	ldrh	r2, [r7, #26]
 80096a2:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	8b3a      	ldrh	r2, [r7, #24]
 80096a8:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f9b3 0000 	ldrsh.w	r0, [r3]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80096b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80096ba:	cb0c      	ldmia	r3, {r2, r3}
 80096bc:	f7ff fec8 	bl	8009450 <code>
 80096c0:	4603      	mov	r3, r0
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e721      	b.n	800950a <clip_line+0x46>
            } else {
                *x1 = x;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8b7a      	ldrh	r2, [r7, #26]
 80096ca:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	8b3a      	ldrh	r2, [r7, #24]
 80096d0:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80096de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80096e2:	cb0c      	ldmia	r3, {r2, r3}
 80096e4:	f7ff feb4 	bl	8009450 <code>
 80096e8:	4603      	mov	r3, r0
 80096ea:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80096ec:	e70d      	b.n	800950a <clip_line+0x46>
            break;
 80096ee:	bf00      	nop
            }
        }
    }

    return accept;
 80096f0:	7f7b      	ldrb	r3, [r7, #29]
 80096f2:	4618      	mov	r0, r3
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	3306      	adds	r3, #6
 800970a:	2208      	movs	r2, #8
 800970c:	4619      	mov	r1, r3
 800970e:	f001 fe0e 	bl	800b32e <memcpy>
    meta->width = font[FONTX_WIDTH];
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	330e      	adds	r3, #14
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	330f      	adds	r3, #15
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	3310      	adds	r3, #16
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	72da      	strb	r2, [r3, #11]

    return 0;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800973a:	b580      	push	{r7, lr}
 800973c:	b08e      	sub	sp, #56	@ 0x38
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8009746:	f107 0314 	add.w	r3, r7, #20
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff ffd4 	bl	80096fa <fontx_meta>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8009758:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <fontx_glyph+0x2c>
        return status;
 8009760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009764:	e077      	b.n	8009856 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8009766:	7f7a      	ldrb	r2, [r7, #29]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800976c:	7fba      	ldrb	r2, [r7, #30]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8009772:	7f7b      	ldrb	r3, [r7, #29]
 8009774:	3307      	adds	r3, #7
 8009776:	2b00      	cmp	r3, #0
 8009778:	da00      	bge.n	800977c <fontx_glyph+0x42>
 800977a:	3307      	adds	r3, #7
 800977c:	10db      	asrs	r3, r3, #3
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	78da      	ldrb	r2, [r3, #3]
 8009788:	7fbb      	ldrb	r3, [r7, #30]
 800978a:	fb12 f303 	smulbb	r3, r2, r3
 800978e:	b2da      	uxtb	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8009794:	7ffb      	ldrb	r3, [r7, #31]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10f      	bne.n	80097ba <fontx_glyph+0x80>
        if (code < 0x100) {
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2bff      	cmp	r3, #255	@ 0xff
 800979e:	d859      	bhi.n	8009854 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	789b      	ldrb	r3, [r3, #2]
 80097a4:	461a      	mov	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	3311      	adds	r3, #17
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e04d      	b.n	8009856 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3312      	adds	r3, #18
 80097be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3311      	adds	r3, #17
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80097cc:	e03d      	b.n	800984a <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	3301      	adds	r3, #1
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	4413      	add	r3, r2
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80097e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e2:	3302      	adds	r3, #2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	3303      	adds	r3, #3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	021b      	lsls	r3, r3, #8
 80097f0:	4413      	add	r3, r2
 80097f2:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d31c      	bcc.n	8009836 <fontx_glyph+0xfc>
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	429a      	cmp	r2, r3
 8009802:	d818      	bhi.n	8009836 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800980c:	4413      	add	r3, r2
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3311      	adds	r3, #17
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	461a      	mov	r2, r3
                    nc * glyph->size
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	789b      	ldrb	r3, [r3, #2]
 800981e:	4619      	mov	r1, r3
 8009820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009822:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009826:	4413      	add	r3, r2
 8009828:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	441a      	add	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e00f      	b.n	8009856 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8009836:	6a3a      	ldr	r2, [r7, #32]
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	1ad2      	subs	r2, r2, r3
 800983c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800983e:	4413      	add	r3, r2
 8009840:	3301      	adds	r3, #1
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	3304      	adds	r3, #4
 8009848:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	1e5a      	subs	r2, r3, #1
 800984e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1bc      	bne.n	80097ce <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8009854:	2301      	movs	r3, #1
 8009856:	4618      	mov	r0, r3
 8009858:	3738      	adds	r7, #56	@ 0x38
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	dd01      	ble.n	8009874 <min+0x16>
        return b;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	e000      	b.n	8009876 <min+0x18>
    };
    return a;
 8009874:	687b      	ldr	r3, [r7, #4]
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <max>:

static inline int max(int a, int b) {
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	dd01      	ble.n	8009898 <max+0x16>
        return a;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	e000      	b.n	800989a <max+0x18>
    }
    return b;
 8009898:	683b      	ldr	r3, [r7, #0]
}
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80098a8:	b490      	push	{r4, r7}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4623      	mov	r3, r4
 80098b8:	80fb      	strh	r3, [r7, #6]
 80098ba:	4603      	mov	r3, r0
 80098bc:	80bb      	strh	r3, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	807b      	strh	r3, [r7, #2]
 80098c2:	4613      	mov	r3, r2
 80098c4:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 80098c6:	4a08      	ldr	r2, [pc, #32]	@ (80098e8 <hagl_set_clip_window+0x40>)
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 80098cc:	4a06      	ldr	r2, [pc, #24]	@ (80098e8 <hagl_set_clip_window+0x40>)
 80098ce:	88bb      	ldrh	r3, [r7, #4]
 80098d0:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 80098d2:	4a05      	ldr	r2, [pc, #20]	@ (80098e8 <hagl_set_clip_window+0x40>)
 80098d4:	887b      	ldrh	r3, [r7, #2]
 80098d6:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 80098d8:	4a03      	ldr	r2, [pc, #12]	@ (80098e8 <hagl_set_clip_window+0x40>)
 80098da:	883b      	ldrh	r3, [r7, #0]
 80098dc:	80d3      	strh	r3, [r2, #6]
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc90      	pop	{r4, r7}
 80098e6:	4770      	bx	lr
 80098e8:	20000018 	.word	0x20000018

080098ec <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	80fb      	strh	r3, [r7, #6]
 80098f6:	460b      	mov	r3, r1
 80098f8:	80bb      	strh	r3, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80098fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009902:	4a12      	ldr	r2, [pc, #72]	@ (800994c <hagl_put_pixel+0x60>)
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	4293      	cmp	r3, r2
 8009908:	db1a      	blt.n	8009940 <hagl_put_pixel+0x54>
 800990a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800990e:	4a0f      	ldr	r2, [pc, #60]	@ (800994c <hagl_put_pixel+0x60>)
 8009910:	8852      	ldrh	r2, [r2, #2]
 8009912:	4293      	cmp	r3, r2
 8009914:	db14      	blt.n	8009940 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8009916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800991a:	4a0c      	ldr	r2, [pc, #48]	@ (800994c <hagl_put_pixel+0x60>)
 800991c:	8892      	ldrh	r2, [r2, #4]
 800991e:	4293      	cmp	r3, r2
 8009920:	dc10      	bgt.n	8009944 <hagl_put_pixel+0x58>
 8009922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009926:	4a09      	ldr	r2, [pc, #36]	@ (800994c <hagl_put_pixel+0x60>)
 8009928:	88d2      	ldrh	r2, [r2, #6]
 800992a:	4293      	cmp	r3, r2
 800992c:	dc0a      	bgt.n	8009944 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800992e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009932:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009936:	887a      	ldrh	r2, [r7, #2]
 8009938:	4618      	mov	r0, r3
 800993a:	f7f8 f87b 	bl	8001a34 <lcd_put_pixel>
 800993e:	e002      	b.n	8009946 <hagl_put_pixel+0x5a>
        return;
 8009940:	bf00      	nop
 8009942:	e000      	b.n	8009946 <hagl_put_pixel+0x5a>
        return;
 8009944:	bf00      	nop
}
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000018 	.word	0x20000018

08009950 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8009950:	b590      	push	{r4, r7, lr}
 8009952:	b085      	sub	sp, #20
 8009954:	af02      	add	r7, sp, #8
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	4623      	mov	r3, r4
 8009960:	80fb      	strh	r3, [r7, #6]
 8009962:	4603      	mov	r3, r0
 8009964:	80bb      	strh	r3, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	807b      	strh	r3, [r7, #2]
 800996a:	4613      	mov	r3, r2
 800996c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800996e:	88fa      	ldrh	r2, [r7, #6]
 8009970:	887b      	ldrh	r3, [r7, #2]
 8009972:	4413      	add	r3, r2
 8009974:	b29b      	uxth	r3, r3
 8009976:	b21a      	sxth	r2, r3
 8009978:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800997c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009980:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009984:	883b      	ldrh	r3, [r7, #0]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4623      	mov	r3, r4
 800998a:	f000 f827 	bl	80099dc <hagl_draw_line>
#endif
}
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	bd90      	pop	{r4, r7, pc}

08009996 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8009996:	b590      	push	{r4, r7, lr}
 8009998:	b085      	sub	sp, #20
 800999a:	af02      	add	r7, sp, #8
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	461a      	mov	r2, r3
 80099a4:	4623      	mov	r3, r4
 80099a6:	80fb      	strh	r3, [r7, #6]
 80099a8:	4603      	mov	r3, r0
 80099aa:	80bb      	strh	r3, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	807b      	strh	r3, [r7, #2]
 80099b0:	4613      	mov	r3, r2
 80099b2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80099b4:	88ba      	ldrh	r2, [r7, #4]
 80099b6:	887b      	ldrh	r3, [r7, #2]
 80099b8:	4413      	add	r3, r2
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	b21c      	sxth	r4, r3
 80099be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80099c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80099ca:	883b      	ldrh	r3, [r7, #0]
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4623      	mov	r3, r4
 80099d0:	f000 f804 	bl	80099dc <hagl_draw_line>
#endif
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd90      	pop	{r4, r7, pc}

080099dc <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b089      	sub	sp, #36	@ 0x24
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	461a      	mov	r2, r3
 80099ea:	4623      	mov	r3, r4
 80099ec:	80fb      	strh	r3, [r7, #6]
 80099ee:	4603      	mov	r3, r0
 80099f0:	80bb      	strh	r3, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	807b      	strh	r3, [r7, #2]
 80099f6:	4613      	mov	r3, r2
 80099f8:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80099fa:	463b      	mov	r3, r7
 80099fc:	1cba      	adds	r2, r7, #2
 80099fe:	1d3d      	adds	r5, r7, #4
 8009a00:	1dbc      	adds	r4, r7, #6
 8009a02:	494a      	ldr	r1, [pc, #296]	@ (8009b2c <hagl_draw_line+0x150>)
 8009a04:	466e      	mov	r6, sp
 8009a06:	c903      	ldmia	r1, {r0, r1}
 8009a08:	e886 0003 	stmia.w	r6, {r0, r1}
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff fd58 	bl	80094c4 <clip_line>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f083 0301 	eor.w	r3, r3, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d17e      	bne.n	8009b1e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8009a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a24:	461a      	mov	r2, r3
 8009a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	bfb8      	it	lt
 8009a30:	425b      	neglt	r3, r3
 8009a32:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8009a34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	da01      	bge.n	8009a44 <hagl_draw_line+0x68>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e001      	b.n	8009a48 <hagl_draw_line+0x6c>
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8009a4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bfb8      	it	lt
 8009a5a:	425b      	neglt	r3, r3
 8009a5c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8009a5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009a62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	da01      	bge.n	8009a6e <hagl_draw_line+0x92>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e001      	b.n	8009a72 <hagl_draw_line+0x96>
 8009a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a72:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8009a74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009a78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	dd06      	ble.n	8009a8e <hagl_draw_line+0xb2>
 8009a80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009a84:	0fda      	lsrs	r2, r3, #31
 8009a86:	4413      	add	r3, r2
 8009a88:	105b      	asrs	r3, r3, #1
 8009a8a:	b21b      	sxth	r3, r3
 8009a8c:	e006      	b.n	8009a9c <hagl_draw_line+0xc0>
 8009a8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009a92:	0fda      	lsrs	r2, r3, #31
 8009a94:	4413      	add	r3, r2
 8009a96:	105b      	asrs	r3, r3, #1
 8009a98:	425b      	negs	r3, r3
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8009a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009aa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009aa6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff ff1f 	bl	80098ec <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8009aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d105      	bne.n	8009ac6 <hagl_draw_line+0xea>
 8009aba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009abe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d02d      	beq.n	8009b22 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8009ac6:	8afb      	ldrh	r3, [r7, #22]
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8009ace:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009ad2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	dd0c      	ble.n	8009af6 <hagl_draw_line+0x11a>
            err -= dy;
 8009adc:	8afa      	ldrh	r2, [r7, #22]
 8009ade:	8a3b      	ldrh	r3, [r7, #16]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8009ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	8a7b      	ldrh	r3, [r7, #18]
 8009aee:	4413      	add	r3, r2
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	b21b      	sxth	r3, r3
 8009af4:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8009af6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009afa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	dacd      	bge.n	8009a9e <hagl_draw_line+0xc2>
            err += dx;
 8009b02:	8afa      	ldrh	r2, [r7, #22]
 8009b04:	8abb      	ldrh	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8009b0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	89fb      	ldrh	r3, [r7, #14]
 8009b14:	4413      	add	r3, r2
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	b21b      	sxth	r3, r3
 8009b1a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8009b1c:	e7bf      	b.n	8009a9e <hagl_draw_line+0xc2>
        return;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <hagl_draw_line+0x148>
            break;
 8009b22:	bf00      	nop
        }
    }
}
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000018 	.word	0x20000018

08009b30 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4623      	mov	r3, r4
 8009b40:	80fb      	strh	r3, [r7, #6]
 8009b42:	4603      	mov	r3, r0
 8009b44:	80bb      	strh	r3, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	807b      	strh	r3, [r7, #2]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8009b4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	dd0e      	ble.n	8009b78 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8009b5a:	88fa      	ldrh	r2, [r7, #6]
 8009b5c:	887b      	ldrh	r3, [r7, #2]
 8009b5e:	4413      	add	r3, r2
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8009b64:	88fa      	ldrh	r2, [r7, #6]
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8009b6e:	88fa      	ldrh	r2, [r7, #6]
 8009b70:	887b      	ldrh	r3, [r7, #2]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8009b78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009b7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	dd0e      	ble.n	8009ba2 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8009b84:	88ba      	ldrh	r2, [r7, #4]
 8009b86:	883b      	ldrh	r3, [r7, #0]
 8009b88:	4413      	add	r3, r2
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8009b8e:	88ba      	ldrh	r2, [r7, #4]
 8009b90:	883b      	ldrh	r3, [r7, #0]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8009b98:	88ba      	ldrh	r2, [r7, #4]
 8009b9a:	883b      	ldrh	r3, [r7, #0]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8009ba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ba6:	4a33      	ldr	r2, [pc, #204]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009ba8:	8812      	ldrh	r2, [r2, #0]
 8009baa:	4293      	cmp	r3, r2
 8009bac:	db5b      	blt.n	8009c66 <hagl_fill_rectangle+0x136>
 8009bae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009bb2:	4a30      	ldr	r2, [pc, #192]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009bb4:	8852      	ldrh	r2, [r2, #2]
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	db55      	blt.n	8009c66 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8009bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009bc0:	8892      	ldrh	r2, [r2, #4]
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	dc51      	bgt.n	8009c6a <hagl_fill_rectangle+0x13a>
 8009bc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009bca:	4a2a      	ldr	r2, [pc, #168]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009bcc:	88d2      	ldrh	r2, [r2, #6]
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	dc4b      	bgt.n	8009c6a <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8009bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bd6:	4a27      	ldr	r2, [pc, #156]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009bd8:	8812      	ldrh	r2, [r2, #0]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff fe50 	bl	8009882 <max>
 8009be2:	4603      	mov	r3, r0
 8009be4:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8009be6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009bea:	4a22      	ldr	r2, [pc, #136]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009bec:	8852      	ldrh	r2, [r2, #2]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff fe46 	bl	8009882 <max>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8009bfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009c00:	8892      	ldrh	r2, [r2, #4]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff fe2a 	bl	800985e <min>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8009c0e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009c12:	4a18      	ldr	r2, [pc, #96]	@ (8009c74 <hagl_fill_rectangle+0x144>)
 8009c14:	88d2      	ldrh	r2, [r2, #6]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fe20 	bl	800985e <min>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8009c22:	887a      	ldrh	r2, [r7, #2]
 8009c24:	88fb      	ldrh	r3, [r7, #6]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8009c2e:	883a      	ldrh	r2, [r7, #0]
 8009c30:	88bb      	ldrh	r3, [r7, #4]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	3301      	adds	r3, #1
 8009c38:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	81fb      	strh	r3, [r7, #14]
 8009c3e:	e00d      	b.n	8009c5c <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8009c40:	88ba      	ldrh	r2, [r7, #4]
 8009c42:	89fb      	ldrh	r3, [r7, #14]
 8009c44:	4413      	add	r3, r2
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	b219      	sxth	r1, r3
 8009c4a:	8c3b      	ldrh	r3, [r7, #32]
 8009c4c:	89ba      	ldrh	r2, [r7, #12]
 8009c4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009c52:	f7ff fe7d 	bl	8009950 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8009c56:	89fb      	ldrh	r3, [r7, #14]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	81fb      	strh	r3, [r7, #14]
 8009c5c:	89fa      	ldrh	r2, [r7, #14]
 8009c5e:	897b      	ldrh	r3, [r7, #10]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3ed      	bcc.n	8009c40 <hagl_fill_rectangle+0x110>
 8009c64:	e002      	b.n	8009c6c <hagl_fill_rectangle+0x13c>
        return;
 8009c66:	bf00      	nop
 8009c68:	e000      	b.n	8009c6c <hagl_fill_rectangle+0x13c>
        return;
 8009c6a:	bf00      	nop
#endif
    }
}
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd90      	pop	{r4, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000018 	.word	0x20000018

08009c78 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8009c78:	b590      	push	{r4, r7, lr}
 8009c7a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8009c86:	f844 0c24 	str.w	r0, [r4, #-36]
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009c94:	4622      	mov	r2, r4
 8009c96:	f823 2c26 	strh.w	r2, [r3, #-38]
 8009c9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	f823 2c28 	strh.w	r2, [r3, #-40]
 8009ca4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009ca8:	460a      	mov	r2, r1
 8009caa:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8009cae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff fd39 	bl	800973a <fontx_glyph>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009cce:	f102 0209 	add.w	r2, r2, #9
 8009cd2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8009cd4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009cd8:	f103 0309 	add.w	r3, r3, #9
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <hagl_put_char+0x6e>
        return 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e0c0      	b.n	8009e68 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8009ce6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009cea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009cf4:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8009cf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009cfc:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8009d00:	461a      	mov	r2, r3
 8009d02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009d06:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8009d0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009d0e:	2210      	movs	r2, #16
 8009d10:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8009d14:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009d18:	3a08      	subs	r2, #8
 8009d1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009d1e:	3b18      	subs	r3, #24
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff fb71 	bl	800940a <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8009d28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009d2c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8009d30:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009d34:	f102 020c 	add.w	r2, r2, #12
 8009d38:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009d40:	f102 020b 	add.w	r2, r2, #11
 8009d44:	7013      	strb	r3, [r2, #0]
 8009d46:	e071      	b.n	8009e2c <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009d4e:	f102 020a 	add.w	r2, r2, #10
 8009d52:	7013      	strb	r3, [r2, #0]
 8009d54:	e047      	b.n	8009de6 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8009d56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009d5a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	b25a      	sxtb	r2, r3
 8009d62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009d66:	f103 030a 	add.w	r3, r3, #10
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	2180      	movs	r1, #128	@ 0x80
 8009d72:	fa41 f303 	asr.w	r3, r1, r3
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	4013      	ands	r3, r2
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009d80:	f102 0208 	add.w	r2, r2, #8
 8009d84:	7013      	strb	r3, [r2, #0]
            if (set) {
 8009d86:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009d8a:	f103 0308 	add.w	r3, r3, #8
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d010      	beq.n	8009db6 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8009d94:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009d98:	f103 030c 	add.w	r3, r3, #12
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	1c9a      	adds	r2, r3, #2
 8009da0:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8009da4:	f101 010c 	add.w	r1, r1, #12
 8009da8:	600a      	str	r2, [r1, #0]
 8009daa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009dae:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	e00c      	b.n	8009dd0 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8009db6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009dba:	f103 030c 	add.w	r3, r3, #12
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	1c9a      	adds	r2, r3, #2
 8009dc2:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8009dc6:	f101 010c 	add.w	r1, r1, #12
 8009dca:	600a      	str	r2, [r1, #0]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8009dd0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009dd4:	f103 030a 	add.w	r3, r3, #10
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009de0:	f102 020a 	add.w	r2, r2, #10
 8009de4:	7013      	strb	r3, [r2, #0]
 8009de6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009dea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8009dee:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009df2:	f102 020a 	add.w	r2, r2, #10
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d3ac      	bcc.n	8009d56 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8009dfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009e00:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009e04:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009e08:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009e12:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8009e16:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8009e1a:	f103 030b 	add.w	r3, r3, #11
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	3301      	adds	r3, #1
 8009e22:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009e26:	f102 020b 	add.w	r2, r2, #11
 8009e2a:	7013      	strb	r3, [r2, #0]
 8009e2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009e30:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8009e34:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009e38:	f102 020b 	add.w	r2, r2, #11
 8009e3c:	7812      	ldrb	r2, [r2, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d382      	bcc.n	8009d48 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8009e42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009e46:	3b18      	subs	r3, #24
 8009e48:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009e4c:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8009e50:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009e54:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f000 f85a 	bl	8009f12 <hagl_blit>

    return bitmap.width;
 8009e5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009e62:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009e66:	b2db      	uxtb	r3, r3
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd90      	pop	{r4, r7, pc}

08009e74 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08c      	sub	sp, #48	@ 0x30
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	4608      	mov	r0, r1
 8009e7e:	4611      	mov	r1, r2
 8009e80:	461a      	mov	r2, r3
 8009e82:	4603      	mov	r3, r0
 8009e84:	817b      	strh	r3, [r7, #10]
 8009e86:	460b      	mov	r3, r1
 8009e88:	813b      	strh	r3, [r7, #8]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8009e8e:	897b      	ldrh	r3, [r7, #10]
 8009e90:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff fc2e 	bl	80096fa <fontx_meta>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8009ea4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <hagl_put_text+0x3c>
        return 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e02c      	b.n	8009f0a <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	1d1a      	adds	r2, r3, #4
 8009eb4:	60fa      	str	r2, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	2b0d      	cmp	r3, #13
 8009ebe:	d002      	beq.n	8009ec6 <hagl_put_text+0x52>
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	2b0a      	cmp	r3, #10
 8009ec4:	d108      	bne.n	8009ed8 <hagl_put_text+0x64>
            x0 = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8009eca:	7fbb      	ldrb	r3, [r7, #30]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	893b      	ldrh	r3, [r7, #8]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	813b      	strh	r3, [r7, #8]
 8009ed6:	e010      	b.n	8009efa <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8009ed8:	88f8      	ldrh	r0, [r7, #6]
 8009eda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009ede:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	6a38      	ldr	r0, [r7, #32]
 8009eea:	f7ff fec5 	bl	8009c78 <hagl_put_char>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d6      	bne.n	8009eb0 <hagl_put_text+0x3c>

    return x0 - original;
 8009f02:	897a      	ldrh	r2, [r7, #10]
 8009f04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	b29b      	uxth	r3, r3
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3728      	adds	r7, #40	@ 0x28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b086      	sub	sp, #24
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	4603      	mov	r3, r0
 8009f1a:	603a      	str	r2, [r7, #0]
 8009f1c:	80fb      	strh	r3, [r7, #6]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8009f28:	2300      	movs	r3, #0
 8009f2a:	827b      	strh	r3, [r7, #18]
 8009f2c:	e020      	b.n	8009f70 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8009f2e:	2300      	movs	r3, #0
 8009f30:	823b      	strh	r3, [r7, #16]
 8009f32:	e015      	b.n	8009f60 <hagl_blit+0x4e>
            color = *(ptr++);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	1c9a      	adds	r2, r3, #2
 8009f38:	617a      	str	r2, [r7, #20]
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	8a3b      	ldrh	r3, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	b218      	sxth	r0, r3
 8009f48:	88ba      	ldrh	r2, [r7, #4]
 8009f4a:	8a7b      	ldrh	r3, [r7, #18]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	b21b      	sxth	r3, r3
 8009f52:	89fa      	ldrh	r2, [r7, #14]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7ff fcc9 	bl	80098ec <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8009f5a:	8a3b      	ldrh	r3, [r7, #16]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	823b      	strh	r3, [r7, #16]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	8a3a      	ldrh	r2, [r7, #16]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d3e4      	bcc.n	8009f34 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8009f6a:	8a7b      	ldrh	r3, [r7, #18]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	827b      	strh	r3, [r7, #18]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	8a7a      	ldrh	r2, [r7, #18]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d3d9      	bcc.n	8009f2e <hagl_blit+0x1c>
        }
    }
#endif
};
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8009f8a:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <hagl_clear_screen+0x50>)
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8009f90:	4b10      	ldr	r3, [pc, #64]	@ (8009fd4 <hagl_clear_screen+0x50>)
 8009f92:	885b      	ldrh	r3, [r3, #2]
 8009f94:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8009f96:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd4 <hagl_clear_screen+0x50>)
 8009f98:	889b      	ldrh	r3, [r3, #4]
 8009f9a:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd4 <hagl_clear_screen+0x50>)
 8009f9e:	88db      	ldrh	r3, [r3, #6]
 8009fa0:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 8009fa2:	237f      	movs	r3, #127	@ 0x7f
 8009fa4:	229f      	movs	r2, #159	@ 0x9f
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f7ff fc7d 	bl	80098a8 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	237f      	movs	r3, #127	@ 0x7f
 8009fb4:	229f      	movs	r2, #159	@ 0x9f
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f7ff fdb9 	bl	8009b30 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 8009fbe:	883b      	ldrh	r3, [r7, #0]
 8009fc0:	887a      	ldrh	r2, [r7, #2]
 8009fc2:	88b9      	ldrh	r1, [r7, #4]
 8009fc4:	88f8      	ldrh	r0, [r7, #6]
 8009fc6:	f7ff fc6f 	bl	80098a8 <hagl_set_clip_window>
#endif
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000018 	.word	0x20000018

08009fd8 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4623      	mov	r3, r4
 8009fe8:	80fb      	strh	r3, [r7, #6]
 8009fea:	4603      	mov	r3, r0
 8009fec:	80bb      	strh	r3, [r7, #4]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	807b      	strh	r3, [r7, #2]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8009ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	dd0e      	ble.n	800a020 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800a002:	88fa      	ldrh	r2, [r7, #6]
 800a004:	887b      	ldrh	r3, [r7, #2]
 800a006:	4413      	add	r3, r2
 800a008:	b29b      	uxth	r3, r3
 800a00a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a00c:	88fa      	ldrh	r2, [r7, #6]
 800a00e:	887b      	ldrh	r3, [r7, #2]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	b29b      	uxth	r3, r3
 800a014:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a016:	88fa      	ldrh	r2, [r7, #6]
 800a018:	887b      	ldrh	r3, [r7, #2]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a020:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a024:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a028:	429a      	cmp	r2, r3
 800a02a:	dd0e      	ble.n	800a04a <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800a02c:	88ba      	ldrh	r2, [r7, #4]
 800a02e:	883b      	ldrh	r3, [r7, #0]
 800a030:	4413      	add	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a036:	88ba      	ldrh	r2, [r7, #4]
 800a038:	883b      	ldrh	r3, [r7, #0]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a040:	88ba      	ldrh	r2, [r7, #4]
 800a042:	883b      	ldrh	r3, [r7, #0]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a04a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a04e:	4a52      	ldr	r2, [pc, #328]	@ (800a198 <hagl_draw_rounded_rectangle+0x1c0>)
 800a050:	8812      	ldrh	r2, [r2, #0]
 800a052:	4293      	cmp	r3, r2
 800a054:	f2c0 8153 	blt.w	800a2fe <hagl_draw_rounded_rectangle+0x326>
 800a058:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a05c:	4a4e      	ldr	r2, [pc, #312]	@ (800a198 <hagl_draw_rounded_rectangle+0x1c0>)
 800a05e:	8852      	ldrh	r2, [r2, #2]
 800a060:	4293      	cmp	r3, r2
 800a062:	f2c0 814c 	blt.w	800a2fe <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a06a:	4a4b      	ldr	r2, [pc, #300]	@ (800a198 <hagl_draw_rounded_rectangle+0x1c0>)
 800a06c:	8892      	ldrh	r2, [r2, #4]
 800a06e:	4293      	cmp	r3, r2
 800a070:	f300 8147 	bgt.w	800a302 <hagl_draw_rounded_rectangle+0x32a>
 800a074:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a078:	4a47      	ldr	r2, [pc, #284]	@ (800a198 <hagl_draw_rounded_rectangle+0x1c0>)
 800a07a:	88d2      	ldrh	r2, [r2, #6]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	f300 8140 	bgt.w	800a302 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800a082:	887a      	ldrh	r2, [r7, #2]
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3301      	adds	r3, #1
 800a08c:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800a08e:	883a      	ldrh	r2, [r7, #0]
 800a090:	88bb      	ldrh	r3, [r7, #4]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	b29b      	uxth	r3, r3
 800a096:	3301      	adds	r3, #1
 800a098:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800a09a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 800a09e:	8a3b      	ldrh	r3, [r7, #16]
 800a0a0:	085b      	lsrs	r3, r3, #1
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	89fb      	ldrh	r3, [r7, #14]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7ff fbd5 	bl	800985e <min>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff fbd0 	bl	800985e <min>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	853b      	strh	r3, [r7, #40]	@ 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0c6:	4413      	add	r3, r2
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	b218      	sxth	r0, r3
 800a0cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	8a3a      	ldrh	r2, [r7, #16]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a0da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a0de:	f7ff fc37 	bl	8009950 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800a0e2:	88fa      	ldrh	r2, [r7, #6]
 800a0e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0e6:	4413      	add	r3, r2
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	b218      	sxth	r0, r3
 800a0ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	8a3a      	ldrh	r2, [r7, #16]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a0fa:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a0fe:	f7ff fc27 	bl	8009950 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800a102:	88ba      	ldrh	r2, [r7, #4]
 800a104:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a106:	4413      	add	r3, r2
 800a108:	b29b      	uxth	r3, r3
 800a10a:	b219      	sxth	r1, r3
 800a10c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	b29b      	uxth	r3, r3
 800a112:	89fa      	ldrh	r2, [r7, #14]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	b29a      	uxth	r2, r3
 800a118:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a11a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a11e:	f7ff fc3a 	bl	8009996 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800a122:	88ba      	ldrh	r2, [r7, #4]
 800a124:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a126:	4413      	add	r3, r2
 800a128:	b29b      	uxth	r3, r3
 800a12a:	b219      	sxth	r1, r3
 800a12c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	b29b      	uxth	r3, r3
 800a132:	89fa      	ldrh	r2, [r7, #14]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	b29a      	uxth	r2, r3
 800a138:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a13a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a13e:	f7ff fc2a 	bl	8009996 <hagl_draw_vline>

    x = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	82fb      	strh	r3, [r7, #22]
    y = r;
 800a146:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a148:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800a14a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f1c3 0303 	rsb	r3, r3, #3
 800a154:	b29b      	uxth	r3, r3
 800a156:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800a158:	e0c9      	b.n	800a2ee <hagl_draw_rounded_rectangle+0x316>
        x++;
 800a15a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3301      	adds	r3, #1
 800a162:	b29b      	uxth	r3, r3
 800a164:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800a166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dd16      	ble.n	800a19c <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800a16e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29b      	uxth	r3, r3
 800a178:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800a17a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a17e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	b29b      	uxth	r3, r3
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	8a7b      	ldrh	r3, [r7, #18]
 800a18c:	4413      	add	r3, r2
 800a18e:	b29b      	uxth	r3, r3
 800a190:	330a      	adds	r3, #10
 800a192:	b29b      	uxth	r3, r3
 800a194:	827b      	strh	r3, [r7, #18]
 800a196:	e00a      	b.n	800a1ae <hagl_draw_rounded_rectangle+0x1d6>
 800a198:	20000018 	.word	0x20000018
        } else {
            d = d + 4 * x + 6;
 800a19c:	8afb      	ldrh	r3, [r7, #22]
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	8a7b      	ldrh	r3, [r7, #18]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	3306      	adds	r3, #6
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800a1ae:	887a      	ldrh	r2, [r7, #2]
 800a1b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	b218      	sxth	r0, r3
 800a1be:	88ba      	ldrh	r2, [r7, #4]
 800a1c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1c2:	4413      	add	r3, r2
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	8abb      	ldrh	r3, [r7, #20]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	f7ff fb8b 	bl	80098ec <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800a1d6:	887a      	ldrh	r2, [r7, #2]
 800a1d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	8abb      	ldrh	r3, [r7, #20]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	b218      	sxth	r0, r3
 800a1e6:	88ba      	ldrh	r2, [r7, #4]
 800a1e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1ea:	4413      	add	r3, r2
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	8afb      	ldrh	r3, [r7, #22]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	b21b      	sxth	r3, r3
 800a1f6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f7ff fb77 	bl	80098ec <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800a1fe:	88fa      	ldrh	r2, [r7, #6]
 800a200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a202:	4413      	add	r3, r2
 800a204:	b29a      	uxth	r2, r3
 800a206:	8afb      	ldrh	r3, [r7, #22]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	b218      	sxth	r0, r3
 800a20e:	88ba      	ldrh	r2, [r7, #4]
 800a210:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a212:	4413      	add	r3, r2
 800a214:	b29a      	uxth	r2, r3
 800a216:	8abb      	ldrh	r3, [r7, #20]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	b21b      	sxth	r3, r3
 800a21e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a220:	4619      	mov	r1, r3
 800a222:	f7ff fb63 	bl	80098ec <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a22a:	4413      	add	r3, r2
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	8abb      	ldrh	r3, [r7, #20]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	b29b      	uxth	r3, r3
 800a234:	b218      	sxth	r0, r3
 800a236:	88ba      	ldrh	r2, [r7, #4]
 800a238:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a23a:	4413      	add	r3, r2
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	8afb      	ldrh	r3, [r7, #22]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	b29b      	uxth	r3, r3
 800a244:	b21b      	sxth	r3, r3
 800a246:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a248:	4619      	mov	r1, r3
 800a24a:	f7ff fb4f 	bl	80098ec <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800a24e:	887a      	ldrh	r2, [r7, #2]
 800a250:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	b29a      	uxth	r2, r3
 800a256:	8afb      	ldrh	r3, [r7, #22]
 800a258:	4413      	add	r3, r2
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	b218      	sxth	r0, r3
 800a25e:	883a      	ldrh	r2, [r7, #0]
 800a260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	b29a      	uxth	r2, r3
 800a266:	8abb      	ldrh	r3, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a270:	4619      	mov	r1, r3
 800a272:	f7ff fb3b 	bl	80098ec <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800a276:	887a      	ldrh	r2, [r7, #2]
 800a278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	8abb      	ldrh	r3, [r7, #20]
 800a280:	4413      	add	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	b218      	sxth	r0, r3
 800a286:	883a      	ldrh	r2, [r7, #0]
 800a288:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	8afb      	ldrh	r3, [r7, #22]
 800a290:	4413      	add	r3, r2
 800a292:	b29b      	uxth	r3, r3
 800a294:	b21b      	sxth	r3, r3
 800a296:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a298:	4619      	mov	r1, r3
 800a29a:	f7ff fb27 	bl	80098ec <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a2a2:	4413      	add	r3, r2
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	8afb      	ldrh	r3, [r7, #22]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	b218      	sxth	r0, r3
 800a2ae:	883a      	ldrh	r2, [r7, #0]
 800a2b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	8abb      	ldrh	r3, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b21b      	sxth	r3, r3
 800a2be:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f7ff fb13 	bl	80098ec <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a2ca:	4413      	add	r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	8abb      	ldrh	r3, [r7, #20]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	b218      	sxth	r0, r3
 800a2d6:	883a      	ldrh	r2, [r7, #0]
 800a2d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	8afb      	ldrh	r3, [r7, #22]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	b21b      	sxth	r3, r3
 800a2e6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f7ff faff 	bl	80098ec <hagl_put_pixel>
    while (y >= x) {
 800a2ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a2f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	f6bf af2f 	bge.w	800a15a <hagl_draw_rounded_rectangle+0x182>
 800a2fc:	e002      	b.n	800a304 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800a2fe:	bf00      	nop
 800a300:	e000      	b.n	800a304 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800a302:	bf00      	nop
    }
};
 800a304:	371c      	adds	r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	bd90      	pop	{r4, r7, pc}
 800a30a:	bf00      	nop

0800a30c <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	71fb      	strb	r3, [r7, #7]
 800a316:	460b      	mov	r3, r1
 800a318:	71bb      	strb	r3, [r7, #6]
 800a31a:	4613      	mov	r3, r2
 800a31c:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b21b      	sxth	r3, r3
 800a324:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a328:	f023 0307 	bic.w	r3, r3, #7
 800a32c:	b21a      	sxth	r2, r3
 800a32e:	79bb      	ldrb	r3, [r7, #6]
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	b21b      	sxth	r3, r3
 800a334:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800a338:	b21b      	sxth	r3, r3
 800a33a:	4313      	orrs	r3, r2
 800a33c:	b21a      	sxth	r2, r3
 800a33e:	797b      	ldrb	r3, [r7, #5]
 800a340:	08db      	lsrs	r3, r3, #3
 800a342:	b2db      	uxtb	r3, r3
 800a344:	b21b      	sxth	r3, r3
 800a346:	4313      	orrs	r3, r2
 800a348:	b21b      	sxth	r3, r3
 800a34a:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800a34c:	89fb      	ldrh	r3, [r7, #14]
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	b21a      	sxth	r2, r3
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	b29b      	uxth	r3, r3
 800a358:	b21b      	sxth	r3, r3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	b21b      	sxth	r3, r3
 800a35e:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800a360:	89fb      	ldrh	r3, [r7, #14]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <__cvt>:
 800a36e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a372:	ec57 6b10 	vmov	r6, r7, d0
 800a376:	2f00      	cmp	r7, #0
 800a378:	460c      	mov	r4, r1
 800a37a:	4619      	mov	r1, r3
 800a37c:	463b      	mov	r3, r7
 800a37e:	bfbb      	ittet	lt
 800a380:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a384:	461f      	movlt	r7, r3
 800a386:	2300      	movge	r3, #0
 800a388:	232d      	movlt	r3, #45	@ 0x2d
 800a38a:	700b      	strb	r3, [r1, #0]
 800a38c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a38e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a392:	4691      	mov	r9, r2
 800a394:	f023 0820 	bic.w	r8, r3, #32
 800a398:	bfbc      	itt	lt
 800a39a:	4632      	movlt	r2, r6
 800a39c:	4616      	movlt	r6, r2
 800a39e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3a2:	d005      	beq.n	800a3b0 <__cvt+0x42>
 800a3a4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a3a8:	d100      	bne.n	800a3ac <__cvt+0x3e>
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	2102      	movs	r1, #2
 800a3ae:	e000      	b.n	800a3b2 <__cvt+0x44>
 800a3b0:	2103      	movs	r1, #3
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	ab02      	add	r3, sp, #8
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	ec47 6b10 	vmov	d0, r6, r7
 800a3be:	4653      	mov	r3, sl
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	f001 f84d 	bl	800b460 <_dtoa_r>
 800a3c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	d119      	bne.n	800a402 <__cvt+0x94>
 800a3ce:	f019 0f01 	tst.w	r9, #1
 800a3d2:	d00e      	beq.n	800a3f2 <__cvt+0x84>
 800a3d4:	eb00 0904 	add.w	r9, r0, r4
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3e4:	b108      	cbz	r0, 800a3ea <__cvt+0x7c>
 800a3e6:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3ea:	2230      	movs	r2, #48	@ 0x30
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	454b      	cmp	r3, r9
 800a3f0:	d31e      	bcc.n	800a430 <__cvt+0xc2>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3f6:	1b5b      	subs	r3, r3, r5
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	b004      	add	sp, #16
 800a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a402:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a406:	eb00 0904 	add.w	r9, r0, r4
 800a40a:	d1e5      	bne.n	800a3d8 <__cvt+0x6a>
 800a40c:	7803      	ldrb	r3, [r0, #0]
 800a40e:	2b30      	cmp	r3, #48	@ 0x30
 800a410:	d10a      	bne.n	800a428 <__cvt+0xba>
 800a412:	2200      	movs	r2, #0
 800a414:	2300      	movs	r3, #0
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800a41e:	b918      	cbnz	r0, 800a428 <__cvt+0xba>
 800a420:	f1c4 0401 	rsb	r4, r4, #1
 800a424:	f8ca 4000 	str.w	r4, [sl]
 800a428:	f8da 3000 	ldr.w	r3, [sl]
 800a42c:	4499      	add	r9, r3
 800a42e:	e7d3      	b.n	800a3d8 <__cvt+0x6a>
 800a430:	1c59      	adds	r1, r3, #1
 800a432:	9103      	str	r1, [sp, #12]
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e7d9      	b.n	800a3ec <__cvt+0x7e>

0800a438 <__exponent>:
 800a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a43a:	2900      	cmp	r1, #0
 800a43c:	bfba      	itte	lt
 800a43e:	4249      	neglt	r1, r1
 800a440:	232d      	movlt	r3, #45	@ 0x2d
 800a442:	232b      	movge	r3, #43	@ 0x2b
 800a444:	2909      	cmp	r1, #9
 800a446:	7002      	strb	r2, [r0, #0]
 800a448:	7043      	strb	r3, [r0, #1]
 800a44a:	dd29      	ble.n	800a4a0 <__exponent+0x68>
 800a44c:	f10d 0307 	add.w	r3, sp, #7
 800a450:	461d      	mov	r5, r3
 800a452:	270a      	movs	r7, #10
 800a454:	461a      	mov	r2, r3
 800a456:	fbb1 f6f7 	udiv	r6, r1, r7
 800a45a:	fb07 1416 	mls	r4, r7, r6, r1
 800a45e:	3430      	adds	r4, #48	@ 0x30
 800a460:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a464:	460c      	mov	r4, r1
 800a466:	2c63      	cmp	r4, #99	@ 0x63
 800a468:	f103 33ff 	add.w	r3, r3, #4294967295
 800a46c:	4631      	mov	r1, r6
 800a46e:	dcf1      	bgt.n	800a454 <__exponent+0x1c>
 800a470:	3130      	adds	r1, #48	@ 0x30
 800a472:	1e94      	subs	r4, r2, #2
 800a474:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a478:	1c41      	adds	r1, r0, #1
 800a47a:	4623      	mov	r3, r4
 800a47c:	42ab      	cmp	r3, r5
 800a47e:	d30a      	bcc.n	800a496 <__exponent+0x5e>
 800a480:	f10d 0309 	add.w	r3, sp, #9
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	42ac      	cmp	r4, r5
 800a488:	bf88      	it	hi
 800a48a:	2300      	movhi	r3, #0
 800a48c:	3302      	adds	r3, #2
 800a48e:	4403      	add	r3, r0
 800a490:	1a18      	subs	r0, r3, r0
 800a492:	b003      	add	sp, #12
 800a494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a496:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a49a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a49e:	e7ed      	b.n	800a47c <__exponent+0x44>
 800a4a0:	2330      	movs	r3, #48	@ 0x30
 800a4a2:	3130      	adds	r1, #48	@ 0x30
 800a4a4:	7083      	strb	r3, [r0, #2]
 800a4a6:	70c1      	strb	r1, [r0, #3]
 800a4a8:	1d03      	adds	r3, r0, #4
 800a4aa:	e7f1      	b.n	800a490 <__exponent+0x58>

0800a4ac <_printf_float>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	b08d      	sub	sp, #52	@ 0x34
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	461f      	mov	r7, r3
 800a4bc:	4605      	mov	r5, r0
 800a4be:	f000 febf 	bl	800b240 <_localeconv_r>
 800a4c2:	6803      	ldr	r3, [r0, #0]
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7f5 fed2 	bl	8000270 <strlen>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d4:	9005      	str	r0, [sp, #20]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	f103 0208 	add.w	r2, r3, #8
 800a4e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4e4:	f8d4 b000 	ldr.w	fp, [r4]
 800a4e8:	f8c8 2000 	str.w	r2, [r8]
 800a4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4f4:	9307      	str	r3, [sp, #28]
 800a4f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a502:	4b9c      	ldr	r3, [pc, #624]	@ (800a774 <_printf_float+0x2c8>)
 800a504:	f04f 32ff 	mov.w	r2, #4294967295
 800a508:	f7f6 fb10 	bl	8000b2c <__aeabi_dcmpun>
 800a50c:	bb70      	cbnz	r0, 800a56c <_printf_float+0xc0>
 800a50e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a512:	4b98      	ldr	r3, [pc, #608]	@ (800a774 <_printf_float+0x2c8>)
 800a514:	f04f 32ff 	mov.w	r2, #4294967295
 800a518:	f7f6 faea 	bl	8000af0 <__aeabi_dcmple>
 800a51c:	bb30      	cbnz	r0, 800a56c <_printf_float+0xc0>
 800a51e:	2200      	movs	r2, #0
 800a520:	2300      	movs	r3, #0
 800a522:	4640      	mov	r0, r8
 800a524:	4649      	mov	r1, r9
 800a526:	f7f6 fad9 	bl	8000adc <__aeabi_dcmplt>
 800a52a:	b110      	cbz	r0, 800a532 <_printf_float+0x86>
 800a52c:	232d      	movs	r3, #45	@ 0x2d
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a532:	4a91      	ldr	r2, [pc, #580]	@ (800a778 <_printf_float+0x2cc>)
 800a534:	4b91      	ldr	r3, [pc, #580]	@ (800a77c <_printf_float+0x2d0>)
 800a536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a53a:	bf94      	ite	ls
 800a53c:	4690      	movls	r8, r2
 800a53e:	4698      	movhi	r8, r3
 800a540:	2303      	movs	r3, #3
 800a542:	6123      	str	r3, [r4, #16]
 800a544:	f02b 0304 	bic.w	r3, fp, #4
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	f04f 0900 	mov.w	r9, #0
 800a54e:	9700      	str	r7, [sp, #0]
 800a550:	4633      	mov	r3, r6
 800a552:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f9d2 	bl	800a900 <_printf_common>
 800a55c:	3001      	adds	r0, #1
 800a55e:	f040 808d 	bne.w	800a67c <_printf_float+0x1d0>
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	b00d      	add	sp, #52	@ 0x34
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	4642      	mov	r2, r8
 800a56e:	464b      	mov	r3, r9
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f6 fada 	bl	8000b2c <__aeabi_dcmpun>
 800a578:	b140      	cbz	r0, 800a58c <_printf_float+0xe0>
 800a57a:	464b      	mov	r3, r9
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	bfbc      	itt	lt
 800a580:	232d      	movlt	r3, #45	@ 0x2d
 800a582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a586:	4a7e      	ldr	r2, [pc, #504]	@ (800a780 <_printf_float+0x2d4>)
 800a588:	4b7e      	ldr	r3, [pc, #504]	@ (800a784 <_printf_float+0x2d8>)
 800a58a:	e7d4      	b.n	800a536 <_printf_float+0x8a>
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a592:	9206      	str	r2, [sp, #24]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	d13b      	bne.n	800a610 <_printf_float+0x164>
 800a598:	2306      	movs	r3, #6
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a5a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a5ac:	ab09      	add	r3, sp, #36	@ 0x24
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	6861      	ldr	r1, [r4, #4]
 800a5b2:	ec49 8b10 	vmov	d0, r8, r9
 800a5b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f7ff fed7 	bl	800a36e <__cvt>
 800a5c0:	9b06      	ldr	r3, [sp, #24]
 800a5c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5c4:	2b47      	cmp	r3, #71	@ 0x47
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	d129      	bne.n	800a61e <_printf_float+0x172>
 800a5ca:	1cc8      	adds	r0, r1, #3
 800a5cc:	db02      	blt.n	800a5d4 <_printf_float+0x128>
 800a5ce:	6863      	ldr	r3, [r4, #4]
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	dd41      	ble.n	800a658 <_printf_float+0x1ac>
 800a5d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5d8:	fa5f fa8a 	uxtb.w	sl, sl
 800a5dc:	3901      	subs	r1, #1
 800a5de:	4652      	mov	r2, sl
 800a5e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5e6:	f7ff ff27 	bl	800a438 <__exponent>
 800a5ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5ec:	1813      	adds	r3, r2, r0
 800a5ee:	2a01      	cmp	r2, #1
 800a5f0:	4681      	mov	r9, r0
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	dc02      	bgt.n	800a5fc <_printf_float+0x150>
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	07d2      	lsls	r2, r2, #31
 800a5fa:	d501      	bpl.n	800a600 <_printf_float+0x154>
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0a2      	beq.n	800a54e <_printf_float+0xa2>
 800a608:	232d      	movs	r3, #45	@ 0x2d
 800a60a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a60e:	e79e      	b.n	800a54e <_printf_float+0xa2>
 800a610:	9a06      	ldr	r2, [sp, #24]
 800a612:	2a47      	cmp	r2, #71	@ 0x47
 800a614:	d1c2      	bne.n	800a59c <_printf_float+0xf0>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1c0      	bne.n	800a59c <_printf_float+0xf0>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e7bd      	b.n	800a59a <_printf_float+0xee>
 800a61e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a622:	d9db      	bls.n	800a5dc <_printf_float+0x130>
 800a624:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a628:	d118      	bne.n	800a65c <_printf_float+0x1b0>
 800a62a:	2900      	cmp	r1, #0
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	dd0b      	ble.n	800a648 <_printf_float+0x19c>
 800a630:	6121      	str	r1, [r4, #16]
 800a632:	b913      	cbnz	r3, 800a63a <_printf_float+0x18e>
 800a634:	6822      	ldr	r2, [r4, #0]
 800a636:	07d0      	lsls	r0, r2, #31
 800a638:	d502      	bpl.n	800a640 <_printf_float+0x194>
 800a63a:	3301      	adds	r3, #1
 800a63c:	440b      	add	r3, r1
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a642:	f04f 0900 	mov.w	r9, #0
 800a646:	e7db      	b.n	800a600 <_printf_float+0x154>
 800a648:	b913      	cbnz	r3, 800a650 <_printf_float+0x1a4>
 800a64a:	6822      	ldr	r2, [r4, #0]
 800a64c:	07d2      	lsls	r2, r2, #31
 800a64e:	d501      	bpl.n	800a654 <_printf_float+0x1a8>
 800a650:	3302      	adds	r3, #2
 800a652:	e7f4      	b.n	800a63e <_printf_float+0x192>
 800a654:	2301      	movs	r3, #1
 800a656:	e7f2      	b.n	800a63e <_printf_float+0x192>
 800a658:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a65e:	4299      	cmp	r1, r3
 800a660:	db05      	blt.n	800a66e <_printf_float+0x1c2>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	6121      	str	r1, [r4, #16]
 800a666:	07d8      	lsls	r0, r3, #31
 800a668:	d5ea      	bpl.n	800a640 <_printf_float+0x194>
 800a66a:	1c4b      	adds	r3, r1, #1
 800a66c:	e7e7      	b.n	800a63e <_printf_float+0x192>
 800a66e:	2900      	cmp	r1, #0
 800a670:	bfd4      	ite	le
 800a672:	f1c1 0202 	rsble	r2, r1, #2
 800a676:	2201      	movgt	r2, #1
 800a678:	4413      	add	r3, r2
 800a67a:	e7e0      	b.n	800a63e <_printf_float+0x192>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	055a      	lsls	r2, r3, #21
 800a680:	d407      	bmi.n	800a692 <_printf_float+0x1e6>
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	4642      	mov	r2, r8
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	d12b      	bne.n	800a6e8 <_printf_float+0x23c>
 800a690:	e767      	b.n	800a562 <_printf_float+0xb6>
 800a692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a696:	f240 80dd 	bls.w	800a854 <_printf_float+0x3a8>
 800a69a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f7f6 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d033      	beq.n	800a712 <_printf_float+0x266>
 800a6aa:	4a37      	ldr	r2, [pc, #220]	@ (800a788 <_printf_float+0x2dc>)
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f43f af54 	beq.w	800a562 <_printf_float+0xb6>
 800a6ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a6be:	4543      	cmp	r3, r8
 800a6c0:	db02      	blt.n	800a6c8 <_printf_float+0x21c>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	07d8      	lsls	r0, r3, #31
 800a6c6:	d50f      	bpl.n	800a6e8 <_printf_float+0x23c>
 800a6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	f43f af45 	beq.w	800a562 <_printf_float+0xb6>
 800a6d8:	f04f 0900 	mov.w	r9, #0
 800a6dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6e0:	f104 0a1a 	add.w	sl, r4, #26
 800a6e4:	45c8      	cmp	r8, r9
 800a6e6:	dc09      	bgt.n	800a6fc <_printf_float+0x250>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	079b      	lsls	r3, r3, #30
 800a6ec:	f100 8103 	bmi.w	800a8f6 <_printf_float+0x44a>
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	bfb8      	it	lt
 800a6f8:	4618      	movlt	r0, r3
 800a6fa:	e734      	b.n	800a566 <_printf_float+0xba>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4652      	mov	r2, sl
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f af2b 	beq.w	800a562 <_printf_float+0xb6>
 800a70c:	f109 0901 	add.w	r9, r9, #1
 800a710:	e7e8      	b.n	800a6e4 <_printf_float+0x238>
 800a712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc39      	bgt.n	800a78c <_printf_float+0x2e0>
 800a718:	4a1b      	ldr	r2, [pc, #108]	@ (800a788 <_printf_float+0x2dc>)
 800a71a:	2301      	movs	r3, #1
 800a71c:	4631      	mov	r1, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	f43f af1d 	beq.w	800a562 <_printf_float+0xb6>
 800a728:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a72c:	ea59 0303 	orrs.w	r3, r9, r3
 800a730:	d102      	bne.n	800a738 <_printf_float+0x28c>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	07d9      	lsls	r1, r3, #31
 800a736:	d5d7      	bpl.n	800a6e8 <_printf_float+0x23c>
 800a738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	47b8      	blx	r7
 800a742:	3001      	adds	r0, #1
 800a744:	f43f af0d 	beq.w	800a562 <_printf_float+0xb6>
 800a748:	f04f 0a00 	mov.w	sl, #0
 800a74c:	f104 0b1a 	add.w	fp, r4, #26
 800a750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a752:	425b      	negs	r3, r3
 800a754:	4553      	cmp	r3, sl
 800a756:	dc01      	bgt.n	800a75c <_printf_float+0x2b0>
 800a758:	464b      	mov	r3, r9
 800a75a:	e793      	b.n	800a684 <_printf_float+0x1d8>
 800a75c:	2301      	movs	r3, #1
 800a75e:	465a      	mov	r2, fp
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	47b8      	blx	r7
 800a766:	3001      	adds	r0, #1
 800a768:	f43f aefb 	beq.w	800a562 <_printf_float+0xb6>
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	e7ee      	b.n	800a750 <_printf_float+0x2a4>
 800a772:	bf00      	nop
 800a774:	7fefffff 	.word	0x7fefffff
 800a778:	08011130 	.word	0x08011130
 800a77c:	08011134 	.word	0x08011134
 800a780:	08011138 	.word	0x08011138
 800a784:	0801113c 	.word	0x0801113c
 800a788:	08011140 	.word	0x08011140
 800a78c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a78e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a792:	4553      	cmp	r3, sl
 800a794:	bfa8      	it	ge
 800a796:	4653      	movge	r3, sl
 800a798:	2b00      	cmp	r3, #0
 800a79a:	4699      	mov	r9, r3
 800a79c:	dc36      	bgt.n	800a80c <_printf_float+0x360>
 800a79e:	f04f 0b00 	mov.w	fp, #0
 800a7a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7a6:	f104 021a 	add.w	r2, r4, #26
 800a7aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a7ac:	9306      	str	r3, [sp, #24]
 800a7ae:	eba3 0309 	sub.w	r3, r3, r9
 800a7b2:	455b      	cmp	r3, fp
 800a7b4:	dc31      	bgt.n	800a81a <_printf_float+0x36e>
 800a7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b8:	459a      	cmp	sl, r3
 800a7ba:	dc3a      	bgt.n	800a832 <_printf_float+0x386>
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	07da      	lsls	r2, r3, #31
 800a7c0:	d437      	bmi.n	800a832 <_printf_float+0x386>
 800a7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c4:	ebaa 0903 	sub.w	r9, sl, r3
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ce:	4599      	cmp	r9, r3
 800a7d0:	bfa8      	it	ge
 800a7d2:	4699      	movge	r9, r3
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	dc33      	bgt.n	800a842 <_printf_float+0x396>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7e2:	f104 0b1a 	add.w	fp, r4, #26
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ec:	eba3 0309 	sub.w	r3, r3, r9
 800a7f0:	4543      	cmp	r3, r8
 800a7f2:	f77f af79 	ble.w	800a6e8 <_printf_float+0x23c>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	465a      	mov	r2, fp
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	f43f aeae 	beq.w	800a562 <_printf_float+0xb6>
 800a806:	f108 0801 	add.w	r8, r8, #1
 800a80a:	e7ec      	b.n	800a7e6 <_printf_float+0x33a>
 800a80c:	4642      	mov	r2, r8
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	d1c2      	bne.n	800a79e <_printf_float+0x2f2>
 800a818:	e6a3      	b.n	800a562 <_printf_float+0xb6>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	9206      	str	r2, [sp, #24]
 800a822:	47b8      	blx	r7
 800a824:	3001      	adds	r0, #1
 800a826:	f43f ae9c 	beq.w	800a562 <_printf_float+0xb6>
 800a82a:	9a06      	ldr	r2, [sp, #24]
 800a82c:	f10b 0b01 	add.w	fp, fp, #1
 800a830:	e7bb      	b.n	800a7aa <_printf_float+0x2fe>
 800a832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a836:	4631      	mov	r1, r6
 800a838:	4628      	mov	r0, r5
 800a83a:	47b8      	blx	r7
 800a83c:	3001      	adds	r0, #1
 800a83e:	d1c0      	bne.n	800a7c2 <_printf_float+0x316>
 800a840:	e68f      	b.n	800a562 <_printf_float+0xb6>
 800a842:	9a06      	ldr	r2, [sp, #24]
 800a844:	464b      	mov	r3, r9
 800a846:	4442      	add	r2, r8
 800a848:	4631      	mov	r1, r6
 800a84a:	4628      	mov	r0, r5
 800a84c:	47b8      	blx	r7
 800a84e:	3001      	adds	r0, #1
 800a850:	d1c3      	bne.n	800a7da <_printf_float+0x32e>
 800a852:	e686      	b.n	800a562 <_printf_float+0xb6>
 800a854:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a858:	f1ba 0f01 	cmp.w	sl, #1
 800a85c:	dc01      	bgt.n	800a862 <_printf_float+0x3b6>
 800a85e:	07db      	lsls	r3, r3, #31
 800a860:	d536      	bpl.n	800a8d0 <_printf_float+0x424>
 800a862:	2301      	movs	r3, #1
 800a864:	4642      	mov	r2, r8
 800a866:	4631      	mov	r1, r6
 800a868:	4628      	mov	r0, r5
 800a86a:	47b8      	blx	r7
 800a86c:	3001      	adds	r0, #1
 800a86e:	f43f ae78 	beq.w	800a562 <_printf_float+0xb6>
 800a872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a876:	4631      	mov	r1, r6
 800a878:	4628      	mov	r0, r5
 800a87a:	47b8      	blx	r7
 800a87c:	3001      	adds	r0, #1
 800a87e:	f43f ae70 	beq.w	800a562 <_printf_float+0xb6>
 800a882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a88e:	f7f6 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a892:	b9c0      	cbnz	r0, 800a8c6 <_printf_float+0x41a>
 800a894:	4653      	mov	r3, sl
 800a896:	f108 0201 	add.w	r2, r8, #1
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d10c      	bne.n	800a8be <_printf_float+0x412>
 800a8a4:	e65d      	b.n	800a562 <_printf_float+0xb6>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	465a      	mov	r2, fp
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b8      	blx	r7
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	f43f ae56 	beq.w	800a562 <_printf_float+0xb6>
 800a8b6:	f108 0801 	add.w	r8, r8, #1
 800a8ba:	45d0      	cmp	r8, sl
 800a8bc:	dbf3      	blt.n	800a8a6 <_printf_float+0x3fa>
 800a8be:	464b      	mov	r3, r9
 800a8c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8c4:	e6df      	b.n	800a686 <_printf_float+0x1da>
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	f104 0b1a 	add.w	fp, r4, #26
 800a8ce:	e7f4      	b.n	800a8ba <_printf_float+0x40e>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4642      	mov	r2, r8
 800a8d4:	e7e1      	b.n	800a89a <_printf_float+0x3ee>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	464a      	mov	r2, r9
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b8      	blx	r7
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	f43f ae3e 	beq.w	800a562 <_printf_float+0xb6>
 800a8e6:	f108 0801 	add.w	r8, r8, #1
 800a8ea:	68e3      	ldr	r3, [r4, #12]
 800a8ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8ee:	1a5b      	subs	r3, r3, r1
 800a8f0:	4543      	cmp	r3, r8
 800a8f2:	dcf0      	bgt.n	800a8d6 <_printf_float+0x42a>
 800a8f4:	e6fc      	b.n	800a6f0 <_printf_float+0x244>
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	f104 0919 	add.w	r9, r4, #25
 800a8fe:	e7f4      	b.n	800a8ea <_printf_float+0x43e>

0800a900 <_printf_common>:
 800a900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a904:	4616      	mov	r6, r2
 800a906:	4698      	mov	r8, r3
 800a908:	688a      	ldr	r2, [r1, #8]
 800a90a:	690b      	ldr	r3, [r1, #16]
 800a90c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a910:	4293      	cmp	r3, r2
 800a912:	bfb8      	it	lt
 800a914:	4613      	movlt	r3, r2
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a91c:	4607      	mov	r7, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b10a      	cbz	r2, 800a926 <_printf_common+0x26>
 800a922:	3301      	adds	r3, #1
 800a924:	6033      	str	r3, [r6, #0]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	0699      	lsls	r1, r3, #26
 800a92a:	bf42      	ittt	mi
 800a92c:	6833      	ldrmi	r3, [r6, #0]
 800a92e:	3302      	addmi	r3, #2
 800a930:	6033      	strmi	r3, [r6, #0]
 800a932:	6825      	ldr	r5, [r4, #0]
 800a934:	f015 0506 	ands.w	r5, r5, #6
 800a938:	d106      	bne.n	800a948 <_printf_common+0x48>
 800a93a:	f104 0a19 	add.w	sl, r4, #25
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	6832      	ldr	r2, [r6, #0]
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	42ab      	cmp	r3, r5
 800a946:	dc26      	bgt.n	800a996 <_printf_common+0x96>
 800a948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	3b00      	subs	r3, #0
 800a950:	bf18      	it	ne
 800a952:	2301      	movne	r3, #1
 800a954:	0692      	lsls	r2, r2, #26
 800a956:	d42b      	bmi.n	800a9b0 <_printf_common+0xb0>
 800a958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a95c:	4641      	mov	r1, r8
 800a95e:	4638      	mov	r0, r7
 800a960:	47c8      	blx	r9
 800a962:	3001      	adds	r0, #1
 800a964:	d01e      	beq.n	800a9a4 <_printf_common+0xa4>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	f003 0306 	and.w	r3, r3, #6
 800a96e:	2b04      	cmp	r3, #4
 800a970:	bf02      	ittt	eq
 800a972:	68e5      	ldreq	r5, [r4, #12]
 800a974:	6833      	ldreq	r3, [r6, #0]
 800a976:	1aed      	subeq	r5, r5, r3
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	bf0c      	ite	eq
 800a97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a980:	2500      	movne	r5, #0
 800a982:	4293      	cmp	r3, r2
 800a984:	bfc4      	itt	gt
 800a986:	1a9b      	subgt	r3, r3, r2
 800a988:	18ed      	addgt	r5, r5, r3
 800a98a:	2600      	movs	r6, #0
 800a98c:	341a      	adds	r4, #26
 800a98e:	42b5      	cmp	r5, r6
 800a990:	d11a      	bne.n	800a9c8 <_printf_common+0xc8>
 800a992:	2000      	movs	r0, #0
 800a994:	e008      	b.n	800a9a8 <_printf_common+0xa8>
 800a996:	2301      	movs	r3, #1
 800a998:	4652      	mov	r2, sl
 800a99a:	4641      	mov	r1, r8
 800a99c:	4638      	mov	r0, r7
 800a99e:	47c8      	blx	r9
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d103      	bne.n	800a9ac <_printf_common+0xac>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	e7c6      	b.n	800a93e <_printf_common+0x3e>
 800a9b0:	18e1      	adds	r1, r4, r3
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	2030      	movs	r0, #48	@ 0x30
 800a9b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9ba:	4422      	add	r2, r4
 800a9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	e7c7      	b.n	800a958 <_printf_common+0x58>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	4641      	mov	r1, r8
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	47c8      	blx	r9
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d0e6      	beq.n	800a9a4 <_printf_common+0xa4>
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7d9      	b.n	800a98e <_printf_common+0x8e>
	...

0800a9dc <_printf_i>:
 800a9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	7e0f      	ldrb	r7, [r1, #24]
 800a9e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9e4:	2f78      	cmp	r7, #120	@ 0x78
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	469a      	mov	sl, r3
 800a9ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9f2:	d807      	bhi.n	800aa04 <_printf_i+0x28>
 800a9f4:	2f62      	cmp	r7, #98	@ 0x62
 800a9f6:	d80a      	bhi.n	800aa0e <_printf_i+0x32>
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	f000 80d2 	beq.w	800aba2 <_printf_i+0x1c6>
 800a9fe:	2f58      	cmp	r7, #88	@ 0x58
 800aa00:	f000 80b9 	beq.w	800ab76 <_printf_i+0x19a>
 800aa04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa0c:	e03a      	b.n	800aa84 <_printf_i+0xa8>
 800aa0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa12:	2b15      	cmp	r3, #21
 800aa14:	d8f6      	bhi.n	800aa04 <_printf_i+0x28>
 800aa16:	a101      	add	r1, pc, #4	@ (adr r1, 800aa1c <_printf_i+0x40>)
 800aa18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa1c:	0800aa75 	.word	0x0800aa75
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa05 	.word	0x0800aa05
 800aa28:	0800aa05 	.word	0x0800aa05
 800aa2c:	0800aa05 	.word	0x0800aa05
 800aa30:	0800aa05 	.word	0x0800aa05
 800aa34:	0800aa89 	.word	0x0800aa89
 800aa38:	0800aa05 	.word	0x0800aa05
 800aa3c:	0800aa05 	.word	0x0800aa05
 800aa40:	0800aa05 	.word	0x0800aa05
 800aa44:	0800aa05 	.word	0x0800aa05
 800aa48:	0800ab89 	.word	0x0800ab89
 800aa4c:	0800aab3 	.word	0x0800aab3
 800aa50:	0800ab43 	.word	0x0800ab43
 800aa54:	0800aa05 	.word	0x0800aa05
 800aa58:	0800aa05 	.word	0x0800aa05
 800aa5c:	0800abab 	.word	0x0800abab
 800aa60:	0800aa05 	.word	0x0800aa05
 800aa64:	0800aab3 	.word	0x0800aab3
 800aa68:	0800aa05 	.word	0x0800aa05
 800aa6c:	0800aa05 	.word	0x0800aa05
 800aa70:	0800ab4b 	.word	0x0800ab4b
 800aa74:	6833      	ldr	r3, [r6, #0]
 800aa76:	1d1a      	adds	r2, r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6032      	str	r2, [r6, #0]
 800aa7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa84:	2301      	movs	r3, #1
 800aa86:	e09d      	b.n	800abc4 <_printf_i+0x1e8>
 800aa88:	6833      	ldr	r3, [r6, #0]
 800aa8a:	6820      	ldr	r0, [r4, #0]
 800aa8c:	1d19      	adds	r1, r3, #4
 800aa8e:	6031      	str	r1, [r6, #0]
 800aa90:	0606      	lsls	r6, r0, #24
 800aa92:	d501      	bpl.n	800aa98 <_printf_i+0xbc>
 800aa94:	681d      	ldr	r5, [r3, #0]
 800aa96:	e003      	b.n	800aaa0 <_printf_i+0xc4>
 800aa98:	0645      	lsls	r5, r0, #25
 800aa9a:	d5fb      	bpl.n	800aa94 <_printf_i+0xb8>
 800aa9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	da03      	bge.n	800aaac <_printf_i+0xd0>
 800aaa4:	232d      	movs	r3, #45	@ 0x2d
 800aaa6:	426d      	negs	r5, r5
 800aaa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaac:	4859      	ldr	r0, [pc, #356]	@ (800ac14 <_printf_i+0x238>)
 800aaae:	230a      	movs	r3, #10
 800aab0:	e011      	b.n	800aad6 <_printf_i+0xfa>
 800aab2:	6821      	ldr	r1, [r4, #0]
 800aab4:	6833      	ldr	r3, [r6, #0]
 800aab6:	0608      	lsls	r0, r1, #24
 800aab8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aabc:	d402      	bmi.n	800aac4 <_printf_i+0xe8>
 800aabe:	0649      	lsls	r1, r1, #25
 800aac0:	bf48      	it	mi
 800aac2:	b2ad      	uxthmi	r5, r5
 800aac4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aac6:	4853      	ldr	r0, [pc, #332]	@ (800ac14 <_printf_i+0x238>)
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	bf14      	ite	ne
 800aacc:	230a      	movne	r3, #10
 800aace:	2308      	moveq	r3, #8
 800aad0:	2100      	movs	r1, #0
 800aad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aad6:	6866      	ldr	r6, [r4, #4]
 800aad8:	60a6      	str	r6, [r4, #8]
 800aada:	2e00      	cmp	r6, #0
 800aadc:	bfa2      	ittt	ge
 800aade:	6821      	ldrge	r1, [r4, #0]
 800aae0:	f021 0104 	bicge.w	r1, r1, #4
 800aae4:	6021      	strge	r1, [r4, #0]
 800aae6:	b90d      	cbnz	r5, 800aaec <_printf_i+0x110>
 800aae8:	2e00      	cmp	r6, #0
 800aaea:	d04b      	beq.n	800ab84 <_printf_i+0x1a8>
 800aaec:	4616      	mov	r6, r2
 800aaee:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaf2:	fb03 5711 	mls	r7, r3, r1, r5
 800aaf6:	5dc7      	ldrb	r7, [r0, r7]
 800aaf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aafc:	462f      	mov	r7, r5
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	460d      	mov	r5, r1
 800ab02:	d9f4      	bls.n	800aaee <_printf_i+0x112>
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d10b      	bne.n	800ab20 <_printf_i+0x144>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	07df      	lsls	r7, r3, #31
 800ab0c:	d508      	bpl.n	800ab20 <_printf_i+0x144>
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	6861      	ldr	r1, [r4, #4]
 800ab12:	4299      	cmp	r1, r3
 800ab14:	bfde      	ittt	le
 800ab16:	2330      	movle	r3, #48	@ 0x30
 800ab18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab20:	1b92      	subs	r2, r2, r6
 800ab22:	6122      	str	r2, [r4, #16]
 800ab24:	f8cd a000 	str.w	sl, [sp]
 800ab28:	464b      	mov	r3, r9
 800ab2a:	aa03      	add	r2, sp, #12
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7ff fee6 	bl	800a900 <_printf_common>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d14a      	bne.n	800abce <_printf_i+0x1f2>
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	b004      	add	sp, #16
 800ab3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	f043 0320 	orr.w	r3, r3, #32
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	4833      	ldr	r0, [pc, #204]	@ (800ac18 <_printf_i+0x23c>)
 800ab4c:	2778      	movs	r7, #120	@ 0x78
 800ab4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	6831      	ldr	r1, [r6, #0]
 800ab56:	061f      	lsls	r7, r3, #24
 800ab58:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab5c:	d402      	bmi.n	800ab64 <_printf_i+0x188>
 800ab5e:	065f      	lsls	r7, r3, #25
 800ab60:	bf48      	it	mi
 800ab62:	b2ad      	uxthmi	r5, r5
 800ab64:	6031      	str	r1, [r6, #0]
 800ab66:	07d9      	lsls	r1, r3, #31
 800ab68:	bf44      	itt	mi
 800ab6a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab6e:	6023      	strmi	r3, [r4, #0]
 800ab70:	b11d      	cbz	r5, 800ab7a <_printf_i+0x19e>
 800ab72:	2310      	movs	r3, #16
 800ab74:	e7ac      	b.n	800aad0 <_printf_i+0xf4>
 800ab76:	4827      	ldr	r0, [pc, #156]	@ (800ac14 <_printf_i+0x238>)
 800ab78:	e7e9      	b.n	800ab4e <_printf_i+0x172>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	f023 0320 	bic.w	r3, r3, #32
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	e7f6      	b.n	800ab72 <_printf_i+0x196>
 800ab84:	4616      	mov	r6, r2
 800ab86:	e7bd      	b.n	800ab04 <_printf_i+0x128>
 800ab88:	6833      	ldr	r3, [r6, #0]
 800ab8a:	6825      	ldr	r5, [r4, #0]
 800ab8c:	6961      	ldr	r1, [r4, #20]
 800ab8e:	1d18      	adds	r0, r3, #4
 800ab90:	6030      	str	r0, [r6, #0]
 800ab92:	062e      	lsls	r6, r5, #24
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	d501      	bpl.n	800ab9c <_printf_i+0x1c0>
 800ab98:	6019      	str	r1, [r3, #0]
 800ab9a:	e002      	b.n	800aba2 <_printf_i+0x1c6>
 800ab9c:	0668      	lsls	r0, r5, #25
 800ab9e:	d5fb      	bpl.n	800ab98 <_printf_i+0x1bc>
 800aba0:	8019      	strh	r1, [r3, #0]
 800aba2:	2300      	movs	r3, #0
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	4616      	mov	r6, r2
 800aba8:	e7bc      	b.n	800ab24 <_printf_i+0x148>
 800abaa:	6833      	ldr	r3, [r6, #0]
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	6032      	str	r2, [r6, #0]
 800abb0:	681e      	ldr	r6, [r3, #0]
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	2100      	movs	r1, #0
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7f5 fb0a 	bl	80001d0 <memchr>
 800abbc:	b108      	cbz	r0, 800abc2 <_printf_i+0x1e6>
 800abbe:	1b80      	subs	r0, r0, r6
 800abc0:	6060      	str	r0, [r4, #4]
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	2300      	movs	r3, #0
 800abc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abcc:	e7aa      	b.n	800ab24 <_printf_i+0x148>
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	4632      	mov	r2, r6
 800abd2:	4649      	mov	r1, r9
 800abd4:	4640      	mov	r0, r8
 800abd6:	47d0      	blx	sl
 800abd8:	3001      	adds	r0, #1
 800abda:	d0ad      	beq.n	800ab38 <_printf_i+0x15c>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	079b      	lsls	r3, r3, #30
 800abe0:	d413      	bmi.n	800ac0a <_printf_i+0x22e>
 800abe2:	68e0      	ldr	r0, [r4, #12]
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	4298      	cmp	r0, r3
 800abe8:	bfb8      	it	lt
 800abea:	4618      	movlt	r0, r3
 800abec:	e7a6      	b.n	800ab3c <_printf_i+0x160>
 800abee:	2301      	movs	r3, #1
 800abf0:	4632      	mov	r2, r6
 800abf2:	4649      	mov	r1, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	47d0      	blx	sl
 800abf8:	3001      	adds	r0, #1
 800abfa:	d09d      	beq.n	800ab38 <_printf_i+0x15c>
 800abfc:	3501      	adds	r5, #1
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	9903      	ldr	r1, [sp, #12]
 800ac02:	1a5b      	subs	r3, r3, r1
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dcf2      	bgt.n	800abee <_printf_i+0x212>
 800ac08:	e7eb      	b.n	800abe2 <_printf_i+0x206>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	f104 0619 	add.w	r6, r4, #25
 800ac10:	e7f5      	b.n	800abfe <_printf_i+0x222>
 800ac12:	bf00      	nop
 800ac14:	08011142 	.word	0x08011142
 800ac18:	08011153 	.word	0x08011153

0800ac1c <__sflush_r>:
 800ac1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac24:	0716      	lsls	r6, r2, #28
 800ac26:	4605      	mov	r5, r0
 800ac28:	460c      	mov	r4, r1
 800ac2a:	d454      	bmi.n	800acd6 <__sflush_r+0xba>
 800ac2c:	684b      	ldr	r3, [r1, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dc02      	bgt.n	800ac38 <__sflush_r+0x1c>
 800ac32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dd48      	ble.n	800acca <__sflush_r+0xae>
 800ac38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac3a:	2e00      	cmp	r6, #0
 800ac3c:	d045      	beq.n	800acca <__sflush_r+0xae>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac44:	682f      	ldr	r7, [r5, #0]
 800ac46:	6a21      	ldr	r1, [r4, #32]
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	d030      	beq.n	800acae <__sflush_r+0x92>
 800ac4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	0759      	lsls	r1, r3, #29
 800ac52:	d505      	bpl.n	800ac60 <__sflush_r+0x44>
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	1ad2      	subs	r2, r2, r3
 800ac58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac5a:	b10b      	cbz	r3, 800ac60 <__sflush_r+0x44>
 800ac5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	2300      	movs	r3, #0
 800ac62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac64:	6a21      	ldr	r1, [r4, #32]
 800ac66:	4628      	mov	r0, r5
 800ac68:	47b0      	blx	r6
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	d106      	bne.n	800ac7e <__sflush_r+0x62>
 800ac70:	6829      	ldr	r1, [r5, #0]
 800ac72:	291d      	cmp	r1, #29
 800ac74:	d82b      	bhi.n	800acce <__sflush_r+0xb2>
 800ac76:	4a2a      	ldr	r2, [pc, #168]	@ (800ad20 <__sflush_r+0x104>)
 800ac78:	410a      	asrs	r2, r1
 800ac7a:	07d6      	lsls	r6, r2, #31
 800ac7c:	d427      	bmi.n	800acce <__sflush_r+0xb2>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	6062      	str	r2, [r4, #4]
 800ac82:	04d9      	lsls	r1, r3, #19
 800ac84:	6922      	ldr	r2, [r4, #16]
 800ac86:	6022      	str	r2, [r4, #0]
 800ac88:	d504      	bpl.n	800ac94 <__sflush_r+0x78>
 800ac8a:	1c42      	adds	r2, r0, #1
 800ac8c:	d101      	bne.n	800ac92 <__sflush_r+0x76>
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	b903      	cbnz	r3, 800ac94 <__sflush_r+0x78>
 800ac92:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac96:	602f      	str	r7, [r5, #0]
 800ac98:	b1b9      	cbz	r1, 800acca <__sflush_r+0xae>
 800ac9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d002      	beq.n	800aca8 <__sflush_r+0x8c>
 800aca2:	4628      	mov	r0, r5
 800aca4:	f001 f9a0 	bl	800bfe8 <_free_r>
 800aca8:	2300      	movs	r3, #0
 800acaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800acac:	e00d      	b.n	800acca <__sflush_r+0xae>
 800acae:	2301      	movs	r3, #1
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b0      	blx	r6
 800acb4:	4602      	mov	r2, r0
 800acb6:	1c50      	adds	r0, r2, #1
 800acb8:	d1c9      	bne.n	800ac4e <__sflush_r+0x32>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0c6      	beq.n	800ac4e <__sflush_r+0x32>
 800acc0:	2b1d      	cmp	r3, #29
 800acc2:	d001      	beq.n	800acc8 <__sflush_r+0xac>
 800acc4:	2b16      	cmp	r3, #22
 800acc6:	d11e      	bne.n	800ad06 <__sflush_r+0xea>
 800acc8:	602f      	str	r7, [r5, #0]
 800acca:	2000      	movs	r0, #0
 800accc:	e022      	b.n	800ad14 <__sflush_r+0xf8>
 800acce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd2:	b21b      	sxth	r3, r3
 800acd4:	e01b      	b.n	800ad0e <__sflush_r+0xf2>
 800acd6:	690f      	ldr	r7, [r1, #16]
 800acd8:	2f00      	cmp	r7, #0
 800acda:	d0f6      	beq.n	800acca <__sflush_r+0xae>
 800acdc:	0793      	lsls	r3, r2, #30
 800acde:	680e      	ldr	r6, [r1, #0]
 800ace0:	bf08      	it	eq
 800ace2:	694b      	ldreq	r3, [r1, #20]
 800ace4:	600f      	str	r7, [r1, #0]
 800ace6:	bf18      	it	ne
 800ace8:	2300      	movne	r3, #0
 800acea:	eba6 0807 	sub.w	r8, r6, r7
 800acee:	608b      	str	r3, [r1, #8]
 800acf0:	f1b8 0f00 	cmp.w	r8, #0
 800acf4:	dde9      	ble.n	800acca <__sflush_r+0xae>
 800acf6:	6a21      	ldr	r1, [r4, #32]
 800acf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acfa:	4643      	mov	r3, r8
 800acfc:	463a      	mov	r2, r7
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b0      	blx	r6
 800ad02:	2800      	cmp	r0, #0
 800ad04:	dc08      	bgt.n	800ad18 <__sflush_r+0xfc>
 800ad06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad18:	4407      	add	r7, r0
 800ad1a:	eba8 0800 	sub.w	r8, r8, r0
 800ad1e:	e7e7      	b.n	800acf0 <__sflush_r+0xd4>
 800ad20:	dfbffffe 	.word	0xdfbffffe

0800ad24 <_fflush_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	690b      	ldr	r3, [r1, #16]
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	b913      	cbnz	r3, 800ad34 <_fflush_r+0x10>
 800ad2e:	2500      	movs	r5, #0
 800ad30:	4628      	mov	r0, r5
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	b118      	cbz	r0, 800ad3e <_fflush_r+0x1a>
 800ad36:	6a03      	ldr	r3, [r0, #32]
 800ad38:	b90b      	cbnz	r3, 800ad3e <_fflush_r+0x1a>
 800ad3a:	f000 f8a7 	bl	800ae8c <__sinit>
 800ad3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0f3      	beq.n	800ad2e <_fflush_r+0xa>
 800ad46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad48:	07d0      	lsls	r0, r2, #31
 800ad4a:	d404      	bmi.n	800ad56 <_fflush_r+0x32>
 800ad4c:	0599      	lsls	r1, r3, #22
 800ad4e:	d402      	bmi.n	800ad56 <_fflush_r+0x32>
 800ad50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad52:	f000 faea 	bl	800b32a <__retarget_lock_acquire_recursive>
 800ad56:	4628      	mov	r0, r5
 800ad58:	4621      	mov	r1, r4
 800ad5a:	f7ff ff5f 	bl	800ac1c <__sflush_r>
 800ad5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad60:	07da      	lsls	r2, r3, #31
 800ad62:	4605      	mov	r5, r0
 800ad64:	d4e4      	bmi.n	800ad30 <_fflush_r+0xc>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	059b      	lsls	r3, r3, #22
 800ad6a:	d4e1      	bmi.n	800ad30 <_fflush_r+0xc>
 800ad6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad6e:	f000 fadd 	bl	800b32c <__retarget_lock_release_recursive>
 800ad72:	e7dd      	b.n	800ad30 <_fflush_r+0xc>

0800ad74 <std>:
 800ad74:	2300      	movs	r3, #0
 800ad76:	b510      	push	{r4, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad82:	6083      	str	r3, [r0, #8]
 800ad84:	8181      	strh	r1, [r0, #12]
 800ad86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad88:	81c2      	strh	r2, [r0, #14]
 800ad8a:	6183      	str	r3, [r0, #24]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	2208      	movs	r2, #8
 800ad90:	305c      	adds	r0, #92	@ 0x5c
 800ad92:	f000 fa4d 	bl	800b230 <memset>
 800ad96:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <std+0x58>)
 800ad98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	@ (800add0 <std+0x5c>)
 800ad9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <std+0x60>)
 800ada0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <std+0x64>)
 800ada4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x68>)
 800ada8:	6224      	str	r4, [r4, #32]
 800adaa:	429c      	cmp	r4, r3
 800adac:	d006      	beq.n	800adbc <std+0x48>
 800adae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adb2:	4294      	cmp	r4, r2
 800adb4:	d002      	beq.n	800adbc <std+0x48>
 800adb6:	33d0      	adds	r3, #208	@ 0xd0
 800adb8:	429c      	cmp	r4, r3
 800adba:	d105      	bne.n	800adc8 <std+0x54>
 800adbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc4:	f000 bab0 	b.w	800b328 <__retarget_lock_init_recursive>
 800adc8:	bd10      	pop	{r4, pc}
 800adca:	bf00      	nop
 800adcc:	0800b019 	.word	0x0800b019
 800add0:	0800b03b 	.word	0x0800b03b
 800add4:	0800b073 	.word	0x0800b073
 800add8:	0800b097 	.word	0x0800b097
 800addc:	2000a624 	.word	0x2000a624

0800ade0 <stdio_exit_handler>:
 800ade0:	4a02      	ldr	r2, [pc, #8]	@ (800adec <stdio_exit_handler+0xc>)
 800ade2:	4903      	ldr	r1, [pc, #12]	@ (800adf0 <stdio_exit_handler+0x10>)
 800ade4:	4803      	ldr	r0, [pc, #12]	@ (800adf4 <stdio_exit_handler+0x14>)
 800ade6:	f000 b869 	b.w	800aebc <_fwalk_sglue>
 800adea:	bf00      	nop
 800adec:	20000020 	.word	0x20000020
 800adf0:	0800ad25 	.word	0x0800ad25
 800adf4:	20000030 	.word	0x20000030

0800adf8 <cleanup_stdio>:
 800adf8:	6841      	ldr	r1, [r0, #4]
 800adfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ae2c <cleanup_stdio+0x34>)
 800adfc:	4299      	cmp	r1, r3
 800adfe:	b510      	push	{r4, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	d001      	beq.n	800ae08 <cleanup_stdio+0x10>
 800ae04:	f7ff ff8e 	bl	800ad24 <_fflush_r>
 800ae08:	68a1      	ldr	r1, [r4, #8]
 800ae0a:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <cleanup_stdio+0x38>)
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	d002      	beq.n	800ae16 <cleanup_stdio+0x1e>
 800ae10:	4620      	mov	r0, r4
 800ae12:	f7ff ff87 	bl	800ad24 <_fflush_r>
 800ae16:	68e1      	ldr	r1, [r4, #12]
 800ae18:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <cleanup_stdio+0x3c>)
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d004      	beq.n	800ae28 <cleanup_stdio+0x30>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f7ff bf7e 	b.w	800ad24 <_fflush_r>
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	bf00      	nop
 800ae2c:	2000a624 	.word	0x2000a624
 800ae30:	2000a68c 	.word	0x2000a68c
 800ae34:	2000a6f4 	.word	0x2000a6f4

0800ae38 <global_stdio_init.part.0>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae68 <global_stdio_init.part.0+0x30>)
 800ae3c:	4c0b      	ldr	r4, [pc, #44]	@ (800ae6c <global_stdio_init.part.0+0x34>)
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae70 <global_stdio_init.part.0+0x38>)
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	4620      	mov	r0, r4
 800ae44:	2200      	movs	r2, #0
 800ae46:	2104      	movs	r1, #4
 800ae48:	f7ff ff94 	bl	800ad74 <std>
 800ae4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae50:	2201      	movs	r2, #1
 800ae52:	2109      	movs	r1, #9
 800ae54:	f7ff ff8e 	bl	800ad74 <std>
 800ae58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae62:	2112      	movs	r1, #18
 800ae64:	f7ff bf86 	b.w	800ad74 <std>
 800ae68:	2000a75c 	.word	0x2000a75c
 800ae6c:	2000a624 	.word	0x2000a624
 800ae70:	0800ade1 	.word	0x0800ade1

0800ae74 <__sfp_lock_acquire>:
 800ae74:	4801      	ldr	r0, [pc, #4]	@ (800ae7c <__sfp_lock_acquire+0x8>)
 800ae76:	f000 ba58 	b.w	800b32a <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	2000a765 	.word	0x2000a765

0800ae80 <__sfp_lock_release>:
 800ae80:	4801      	ldr	r0, [pc, #4]	@ (800ae88 <__sfp_lock_release+0x8>)
 800ae82:	f000 ba53 	b.w	800b32c <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	2000a765 	.word	0x2000a765

0800ae8c <__sinit>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	f7ff fff0 	bl	800ae74 <__sfp_lock_acquire>
 800ae94:	6a23      	ldr	r3, [r4, #32]
 800ae96:	b11b      	cbz	r3, 800aea0 <__sinit+0x14>
 800ae98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9c:	f7ff bff0 	b.w	800ae80 <__sfp_lock_release>
 800aea0:	4b04      	ldr	r3, [pc, #16]	@ (800aeb4 <__sinit+0x28>)
 800aea2:	6223      	str	r3, [r4, #32]
 800aea4:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__sinit+0x2c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f5      	bne.n	800ae98 <__sinit+0xc>
 800aeac:	f7ff ffc4 	bl	800ae38 <global_stdio_init.part.0>
 800aeb0:	e7f2      	b.n	800ae98 <__sinit+0xc>
 800aeb2:	bf00      	nop
 800aeb4:	0800adf9 	.word	0x0800adf9
 800aeb8:	2000a75c 	.word	0x2000a75c

0800aebc <_fwalk_sglue>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4607      	mov	r7, r0
 800aec2:	4688      	mov	r8, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	2600      	movs	r6, #0
 800aec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aecc:	f1b9 0901 	subs.w	r9, r9, #1
 800aed0:	d505      	bpl.n	800aede <_fwalk_sglue+0x22>
 800aed2:	6824      	ldr	r4, [r4, #0]
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d1f7      	bne.n	800aec8 <_fwalk_sglue+0xc>
 800aed8:	4630      	mov	r0, r6
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d907      	bls.n	800aef4 <_fwalk_sglue+0x38>
 800aee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aee8:	3301      	adds	r3, #1
 800aeea:	d003      	beq.n	800aef4 <_fwalk_sglue+0x38>
 800aeec:	4629      	mov	r1, r5
 800aeee:	4638      	mov	r0, r7
 800aef0:	47c0      	blx	r8
 800aef2:	4306      	orrs	r6, r0
 800aef4:	3568      	adds	r5, #104	@ 0x68
 800aef6:	e7e9      	b.n	800aecc <_fwalk_sglue+0x10>

0800aef8 <iprintf>:
 800aef8:	b40f      	push	{r0, r1, r2, r3}
 800aefa:	b507      	push	{r0, r1, r2, lr}
 800aefc:	4906      	ldr	r1, [pc, #24]	@ (800af18 <iprintf+0x20>)
 800aefe:	ab04      	add	r3, sp, #16
 800af00:	6808      	ldr	r0, [r1, #0]
 800af02:	f853 2b04 	ldr.w	r2, [r3], #4
 800af06:	6881      	ldr	r1, [r0, #8]
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	f001 fe71 	bl	800cbf0 <_vfiprintf_r>
 800af0e:	b003      	add	sp, #12
 800af10:	f85d eb04 	ldr.w	lr, [sp], #4
 800af14:	b004      	add	sp, #16
 800af16:	4770      	bx	lr
 800af18:	2000002c 	.word	0x2000002c

0800af1c <_puts_r>:
 800af1c:	6a03      	ldr	r3, [r0, #32]
 800af1e:	b570      	push	{r4, r5, r6, lr}
 800af20:	6884      	ldr	r4, [r0, #8]
 800af22:	4605      	mov	r5, r0
 800af24:	460e      	mov	r6, r1
 800af26:	b90b      	cbnz	r3, 800af2c <_puts_r+0x10>
 800af28:	f7ff ffb0 	bl	800ae8c <__sinit>
 800af2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af2e:	07db      	lsls	r3, r3, #31
 800af30:	d405      	bmi.n	800af3e <_puts_r+0x22>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	0598      	lsls	r0, r3, #22
 800af36:	d402      	bmi.n	800af3e <_puts_r+0x22>
 800af38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af3a:	f000 f9f6 	bl	800b32a <__retarget_lock_acquire_recursive>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	0719      	lsls	r1, r3, #28
 800af42:	d502      	bpl.n	800af4a <_puts_r+0x2e>
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d135      	bne.n	800afb6 <_puts_r+0x9a>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4628      	mov	r0, r5
 800af4e:	f000 f8e5 	bl	800b11c <__swsetup_r>
 800af52:	b380      	cbz	r0, 800afb6 <_puts_r+0x9a>
 800af54:	f04f 35ff 	mov.w	r5, #4294967295
 800af58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d405      	bmi.n	800af6a <_puts_r+0x4e>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	059b      	lsls	r3, r3, #22
 800af62:	d402      	bmi.n	800af6a <_puts_r+0x4e>
 800af64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af66:	f000 f9e1 	bl	800b32c <__retarget_lock_release_recursive>
 800af6a:	4628      	mov	r0, r5
 800af6c:	bd70      	pop	{r4, r5, r6, pc}
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da04      	bge.n	800af7c <_puts_r+0x60>
 800af72:	69a2      	ldr	r2, [r4, #24]
 800af74:	429a      	cmp	r2, r3
 800af76:	dc17      	bgt.n	800afa8 <_puts_r+0x8c>
 800af78:	290a      	cmp	r1, #10
 800af7a:	d015      	beq.n	800afa8 <_puts_r+0x8c>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	6022      	str	r2, [r4, #0]
 800af82:	7019      	strb	r1, [r3, #0]
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af8a:	3b01      	subs	r3, #1
 800af8c:	60a3      	str	r3, [r4, #8]
 800af8e:	2900      	cmp	r1, #0
 800af90:	d1ed      	bne.n	800af6e <_puts_r+0x52>
 800af92:	2b00      	cmp	r3, #0
 800af94:	da11      	bge.n	800afba <_puts_r+0x9e>
 800af96:	4622      	mov	r2, r4
 800af98:	210a      	movs	r1, #10
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 f87f 	bl	800b09e <__swbuf_r>
 800afa0:	3001      	adds	r0, #1
 800afa2:	d0d7      	beq.n	800af54 <_puts_r+0x38>
 800afa4:	250a      	movs	r5, #10
 800afa6:	e7d7      	b.n	800af58 <_puts_r+0x3c>
 800afa8:	4622      	mov	r2, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f877 	bl	800b09e <__swbuf_r>
 800afb0:	3001      	adds	r0, #1
 800afb2:	d1e7      	bne.n	800af84 <_puts_r+0x68>
 800afb4:	e7ce      	b.n	800af54 <_puts_r+0x38>
 800afb6:	3e01      	subs	r6, #1
 800afb8:	e7e4      	b.n	800af84 <_puts_r+0x68>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	6022      	str	r2, [r4, #0]
 800afc0:	220a      	movs	r2, #10
 800afc2:	701a      	strb	r2, [r3, #0]
 800afc4:	e7ee      	b.n	800afa4 <_puts_r+0x88>
	...

0800afc8 <puts>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	@ (800afd4 <puts+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f7ff bfa5 	b.w	800af1c <_puts_r>
 800afd2:	bf00      	nop
 800afd4:	2000002c 	.word	0x2000002c

0800afd8 <siprintf>:
 800afd8:	b40e      	push	{r1, r2, r3}
 800afda:	b500      	push	{lr}
 800afdc:	b09c      	sub	sp, #112	@ 0x70
 800afde:	ab1d      	add	r3, sp, #116	@ 0x74
 800afe0:	9002      	str	r0, [sp, #8]
 800afe2:	9006      	str	r0, [sp, #24]
 800afe4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afe8:	4809      	ldr	r0, [pc, #36]	@ (800b010 <siprintf+0x38>)
 800afea:	9107      	str	r1, [sp, #28]
 800afec:	9104      	str	r1, [sp, #16]
 800afee:	4909      	ldr	r1, [pc, #36]	@ (800b014 <siprintf+0x3c>)
 800aff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff4:	9105      	str	r1, [sp, #20]
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	a902      	add	r1, sp, #8
 800affc:	f001 fcd2 	bl	800c9a4 <_svfiprintf_r>
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	2200      	movs	r2, #0
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	b01c      	add	sp, #112	@ 0x70
 800b008:	f85d eb04 	ldr.w	lr, [sp], #4
 800b00c:	b003      	add	sp, #12
 800b00e:	4770      	bx	lr
 800b010:	2000002c 	.word	0x2000002c
 800b014:	ffff0208 	.word	0xffff0208

0800b018 <__sread>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b020:	f000 f934 	bl	800b28c <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	bfab      	itete	ge
 800b028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b02a:	89a3      	ldrhlt	r3, [r4, #12]
 800b02c:	181b      	addge	r3, r3, r0
 800b02e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b032:	bfac      	ite	ge
 800b034:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b036:	81a3      	strhlt	r3, [r4, #12]
 800b038:	bd10      	pop	{r4, pc}

0800b03a <__swrite>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	461f      	mov	r7, r3
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	05db      	lsls	r3, r3, #23
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	4616      	mov	r6, r2
 800b04a:	d505      	bpl.n	800b058 <__swrite+0x1e>
 800b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b050:	2302      	movs	r3, #2
 800b052:	2200      	movs	r2, #0
 800b054:	f000 f908 	bl	800b268 <_lseek_r>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b05e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	f000 b91f 	b.w	800b2b0 <_write_r>

0800b072 <__sseek>:
 800b072:	b510      	push	{r4, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07a:	f000 f8f5 	bl	800b268 <_lseek_r>
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	bf15      	itete	ne
 800b084:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b08a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b08e:	81a3      	strheq	r3, [r4, #12]
 800b090:	bf18      	it	ne
 800b092:	81a3      	strhne	r3, [r4, #12]
 800b094:	bd10      	pop	{r4, pc}

0800b096 <__sclose>:
 800b096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09a:	f000 b8d5 	b.w	800b248 <_close_r>

0800b09e <__swbuf_r>:
 800b09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a0:	460e      	mov	r6, r1
 800b0a2:	4614      	mov	r4, r2
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	b118      	cbz	r0, 800b0b0 <__swbuf_r+0x12>
 800b0a8:	6a03      	ldr	r3, [r0, #32]
 800b0aa:	b90b      	cbnz	r3, 800b0b0 <__swbuf_r+0x12>
 800b0ac:	f7ff feee 	bl	800ae8c <__sinit>
 800b0b0:	69a3      	ldr	r3, [r4, #24]
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	071a      	lsls	r2, r3, #28
 800b0b8:	d501      	bpl.n	800b0be <__swbuf_r+0x20>
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	b943      	cbnz	r3, 800b0d0 <__swbuf_r+0x32>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 f82b 	bl	800b11c <__swsetup_r>
 800b0c6:	b118      	cbz	r0, 800b0d0 <__swbuf_r+0x32>
 800b0c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	6922      	ldr	r2, [r4, #16]
 800b0d4:	1a98      	subs	r0, r3, r2
 800b0d6:	6963      	ldr	r3, [r4, #20]
 800b0d8:	b2f6      	uxtb	r6, r6
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	4637      	mov	r7, r6
 800b0de:	dc05      	bgt.n	800b0ec <__swbuf_r+0x4e>
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7ff fe1e 	bl	800ad24 <_fflush_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d1ed      	bne.n	800b0c8 <__swbuf_r+0x2a>
 800b0ec:	68a3      	ldr	r3, [r4, #8]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	60a3      	str	r3, [r4, #8]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	701e      	strb	r6, [r3, #0]
 800b0fa:	6962      	ldr	r2, [r4, #20]
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d004      	beq.n	800b10c <__swbuf_r+0x6e>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	07db      	lsls	r3, r3, #31
 800b106:	d5e1      	bpl.n	800b0cc <__swbuf_r+0x2e>
 800b108:	2e0a      	cmp	r6, #10
 800b10a:	d1df      	bne.n	800b0cc <__swbuf_r+0x2e>
 800b10c:	4621      	mov	r1, r4
 800b10e:	4628      	mov	r0, r5
 800b110:	f7ff fe08 	bl	800ad24 <_fflush_r>
 800b114:	2800      	cmp	r0, #0
 800b116:	d0d9      	beq.n	800b0cc <__swbuf_r+0x2e>
 800b118:	e7d6      	b.n	800b0c8 <__swbuf_r+0x2a>
	...

0800b11c <__swsetup_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4b29      	ldr	r3, [pc, #164]	@ (800b1c4 <__swsetup_r+0xa8>)
 800b120:	4605      	mov	r5, r0
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	460c      	mov	r4, r1
 800b126:	b118      	cbz	r0, 800b130 <__swsetup_r+0x14>
 800b128:	6a03      	ldr	r3, [r0, #32]
 800b12a:	b90b      	cbnz	r3, 800b130 <__swsetup_r+0x14>
 800b12c:	f7ff feae 	bl	800ae8c <__sinit>
 800b130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b134:	0719      	lsls	r1, r3, #28
 800b136:	d422      	bmi.n	800b17e <__swsetup_r+0x62>
 800b138:	06da      	lsls	r2, r3, #27
 800b13a:	d407      	bmi.n	800b14c <__swsetup_r+0x30>
 800b13c:	2209      	movs	r2, #9
 800b13e:	602a      	str	r2, [r5, #0]
 800b140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b144:	81a3      	strh	r3, [r4, #12]
 800b146:	f04f 30ff 	mov.w	r0, #4294967295
 800b14a:	e033      	b.n	800b1b4 <__swsetup_r+0x98>
 800b14c:	0758      	lsls	r0, r3, #29
 800b14e:	d512      	bpl.n	800b176 <__swsetup_r+0x5a>
 800b150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b152:	b141      	cbz	r1, 800b166 <__swsetup_r+0x4a>
 800b154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b158:	4299      	cmp	r1, r3
 800b15a:	d002      	beq.n	800b162 <__swsetup_r+0x46>
 800b15c:	4628      	mov	r0, r5
 800b15e:	f000 ff43 	bl	800bfe8 <_free_r>
 800b162:	2300      	movs	r3, #0
 800b164:	6363      	str	r3, [r4, #52]	@ 0x34
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	2300      	movs	r3, #0
 800b170:	6063      	str	r3, [r4, #4]
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	f043 0308 	orr.w	r3, r3, #8
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	b94b      	cbnz	r3, 800b196 <__swsetup_r+0x7a>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b18c:	d003      	beq.n	800b196 <__swsetup_r+0x7a>
 800b18e:	4621      	mov	r1, r4
 800b190:	4628      	mov	r0, r5
 800b192:	f001 fe6b 	bl	800ce6c <__smakebuf_r>
 800b196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19a:	f013 0201 	ands.w	r2, r3, #1
 800b19e:	d00a      	beq.n	800b1b6 <__swsetup_r+0x9a>
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	60a2      	str	r2, [r4, #8]
 800b1a4:	6962      	ldr	r2, [r4, #20]
 800b1a6:	4252      	negs	r2, r2
 800b1a8:	61a2      	str	r2, [r4, #24]
 800b1aa:	6922      	ldr	r2, [r4, #16]
 800b1ac:	b942      	cbnz	r2, 800b1c0 <__swsetup_r+0xa4>
 800b1ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1b2:	d1c5      	bne.n	800b140 <__swsetup_r+0x24>
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	0799      	lsls	r1, r3, #30
 800b1b8:	bf58      	it	pl
 800b1ba:	6962      	ldrpl	r2, [r4, #20]
 800b1bc:	60a2      	str	r2, [r4, #8]
 800b1be:	e7f4      	b.n	800b1aa <__swsetup_r+0x8e>
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	e7f7      	b.n	800b1b4 <__swsetup_r+0x98>
 800b1c4:	2000002c 	.word	0x2000002c

0800b1c8 <swprintf>:
 800b1c8:	b40c      	push	{r2, r3}
 800b1ca:	b530      	push	{r4, r5, lr}
 800b1cc:	4b17      	ldr	r3, [pc, #92]	@ (800b22c <swprintf+0x64>)
 800b1ce:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800b1d2:	681d      	ldr	r5, [r3, #0]
 800b1d4:	b09d      	sub	sp, #116	@ 0x74
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	d216      	bcs.n	800b208 <swprintf+0x40>
 800b1da:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1de:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1e2:	9002      	str	r0, [sp, #8]
 800b1e4:	9006      	str	r0, [sp, #24]
 800b1e6:	b1c1      	cbz	r1, 800b21a <swprintf+0x52>
 800b1e8:	1e4b      	subs	r3, r1, #1
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b1fa:	ab21      	add	r3, sp, #132	@ 0x84
 800b1fc:	a902      	add	r1, sp, #8
 800b1fe:	4628      	mov	r0, r5
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	f001 fee5 	bl	800cfd0 <_svfwprintf_r>
 800b206:	b954      	cbnz	r4, 800b21e <swprintf+0x56>
 800b208:	238b      	movs	r3, #139	@ 0x8b
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	b01d      	add	sp, #116	@ 0x74
 800b212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b216:	b002      	add	sp, #8
 800b218:	4770      	bx	lr
 800b21a:	460b      	mov	r3, r1
 800b21c:	e7e6      	b.n	800b1ec <swprintf+0x24>
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	42a0      	cmp	r0, r4
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	d3f3      	bcc.n	800b210 <swprintf+0x48>
 800b228:	e7ee      	b.n	800b208 <swprintf+0x40>
 800b22a:	bf00      	nop
 800b22c:	2000002c 	.word	0x2000002c

0800b230 <memset>:
 800b230:	4402      	add	r2, r0
 800b232:	4603      	mov	r3, r0
 800b234:	4293      	cmp	r3, r2
 800b236:	d100      	bne.n	800b23a <memset+0xa>
 800b238:	4770      	bx	lr
 800b23a:	f803 1b01 	strb.w	r1, [r3], #1
 800b23e:	e7f9      	b.n	800b234 <memset+0x4>

0800b240 <_localeconv_r>:
 800b240:	4800      	ldr	r0, [pc, #0]	@ (800b244 <_localeconv_r+0x4>)
 800b242:	4770      	bx	lr
 800b244:	2000016c 	.word	0x2000016c

0800b248 <_close_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d06      	ldr	r5, [pc, #24]	@ (800b264 <_close_r+0x1c>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	602b      	str	r3, [r5, #0]
 800b254:	f7f7 fbbc 	bl	80029d0 <_close>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_close_r+0x1a>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_close_r+0x1a>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	2000a760 	.word	0x2000a760

0800b268 <_lseek_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d07      	ldr	r5, [pc, #28]	@ (800b288 <_lseek_r+0x20>)
 800b26c:	4604      	mov	r4, r0
 800b26e:	4608      	mov	r0, r1
 800b270:	4611      	mov	r1, r2
 800b272:	2200      	movs	r2, #0
 800b274:	602a      	str	r2, [r5, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	f7f7 fbd1 	bl	8002a1e <_lseek>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_lseek_r+0x1e>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_lseek_r+0x1e>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	2000a760 	.word	0x2000a760

0800b28c <_read_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4d07      	ldr	r5, [pc, #28]	@ (800b2ac <_read_r+0x20>)
 800b290:	4604      	mov	r4, r0
 800b292:	4608      	mov	r0, r1
 800b294:	4611      	mov	r1, r2
 800b296:	2200      	movs	r2, #0
 800b298:	602a      	str	r2, [r5, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f7f7 fb5f 	bl	800295e <_read>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_read_r+0x1e>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_read_r+0x1e>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	2000a760 	.word	0x2000a760

0800b2b0 <_write_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	@ (800b2d0 <_write_r+0x20>)
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	602a      	str	r2, [r5, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f7f7 fb6a 	bl	8002998 <_write>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_write_r+0x1e>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_write_r+0x1e>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	2000a760 	.word	0x2000a760

0800b2d4 <__errno>:
 800b2d4:	4b01      	ldr	r3, [pc, #4]	@ (800b2dc <__errno+0x8>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	2000002c 	.word	0x2000002c

0800b2e0 <__libc_init_array>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b318 <__libc_init_array+0x38>)
 800b2e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b31c <__libc_init_array+0x3c>)
 800b2e6:	1b64      	subs	r4, r4, r5
 800b2e8:	10a4      	asrs	r4, r4, #2
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	42a6      	cmp	r6, r4
 800b2ee:	d109      	bne.n	800b304 <__libc_init_array+0x24>
 800b2f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b320 <__libc_init_array+0x40>)
 800b2f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b324 <__libc_init_array+0x44>)
 800b2f4:	f002 fd6a 	bl	800ddcc <_init>
 800b2f8:	1b64      	subs	r4, r4, r5
 800b2fa:	10a4      	asrs	r4, r4, #2
 800b2fc:	2600      	movs	r6, #0
 800b2fe:	42a6      	cmp	r6, r4
 800b300:	d105      	bne.n	800b30e <__libc_init_array+0x2e>
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	f855 3b04 	ldr.w	r3, [r5], #4
 800b308:	4798      	blx	r3
 800b30a:	3601      	adds	r6, #1
 800b30c:	e7ee      	b.n	800b2ec <__libc_init_array+0xc>
 800b30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b312:	4798      	blx	r3
 800b314:	3601      	adds	r6, #1
 800b316:	e7f2      	b.n	800b2fe <__libc_init_array+0x1e>
 800b318:	08011654 	.word	0x08011654
 800b31c:	08011654 	.word	0x08011654
 800b320:	08011654 	.word	0x08011654
 800b324:	08011658 	.word	0x08011658

0800b328 <__retarget_lock_init_recursive>:
 800b328:	4770      	bx	lr

0800b32a <__retarget_lock_acquire_recursive>:
 800b32a:	4770      	bx	lr

0800b32c <__retarget_lock_release_recursive>:
 800b32c:	4770      	bx	lr

0800b32e <memcpy>:
 800b32e:	440a      	add	r2, r1
 800b330:	4291      	cmp	r1, r2
 800b332:	f100 33ff 	add.w	r3, r0, #4294967295
 800b336:	d100      	bne.n	800b33a <memcpy+0xc>
 800b338:	4770      	bx	lr
 800b33a:	b510      	push	{r4, lr}
 800b33c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b340:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b344:	4291      	cmp	r1, r2
 800b346:	d1f9      	bne.n	800b33c <memcpy+0xe>
 800b348:	bd10      	pop	{r4, pc}

0800b34a <quorem>:
 800b34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34e:	6903      	ldr	r3, [r0, #16]
 800b350:	690c      	ldr	r4, [r1, #16]
 800b352:	42a3      	cmp	r3, r4
 800b354:	4607      	mov	r7, r0
 800b356:	db7e      	blt.n	800b456 <quorem+0x10c>
 800b358:	3c01      	subs	r4, #1
 800b35a:	f101 0814 	add.w	r8, r1, #20
 800b35e:	00a3      	lsls	r3, r4, #2
 800b360:	f100 0514 	add.w	r5, r0, #20
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b374:	3301      	adds	r3, #1
 800b376:	429a      	cmp	r2, r3
 800b378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b37c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b380:	d32e      	bcc.n	800b3e0 <quorem+0x96>
 800b382:	f04f 0a00 	mov.w	sl, #0
 800b386:	46c4      	mov	ip, r8
 800b388:	46ae      	mov	lr, r5
 800b38a:	46d3      	mov	fp, sl
 800b38c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b390:	b298      	uxth	r0, r3
 800b392:	fb06 a000 	mla	r0, r6, r0, sl
 800b396:	0c02      	lsrs	r2, r0, #16
 800b398:	0c1b      	lsrs	r3, r3, #16
 800b39a:	fb06 2303 	mla	r3, r6, r3, r2
 800b39e:	f8de 2000 	ldr.w	r2, [lr]
 800b3a2:	b280      	uxth	r0, r0
 800b3a4:	b292      	uxth	r2, r2
 800b3a6:	1a12      	subs	r2, r2, r0
 800b3a8:	445a      	add	r2, fp
 800b3aa:	f8de 0000 	ldr.w	r0, [lr]
 800b3ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3c2:	45e1      	cmp	r9, ip
 800b3c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b3c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b3cc:	d2de      	bcs.n	800b38c <quorem+0x42>
 800b3ce:	9b00      	ldr	r3, [sp, #0]
 800b3d0:	58eb      	ldr	r3, [r5, r3]
 800b3d2:	b92b      	cbnz	r3, 800b3e0 <quorem+0x96>
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	429d      	cmp	r5, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	d32f      	bcc.n	800b43e <quorem+0xf4>
 800b3de:	613c      	str	r4, [r7, #16]
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f001 f97b 	bl	800c6dc <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	db25      	blt.n	800b436 <quorem+0xec>
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3f2:	f8d1 c000 	ldr.w	ip, [r1]
 800b3f6:	fa1f fe82 	uxth.w	lr, r2
 800b3fa:	fa1f f38c 	uxth.w	r3, ip
 800b3fe:	eba3 030e 	sub.w	r3, r3, lr
 800b402:	4403      	add	r3, r0
 800b404:	0c12      	lsrs	r2, r2, #16
 800b406:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b40a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b40e:	b29b      	uxth	r3, r3
 800b410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b414:	45c1      	cmp	r9, r8
 800b416:	f841 3b04 	str.w	r3, [r1], #4
 800b41a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b41e:	d2e6      	bcs.n	800b3ee <quorem+0xa4>
 800b420:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b424:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b428:	b922      	cbnz	r2, 800b434 <quorem+0xea>
 800b42a:	3b04      	subs	r3, #4
 800b42c:	429d      	cmp	r5, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	d30b      	bcc.n	800b44a <quorem+0x100>
 800b432:	613c      	str	r4, [r7, #16]
 800b434:	3601      	adds	r6, #1
 800b436:	4630      	mov	r0, r6
 800b438:	b003      	add	sp, #12
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	3b04      	subs	r3, #4
 800b442:	2a00      	cmp	r2, #0
 800b444:	d1cb      	bne.n	800b3de <quorem+0x94>
 800b446:	3c01      	subs	r4, #1
 800b448:	e7c6      	b.n	800b3d8 <quorem+0x8e>
 800b44a:	6812      	ldr	r2, [r2, #0]
 800b44c:	3b04      	subs	r3, #4
 800b44e:	2a00      	cmp	r2, #0
 800b450:	d1ef      	bne.n	800b432 <quorem+0xe8>
 800b452:	3c01      	subs	r4, #1
 800b454:	e7ea      	b.n	800b42c <quorem+0xe2>
 800b456:	2000      	movs	r0, #0
 800b458:	e7ee      	b.n	800b438 <quorem+0xee>
 800b45a:	0000      	movs	r0, r0
 800b45c:	0000      	movs	r0, r0
	...

0800b460 <_dtoa_r>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	69c7      	ldr	r7, [r0, #28]
 800b466:	b099      	sub	sp, #100	@ 0x64
 800b468:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b46c:	ec55 4b10 	vmov	r4, r5, d0
 800b470:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b472:	9109      	str	r1, [sp, #36]	@ 0x24
 800b474:	4683      	mov	fp, r0
 800b476:	920e      	str	r2, [sp, #56]	@ 0x38
 800b478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b47a:	b97f      	cbnz	r7, 800b49c <_dtoa_r+0x3c>
 800b47c:	2010      	movs	r0, #16
 800b47e:	f000 fdfd 	bl	800c07c <malloc>
 800b482:	4602      	mov	r2, r0
 800b484:	f8cb 001c 	str.w	r0, [fp, #28]
 800b488:	b920      	cbnz	r0, 800b494 <_dtoa_r+0x34>
 800b48a:	4ba7      	ldr	r3, [pc, #668]	@ (800b728 <_dtoa_r+0x2c8>)
 800b48c:	21ef      	movs	r1, #239	@ 0xef
 800b48e:	48a7      	ldr	r0, [pc, #668]	@ (800b72c <_dtoa_r+0x2cc>)
 800b490:	f002 fb6c 	bl	800db6c <__assert_func>
 800b494:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b498:	6007      	str	r7, [r0, #0]
 800b49a:	60c7      	str	r7, [r0, #12]
 800b49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	b159      	cbz	r1, 800b4bc <_dtoa_r+0x5c>
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	604a      	str	r2, [r1, #4]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4093      	lsls	r3, r2
 800b4ac:	608b      	str	r3, [r1, #8]
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	f000 feda 	bl	800c268 <_Bfree>
 800b4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	1e2b      	subs	r3, r5, #0
 800b4be:	bfb9      	ittee	lt
 800b4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b4c4:	9303      	strlt	r3, [sp, #12]
 800b4c6:	2300      	movge	r3, #0
 800b4c8:	6033      	strge	r3, [r6, #0]
 800b4ca:	9f03      	ldr	r7, [sp, #12]
 800b4cc:	4b98      	ldr	r3, [pc, #608]	@ (800b730 <_dtoa_r+0x2d0>)
 800b4ce:	bfbc      	itt	lt
 800b4d0:	2201      	movlt	r2, #1
 800b4d2:	6032      	strlt	r2, [r6, #0]
 800b4d4:	43bb      	bics	r3, r7
 800b4d6:	d112      	bne.n	800b4fe <_dtoa_r+0x9e>
 800b4d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4e4:	4323      	orrs	r3, r4
 800b4e6:	f000 854d 	beq.w	800bf84 <_dtoa_r+0xb24>
 800b4ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b744 <_dtoa_r+0x2e4>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 854f 	beq.w	800bf94 <_dtoa_r+0xb34>
 800b4f6:	f10a 0303 	add.w	r3, sl, #3
 800b4fa:	f000 bd49 	b.w	800bf90 <_dtoa_r+0xb30>
 800b4fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b502:	2200      	movs	r2, #0
 800b504:	ec51 0b17 	vmov	r0, r1, d7
 800b508:	2300      	movs	r3, #0
 800b50a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b50e:	f7f5 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b512:	4680      	mov	r8, r0
 800b514:	b158      	cbz	r0, 800b52e <_dtoa_r+0xce>
 800b516:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b518:	2301      	movs	r3, #1
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b51e:	b113      	cbz	r3, 800b526 <_dtoa_r+0xc6>
 800b520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b522:	4b84      	ldr	r3, [pc, #528]	@ (800b734 <_dtoa_r+0x2d4>)
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b748 <_dtoa_r+0x2e8>
 800b52a:	f000 bd33 	b.w	800bf94 <_dtoa_r+0xb34>
 800b52e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b532:	aa16      	add	r2, sp, #88	@ 0x58
 800b534:	a917      	add	r1, sp, #92	@ 0x5c
 800b536:	4658      	mov	r0, fp
 800b538:	f001 f980 	bl	800c83c <__d2b>
 800b53c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b540:	4681      	mov	r9, r0
 800b542:	2e00      	cmp	r6, #0
 800b544:	d077      	beq.n	800b636 <_dtoa_r+0x1d6>
 800b546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b548:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b554:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b558:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b55c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b560:	4619      	mov	r1, r3
 800b562:	2200      	movs	r2, #0
 800b564:	4b74      	ldr	r3, [pc, #464]	@ (800b738 <_dtoa_r+0x2d8>)
 800b566:	f7f4 fe8f 	bl	8000288 <__aeabi_dsub>
 800b56a:	a369      	add	r3, pc, #420	@ (adr r3, 800b710 <_dtoa_r+0x2b0>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f5 f842 	bl	80005f8 <__aeabi_dmul>
 800b574:	a368      	add	r3, pc, #416	@ (adr r3, 800b718 <_dtoa_r+0x2b8>)
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f4 fe87 	bl	800028c <__adddf3>
 800b57e:	4604      	mov	r4, r0
 800b580:	4630      	mov	r0, r6
 800b582:	460d      	mov	r5, r1
 800b584:	f7f4 ffce 	bl	8000524 <__aeabi_i2d>
 800b588:	a365      	add	r3, pc, #404	@ (adr r3, 800b720 <_dtoa_r+0x2c0>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f5 f833 	bl	80005f8 <__aeabi_dmul>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f4 fe77 	bl	800028c <__adddf3>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	460d      	mov	r5, r1
 800b5a2:	f7f5 fad9 	bl	8000b58 <__aeabi_d2iz>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f5 fa94 	bl	8000adc <__aeabi_dcmplt>
 800b5b4:	b140      	cbz	r0, 800b5c8 <_dtoa_r+0x168>
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7f4 ffb4 	bl	8000524 <__aeabi_i2d>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5c4:	b900      	cbnz	r0, 800b5c8 <_dtoa_r+0x168>
 800b5c6:	3f01      	subs	r7, #1
 800b5c8:	2f16      	cmp	r7, #22
 800b5ca:	d851      	bhi.n	800b670 <_dtoa_r+0x210>
 800b5cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b73c <_dtoa_r+0x2dc>)
 800b5ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5da:	f7f5 fa7f 	bl	8000adc <__aeabi_dcmplt>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d048      	beq.n	800b674 <_dtoa_r+0x214>
 800b5e2:	3f01      	subs	r7, #1
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b5e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5ea:	1b9b      	subs	r3, r3, r6
 800b5ec:	1e5a      	subs	r2, r3, #1
 800b5ee:	bf44      	itt	mi
 800b5f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b5f4:	2300      	movmi	r3, #0
 800b5f6:	9208      	str	r2, [sp, #32]
 800b5f8:	bf54      	ite	pl
 800b5fa:	f04f 0800 	movpl.w	r8, #0
 800b5fe:	9308      	strmi	r3, [sp, #32]
 800b600:	2f00      	cmp	r7, #0
 800b602:	db39      	blt.n	800b678 <_dtoa_r+0x218>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b608:	443b      	add	r3, r7
 800b60a:	9308      	str	r3, [sp, #32]
 800b60c:	2300      	movs	r3, #0
 800b60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b612:	2b09      	cmp	r3, #9
 800b614:	d864      	bhi.n	800b6e0 <_dtoa_r+0x280>
 800b616:	2b05      	cmp	r3, #5
 800b618:	bfc4      	itt	gt
 800b61a:	3b04      	subgt	r3, #4
 800b61c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b620:	f1a3 0302 	sub.w	r3, r3, #2
 800b624:	bfcc      	ite	gt
 800b626:	2400      	movgt	r4, #0
 800b628:	2401      	movle	r4, #1
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d863      	bhi.n	800b6f6 <_dtoa_r+0x296>
 800b62e:	e8df f003 	tbb	[pc, r3]
 800b632:	372a      	.short	0x372a
 800b634:	5535      	.short	0x5535
 800b636:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b63a:	441e      	add	r6, r3
 800b63c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b640:	2b20      	cmp	r3, #32
 800b642:	bfc1      	itttt	gt
 800b644:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b648:	409f      	lslgt	r7, r3
 800b64a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b64e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b652:	bfd6      	itet	le
 800b654:	f1c3 0320 	rsble	r3, r3, #32
 800b658:	ea47 0003 	orrgt.w	r0, r7, r3
 800b65c:	fa04 f003 	lslle.w	r0, r4, r3
 800b660:	f7f4 ff50 	bl	8000504 <__aeabi_ui2d>
 800b664:	2201      	movs	r2, #1
 800b666:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b66a:	3e01      	subs	r6, #1
 800b66c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b66e:	e777      	b.n	800b560 <_dtoa_r+0x100>
 800b670:	2301      	movs	r3, #1
 800b672:	e7b8      	b.n	800b5e6 <_dtoa_r+0x186>
 800b674:	9012      	str	r0, [sp, #72]	@ 0x48
 800b676:	e7b7      	b.n	800b5e8 <_dtoa_r+0x188>
 800b678:	427b      	negs	r3, r7
 800b67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b67c:	2300      	movs	r3, #0
 800b67e:	eba8 0807 	sub.w	r8, r8, r7
 800b682:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b684:	e7c4      	b.n	800b610 <_dtoa_r+0x1b0>
 800b686:	2300      	movs	r3, #0
 800b688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dc35      	bgt.n	800b6fc <_dtoa_r+0x29c>
 800b690:	2301      	movs	r3, #1
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	9307      	str	r3, [sp, #28]
 800b696:	461a      	mov	r2, r3
 800b698:	920e      	str	r2, [sp, #56]	@ 0x38
 800b69a:	e00b      	b.n	800b6b4 <_dtoa_r+0x254>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e7f3      	b.n	800b688 <_dtoa_r+0x228>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	9307      	str	r3, [sp, #28]
 800b6b0:	bfb8      	it	lt
 800b6b2:	2301      	movlt	r3, #1
 800b6b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	f102 0514 	add.w	r5, r2, #20
 800b6c0:	429d      	cmp	r5, r3
 800b6c2:	d91f      	bls.n	800b704 <_dtoa_r+0x2a4>
 800b6c4:	6041      	str	r1, [r0, #4]
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f000 fd8e 	bl	800c1e8 <_Balloc>
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d13c      	bne.n	800b74c <_dtoa_r+0x2ec>
 800b6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b740 <_dtoa_r+0x2e0>)
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6da:	e6d8      	b.n	800b48e <_dtoa_r+0x2e>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e7e0      	b.n	800b6a2 <_dtoa_r+0x242>
 800b6e0:	2401      	movs	r4, #1
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	9307      	str	r3, [sp, #28]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2312      	movs	r3, #18
 800b6f4:	e7d0      	b.n	800b698 <_dtoa_r+0x238>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6fa:	e7f5      	b.n	800b6e8 <_dtoa_r+0x288>
 800b6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	e7d7      	b.n	800b6b4 <_dtoa_r+0x254>
 800b704:	3101      	adds	r1, #1
 800b706:	0052      	lsls	r2, r2, #1
 800b708:	e7d8      	b.n	800b6bc <_dtoa_r+0x25c>
 800b70a:	bf00      	nop
 800b70c:	f3af 8000 	nop.w
 800b710:	636f4361 	.word	0x636f4361
 800b714:	3fd287a7 	.word	0x3fd287a7
 800b718:	8b60c8b3 	.word	0x8b60c8b3
 800b71c:	3fc68a28 	.word	0x3fc68a28
 800b720:	509f79fb 	.word	0x509f79fb
 800b724:	3fd34413 	.word	0x3fd34413
 800b728:	08011171 	.word	0x08011171
 800b72c:	08011188 	.word	0x08011188
 800b730:	7ff00000 	.word	0x7ff00000
 800b734:	08011141 	.word	0x08011141
 800b738:	3ff80000 	.word	0x3ff80000
 800b73c:	08011280 	.word	0x08011280
 800b740:	080111e0 	.word	0x080111e0
 800b744:	0801116d 	.word	0x0801116d
 800b748:	08011140 	.word	0x08011140
 800b74c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b750:	6018      	str	r0, [r3, #0]
 800b752:	9b07      	ldr	r3, [sp, #28]
 800b754:	2b0e      	cmp	r3, #14
 800b756:	f200 80a4 	bhi.w	800b8a2 <_dtoa_r+0x442>
 800b75a:	2c00      	cmp	r4, #0
 800b75c:	f000 80a1 	beq.w	800b8a2 <_dtoa_r+0x442>
 800b760:	2f00      	cmp	r7, #0
 800b762:	dd33      	ble.n	800b7cc <_dtoa_r+0x36c>
 800b764:	4bad      	ldr	r3, [pc, #692]	@ (800ba1c <_dtoa_r+0x5bc>)
 800b766:	f007 020f 	and.w	r2, r7, #15
 800b76a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b76e:	ed93 7b00 	vldr	d7, [r3]
 800b772:	05f8      	lsls	r0, r7, #23
 800b774:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b778:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b77c:	d516      	bpl.n	800b7ac <_dtoa_r+0x34c>
 800b77e:	4ba8      	ldr	r3, [pc, #672]	@ (800ba20 <_dtoa_r+0x5c0>)
 800b780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b788:	f7f5 f860 	bl	800084c <__aeabi_ddiv>
 800b78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b790:	f004 040f 	and.w	r4, r4, #15
 800b794:	2603      	movs	r6, #3
 800b796:	4da2      	ldr	r5, [pc, #648]	@ (800ba20 <_dtoa_r+0x5c0>)
 800b798:	b954      	cbnz	r4, 800b7b0 <_dtoa_r+0x350>
 800b79a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a2:	f7f5 f853 	bl	800084c <__aeabi_ddiv>
 800b7a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7aa:	e028      	b.n	800b7fe <_dtoa_r+0x39e>
 800b7ac:	2602      	movs	r6, #2
 800b7ae:	e7f2      	b.n	800b796 <_dtoa_r+0x336>
 800b7b0:	07e1      	lsls	r1, r4, #31
 800b7b2:	d508      	bpl.n	800b7c6 <_dtoa_r+0x366>
 800b7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	1064      	asrs	r4, r4, #1
 800b7c8:	3508      	adds	r5, #8
 800b7ca:	e7e5      	b.n	800b798 <_dtoa_r+0x338>
 800b7cc:	f000 80d2 	beq.w	800b974 <_dtoa_r+0x514>
 800b7d0:	427c      	negs	r4, r7
 800b7d2:	4b92      	ldr	r3, [pc, #584]	@ (800ba1c <_dtoa_r+0x5bc>)
 800b7d4:	4d92      	ldr	r5, [pc, #584]	@ (800ba20 <_dtoa_r+0x5c0>)
 800b7d6:	f004 020f 	and.w	r2, r4, #15
 800b7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7e6:	f7f4 ff07 	bl	80005f8 <__aeabi_dmul>
 800b7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ee:	1124      	asrs	r4, r4, #4
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2602      	movs	r6, #2
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	f040 80b2 	bne.w	800b95e <_dtoa_r+0x4fe>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1d3      	bne.n	800b7a6 <_dtoa_r+0x346>
 800b7fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b800:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80b7 	beq.w	800b978 <_dtoa_r+0x518>
 800b80a:	4b86      	ldr	r3, [pc, #536]	@ (800ba24 <_dtoa_r+0x5c4>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f963 	bl	8000adc <__aeabi_dcmplt>
 800b816:	2800      	cmp	r0, #0
 800b818:	f000 80ae 	beq.w	800b978 <_dtoa_r+0x518>
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80aa 	beq.w	800b978 <_dtoa_r+0x518>
 800b824:	9b00      	ldr	r3, [sp, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	dd37      	ble.n	800b89a <_dtoa_r+0x43a>
 800b82a:	1e7b      	subs	r3, r7, #1
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	4620      	mov	r0, r4
 800b830:	4b7d      	ldr	r3, [pc, #500]	@ (800ba28 <_dtoa_r+0x5c8>)
 800b832:	2200      	movs	r2, #0
 800b834:	4629      	mov	r1, r5
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83e:	9c00      	ldr	r4, [sp, #0]
 800b840:	3601      	adds	r6, #1
 800b842:	4630      	mov	r0, r6
 800b844:	f7f4 fe6e 	bl	8000524 <__aeabi_i2d>
 800b848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b84c:	f7f4 fed4 	bl	80005f8 <__aeabi_dmul>
 800b850:	4b76      	ldr	r3, [pc, #472]	@ (800ba2c <_dtoa_r+0x5cc>)
 800b852:	2200      	movs	r2, #0
 800b854:	f7f4 fd1a 	bl	800028c <__adddf3>
 800b858:	4605      	mov	r5, r0
 800b85a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b85e:	2c00      	cmp	r4, #0
 800b860:	f040 808d 	bne.w	800b97e <_dtoa_r+0x51e>
 800b864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b868:	4b71      	ldr	r3, [pc, #452]	@ (800ba30 <_dtoa_r+0x5d0>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	f7f4 fd0c 	bl	8000288 <__aeabi_dsub>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b878:	462a      	mov	r2, r5
 800b87a:	4633      	mov	r3, r6
 800b87c:	f7f5 f94c 	bl	8000b18 <__aeabi_dcmpgt>
 800b880:	2800      	cmp	r0, #0
 800b882:	f040 828b 	bne.w	800bd9c <_dtoa_r+0x93c>
 800b886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88a:	462a      	mov	r2, r5
 800b88c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b890:	f7f5 f924 	bl	8000adc <__aeabi_dcmplt>
 800b894:	2800      	cmp	r0, #0
 800b896:	f040 8128 	bne.w	800baea <_dtoa_r+0x68a>
 800b89a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b89e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f2c0 815a 	blt.w	800bb5e <_dtoa_r+0x6fe>
 800b8aa:	2f0e      	cmp	r7, #14
 800b8ac:	f300 8157 	bgt.w	800bb5e <_dtoa_r+0x6fe>
 800b8b0:	4b5a      	ldr	r3, [pc, #360]	@ (800ba1c <_dtoa_r+0x5bc>)
 800b8b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8b6:	ed93 7b00 	vldr	d7, [r3]
 800b8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	ed8d 7b00 	vstr	d7, [sp]
 800b8c2:	da03      	bge.n	800b8cc <_dtoa_r+0x46c>
 800b8c4:	9b07      	ldr	r3, [sp, #28]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f340 8101 	ble.w	800bace <_dtoa_r+0x66e>
 800b8cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b8d0:	4656      	mov	r6, sl
 800b8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	4629      	mov	r1, r5
 800b8da:	f7f4 ffb7 	bl	800084c <__aeabi_ddiv>
 800b8de:	f7f5 f93b 	bl	8000b58 <__aeabi_d2iz>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	f7f4 fe1e 	bl	8000524 <__aeabi_i2d>
 800b8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ec:	f7f4 fe84 	bl	80005f8 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b8fc:	f7f4 fcc4 	bl	8000288 <__aeabi_dsub>
 800b900:	f806 4b01 	strb.w	r4, [r6], #1
 800b904:	9d07      	ldr	r5, [sp, #28]
 800b906:	eba6 040a 	sub.w	r4, r6, sl
 800b90a:	42a5      	cmp	r5, r4
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	f040 8117 	bne.w	800bb42 <_dtoa_r+0x6e2>
 800b914:	f7f4 fcba 	bl	800028c <__adddf3>
 800b918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b91c:	4604      	mov	r4, r0
 800b91e:	460d      	mov	r5, r1
 800b920:	f7f5 f8fa 	bl	8000b18 <__aeabi_dcmpgt>
 800b924:	2800      	cmp	r0, #0
 800b926:	f040 80f9 	bne.w	800bb1c <_dtoa_r+0x6bc>
 800b92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b92e:	4620      	mov	r0, r4
 800b930:	4629      	mov	r1, r5
 800b932:	f7f5 f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b936:	b118      	cbz	r0, 800b940 <_dtoa_r+0x4e0>
 800b938:	f018 0f01 	tst.w	r8, #1
 800b93c:	f040 80ee 	bne.w	800bb1c <_dtoa_r+0x6bc>
 800b940:	4649      	mov	r1, r9
 800b942:	4658      	mov	r0, fp
 800b944:	f000 fc90 	bl	800c268 <_Bfree>
 800b948:	2300      	movs	r3, #0
 800b94a:	7033      	strb	r3, [r6, #0]
 800b94c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b94e:	3701      	adds	r7, #1
 800b950:	601f      	str	r7, [r3, #0]
 800b952:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b954:	2b00      	cmp	r3, #0
 800b956:	f000 831d 	beq.w	800bf94 <_dtoa_r+0xb34>
 800b95a:	601e      	str	r6, [r3, #0]
 800b95c:	e31a      	b.n	800bf94 <_dtoa_r+0xb34>
 800b95e:	07e2      	lsls	r2, r4, #31
 800b960:	d505      	bpl.n	800b96e <_dtoa_r+0x50e>
 800b962:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b966:	f7f4 fe47 	bl	80005f8 <__aeabi_dmul>
 800b96a:	3601      	adds	r6, #1
 800b96c:	2301      	movs	r3, #1
 800b96e:	1064      	asrs	r4, r4, #1
 800b970:	3508      	adds	r5, #8
 800b972:	e73f      	b.n	800b7f4 <_dtoa_r+0x394>
 800b974:	2602      	movs	r6, #2
 800b976:	e742      	b.n	800b7fe <_dtoa_r+0x39e>
 800b978:	9c07      	ldr	r4, [sp, #28]
 800b97a:	9704      	str	r7, [sp, #16]
 800b97c:	e761      	b.n	800b842 <_dtoa_r+0x3e2>
 800b97e:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <_dtoa_r+0x5bc>)
 800b980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b986:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b98a:	4454      	add	r4, sl
 800b98c:	2900      	cmp	r1, #0
 800b98e:	d053      	beq.n	800ba38 <_dtoa_r+0x5d8>
 800b990:	4928      	ldr	r1, [pc, #160]	@ (800ba34 <_dtoa_r+0x5d4>)
 800b992:	2000      	movs	r0, #0
 800b994:	f7f4 ff5a 	bl	800084c <__aeabi_ddiv>
 800b998:	4633      	mov	r3, r6
 800b99a:	462a      	mov	r2, r5
 800b99c:	f7f4 fc74 	bl	8000288 <__aeabi_dsub>
 800b9a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9a4:	4656      	mov	r6, sl
 800b9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9aa:	f7f5 f8d5 	bl	8000b58 <__aeabi_d2iz>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	f7f4 fdb8 	bl	8000524 <__aeabi_i2d>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9bc:	f7f4 fc64 	bl	8000288 <__aeabi_dsub>
 800b9c0:	3530      	adds	r5, #48	@ 0x30
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9ca:	f806 5b01 	strb.w	r5, [r6], #1
 800b9ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9d2:	f7f5 f883 	bl	8000adc <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d171      	bne.n	800babe <_dtoa_r+0x65e>
 800b9da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9de:	4911      	ldr	r1, [pc, #68]	@ (800ba24 <_dtoa_r+0x5c4>)
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f7f4 fc51 	bl	8000288 <__aeabi_dsub>
 800b9e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9ea:	f7f5 f877 	bl	8000adc <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f040 8095 	bne.w	800bb1e <_dtoa_r+0x6be>
 800b9f4:	42a6      	cmp	r6, r4
 800b9f6:	f43f af50 	beq.w	800b89a <_dtoa_r+0x43a>
 800b9fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800ba28 <_dtoa_r+0x5c8>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	f7f4 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ba06:	4b08      	ldr	r3, [pc, #32]	@ (800ba28 <_dtoa_r+0x5c8>)
 800ba08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba12:	f7f4 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ba16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba1a:	e7c4      	b.n	800b9a6 <_dtoa_r+0x546>
 800ba1c:	08011280 	.word	0x08011280
 800ba20:	08011258 	.word	0x08011258
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	40240000 	.word	0x40240000
 800ba2c:	401c0000 	.word	0x401c0000
 800ba30:	40140000 	.word	0x40140000
 800ba34:	3fe00000 	.word	0x3fe00000
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7f4 fddc 	bl	80005f8 <__aeabi_dmul>
 800ba40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba44:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba46:	4656      	mov	r6, sl
 800ba48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba4c:	f7f5 f884 	bl	8000b58 <__aeabi_d2iz>
 800ba50:	4605      	mov	r5, r0
 800ba52:	f7f4 fd67 	bl	8000524 <__aeabi_i2d>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5e:	f7f4 fc13 	bl	8000288 <__aeabi_dsub>
 800ba62:	3530      	adds	r5, #48	@ 0x30
 800ba64:	f806 5b01 	strb.w	r5, [r6], #1
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	42a6      	cmp	r6, r4
 800ba6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba72:	f04f 0200 	mov.w	r2, #0
 800ba76:	d124      	bne.n	800bac2 <_dtoa_r+0x662>
 800ba78:	4bac      	ldr	r3, [pc, #688]	@ (800bd2c <_dtoa_r+0x8cc>)
 800ba7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba7e:	f7f4 fc05 	bl	800028c <__adddf3>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8a:	f7f5 f845 	bl	8000b18 <__aeabi_dcmpgt>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d145      	bne.n	800bb1e <_dtoa_r+0x6be>
 800ba92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba96:	49a5      	ldr	r1, [pc, #660]	@ (800bd2c <_dtoa_r+0x8cc>)
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f7f4 fbf5 	bl	8000288 <__aeabi_dsub>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa6:	f7f5 f819 	bl	8000adc <__aeabi_dcmplt>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f43f aef5 	beq.w	800b89a <_dtoa_r+0x43a>
 800bab0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bab2:	1e73      	subs	r3, r6, #1
 800bab4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bab6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baba:	2b30      	cmp	r3, #48	@ 0x30
 800babc:	d0f8      	beq.n	800bab0 <_dtoa_r+0x650>
 800babe:	9f04      	ldr	r7, [sp, #16]
 800bac0:	e73e      	b.n	800b940 <_dtoa_r+0x4e0>
 800bac2:	4b9b      	ldr	r3, [pc, #620]	@ (800bd30 <_dtoa_r+0x8d0>)
 800bac4:	f7f4 fd98 	bl	80005f8 <__aeabi_dmul>
 800bac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bacc:	e7bc      	b.n	800ba48 <_dtoa_r+0x5e8>
 800bace:	d10c      	bne.n	800baea <_dtoa_r+0x68a>
 800bad0:	4b98      	ldr	r3, [pc, #608]	@ (800bd34 <_dtoa_r+0x8d4>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bad8:	f7f4 fd8e 	bl	80005f8 <__aeabi_dmul>
 800badc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bae0:	f7f5 f810 	bl	8000b04 <__aeabi_dcmpge>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f000 8157 	beq.w	800bd98 <_dtoa_r+0x938>
 800baea:	2400      	movs	r4, #0
 800baec:	4625      	mov	r5, r4
 800baee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf0:	43db      	mvns	r3, r3
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	4656      	mov	r6, sl
 800baf6:	2700      	movs	r7, #0
 800baf8:	4621      	mov	r1, r4
 800bafa:	4658      	mov	r0, fp
 800bafc:	f000 fbb4 	bl	800c268 <_Bfree>
 800bb00:	2d00      	cmp	r5, #0
 800bb02:	d0dc      	beq.n	800babe <_dtoa_r+0x65e>
 800bb04:	b12f      	cbz	r7, 800bb12 <_dtoa_r+0x6b2>
 800bb06:	42af      	cmp	r7, r5
 800bb08:	d003      	beq.n	800bb12 <_dtoa_r+0x6b2>
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	4658      	mov	r0, fp
 800bb0e:	f000 fbab 	bl	800c268 <_Bfree>
 800bb12:	4629      	mov	r1, r5
 800bb14:	4658      	mov	r0, fp
 800bb16:	f000 fba7 	bl	800c268 <_Bfree>
 800bb1a:	e7d0      	b.n	800babe <_dtoa_r+0x65e>
 800bb1c:	9704      	str	r7, [sp, #16]
 800bb1e:	4633      	mov	r3, r6
 800bb20:	461e      	mov	r6, r3
 800bb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb26:	2a39      	cmp	r2, #57	@ 0x39
 800bb28:	d107      	bne.n	800bb3a <_dtoa_r+0x6da>
 800bb2a:	459a      	cmp	sl, r3
 800bb2c:	d1f8      	bne.n	800bb20 <_dtoa_r+0x6c0>
 800bb2e:	9a04      	ldr	r2, [sp, #16]
 800bb30:	3201      	adds	r2, #1
 800bb32:	9204      	str	r2, [sp, #16]
 800bb34:	2230      	movs	r2, #48	@ 0x30
 800bb36:	f88a 2000 	strb.w	r2, [sl]
 800bb3a:	781a      	ldrb	r2, [r3, #0]
 800bb3c:	3201      	adds	r2, #1
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	e7bd      	b.n	800babe <_dtoa_r+0x65e>
 800bb42:	4b7b      	ldr	r3, [pc, #492]	@ (800bd30 <_dtoa_r+0x8d0>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	f7f4 fd57 	bl	80005f8 <__aeabi_dmul>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	460d      	mov	r5, r1
 800bb52:	f7f4 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f43f aebb 	beq.w	800b8d2 <_dtoa_r+0x472>
 800bb5c:	e6f0      	b.n	800b940 <_dtoa_r+0x4e0>
 800bb5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	f000 80db 	beq.w	800bd1c <_dtoa_r+0x8bc>
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	2a01      	cmp	r2, #1
 800bb6a:	f300 80bf 	bgt.w	800bcec <_dtoa_r+0x88c>
 800bb6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	f000 80b7 	beq.w	800bce4 <_dtoa_r+0x884>
 800bb76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb7c:	4646      	mov	r6, r8
 800bb7e:	9a08      	ldr	r2, [sp, #32]
 800bb80:	2101      	movs	r1, #1
 800bb82:	441a      	add	r2, r3
 800bb84:	4658      	mov	r0, fp
 800bb86:	4498      	add	r8, r3
 800bb88:	9208      	str	r2, [sp, #32]
 800bb8a:	f000 fc21 	bl	800c3d0 <__i2b>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	b15e      	cbz	r6, 800bbaa <_dtoa_r+0x74a>
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dd08      	ble.n	800bbaa <_dtoa_r+0x74a>
 800bb98:	42b3      	cmp	r3, r6
 800bb9a:	9a08      	ldr	r2, [sp, #32]
 800bb9c:	bfa8      	it	ge
 800bb9e:	4633      	movge	r3, r6
 800bba0:	eba8 0803 	sub.w	r8, r8, r3
 800bba4:	1af6      	subs	r6, r6, r3
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	9308      	str	r3, [sp, #32]
 800bbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbac:	b1f3      	cbz	r3, 800bbec <_dtoa_r+0x78c>
 800bbae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 80b7 	beq.w	800bd24 <_dtoa_r+0x8c4>
 800bbb6:	b18c      	cbz	r4, 800bbdc <_dtoa_r+0x77c>
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4622      	mov	r2, r4
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f000 fcc7 	bl	800c550 <__pow5mult>
 800bbc2:	464a      	mov	r2, r9
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	4658      	mov	r0, fp
 800bbca:	f000 fc17 	bl	800c3fc <__multiply>
 800bbce:	4649      	mov	r1, r9
 800bbd0:	9004      	str	r0, [sp, #16]
 800bbd2:	4658      	mov	r0, fp
 800bbd4:	f000 fb48 	bl	800c268 <_Bfree>
 800bbd8:	9b04      	ldr	r3, [sp, #16]
 800bbda:	4699      	mov	r9, r3
 800bbdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbde:	1b1a      	subs	r2, r3, r4
 800bbe0:	d004      	beq.n	800bbec <_dtoa_r+0x78c>
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4658      	mov	r0, fp
 800bbe6:	f000 fcb3 	bl	800c550 <__pow5mult>
 800bbea:	4681      	mov	r9, r0
 800bbec:	2101      	movs	r1, #1
 800bbee:	4658      	mov	r0, fp
 800bbf0:	f000 fbee 	bl	800c3d0 <__i2b>
 800bbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 81cf 	beq.w	800bf9c <_dtoa_r+0xb3c>
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4601      	mov	r1, r0
 800bc02:	4658      	mov	r0, fp
 800bc04:	f000 fca4 	bl	800c550 <__pow5mult>
 800bc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	f300 8095 	bgt.w	800bd3c <_dtoa_r+0x8dc>
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f040 8087 	bne.w	800bd28 <_dtoa_r+0x8c8>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f040 8089 	bne.w	800bd38 <_dtoa_r+0x8d8>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc2c:	0d1b      	lsrs	r3, r3, #20
 800bc2e:	051b      	lsls	r3, r3, #20
 800bc30:	b12b      	cbz	r3, 800bc3e <_dtoa_r+0x7de>
 800bc32:	9b08      	ldr	r3, [sp, #32]
 800bc34:	3301      	adds	r3, #1
 800bc36:	9308      	str	r3, [sp, #32]
 800bc38:	f108 0801 	add.w	r8, r8, #1
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 81b0 	beq.w	800bfa8 <_dtoa_r+0xb48>
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc4e:	6918      	ldr	r0, [r3, #16]
 800bc50:	f000 fb72 	bl	800c338 <__hi0bits>
 800bc54:	f1c0 0020 	rsb	r0, r0, #32
 800bc58:	9b08      	ldr	r3, [sp, #32]
 800bc5a:	4418      	add	r0, r3
 800bc5c:	f010 001f 	ands.w	r0, r0, #31
 800bc60:	d077      	beq.n	800bd52 <_dtoa_r+0x8f2>
 800bc62:	f1c0 0320 	rsb	r3, r0, #32
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	dd6b      	ble.n	800bd42 <_dtoa_r+0x8e2>
 800bc6a:	9b08      	ldr	r3, [sp, #32]
 800bc6c:	f1c0 001c 	rsb	r0, r0, #28
 800bc70:	4403      	add	r3, r0
 800bc72:	4480      	add	r8, r0
 800bc74:	4406      	add	r6, r0
 800bc76:	9308      	str	r3, [sp, #32]
 800bc78:	f1b8 0f00 	cmp.w	r8, #0
 800bc7c:	dd05      	ble.n	800bc8a <_dtoa_r+0x82a>
 800bc7e:	4649      	mov	r1, r9
 800bc80:	4642      	mov	r2, r8
 800bc82:	4658      	mov	r0, fp
 800bc84:	f000 fcbe 	bl	800c604 <__lshift>
 800bc88:	4681      	mov	r9, r0
 800bc8a:	9b08      	ldr	r3, [sp, #32]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dd05      	ble.n	800bc9c <_dtoa_r+0x83c>
 800bc90:	4621      	mov	r1, r4
 800bc92:	461a      	mov	r2, r3
 800bc94:	4658      	mov	r0, fp
 800bc96:	f000 fcb5 	bl	800c604 <__lshift>
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d059      	beq.n	800bd56 <_dtoa_r+0x8f6>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 fd19 	bl	800c6dc <__mcmp>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	da53      	bge.n	800bd56 <_dtoa_r+0x8f6>
 800bcae:	1e7b      	subs	r3, r7, #1
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	220a      	movs	r2, #10
 800bcb8:	4658      	mov	r0, fp
 800bcba:	f000 faf7 	bl	800c2ac <__multadd>
 800bcbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcc0:	4681      	mov	r9, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8172 	beq.w	800bfac <_dtoa_r+0xb4c>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4629      	mov	r1, r5
 800bccc:	220a      	movs	r2, #10
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f000 faec 	bl	800c2ac <__multadd>
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	4605      	mov	r5, r0
 800bcda:	dc67      	bgt.n	800bdac <_dtoa_r+0x94c>
 800bcdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	dc41      	bgt.n	800bd66 <_dtoa_r+0x906>
 800bce2:	e063      	b.n	800bdac <_dtoa_r+0x94c>
 800bce4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bce6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bcea:	e746      	b.n	800bb7a <_dtoa_r+0x71a>
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	1e5c      	subs	r4, r3, #1
 800bcf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcf2:	42a3      	cmp	r3, r4
 800bcf4:	bfbf      	itttt	lt
 800bcf6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bcf8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bcfa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bcfc:	1ae3      	sublt	r3, r4, r3
 800bcfe:	bfb4      	ite	lt
 800bd00:	18d2      	addlt	r2, r2, r3
 800bd02:	1b1c      	subge	r4, r3, r4
 800bd04:	9b07      	ldr	r3, [sp, #28]
 800bd06:	bfbc      	itt	lt
 800bd08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bd0a:	2400      	movlt	r4, #0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfb5      	itete	lt
 800bd10:	eba8 0603 	sublt.w	r6, r8, r3
 800bd14:	9b07      	ldrge	r3, [sp, #28]
 800bd16:	2300      	movlt	r3, #0
 800bd18:	4646      	movge	r6, r8
 800bd1a:	e730      	b.n	800bb7e <_dtoa_r+0x71e>
 800bd1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bd20:	4646      	mov	r6, r8
 800bd22:	e735      	b.n	800bb90 <_dtoa_r+0x730>
 800bd24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd26:	e75c      	b.n	800bbe2 <_dtoa_r+0x782>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e788      	b.n	800bc3e <_dtoa_r+0x7de>
 800bd2c:	3fe00000 	.word	0x3fe00000
 800bd30:	40240000 	.word	0x40240000
 800bd34:	40140000 	.word	0x40140000
 800bd38:	9b02      	ldr	r3, [sp, #8]
 800bd3a:	e780      	b.n	800bc3e <_dtoa_r+0x7de>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd40:	e782      	b.n	800bc48 <_dtoa_r+0x7e8>
 800bd42:	d099      	beq.n	800bc78 <_dtoa_r+0x818>
 800bd44:	9a08      	ldr	r2, [sp, #32]
 800bd46:	331c      	adds	r3, #28
 800bd48:	441a      	add	r2, r3
 800bd4a:	4498      	add	r8, r3
 800bd4c:	441e      	add	r6, r3
 800bd4e:	9208      	str	r2, [sp, #32]
 800bd50:	e792      	b.n	800bc78 <_dtoa_r+0x818>
 800bd52:	4603      	mov	r3, r0
 800bd54:	e7f6      	b.n	800bd44 <_dtoa_r+0x8e4>
 800bd56:	9b07      	ldr	r3, [sp, #28]
 800bd58:	9704      	str	r7, [sp, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dc20      	bgt.n	800bda0 <_dtoa_r+0x940>
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	dd1e      	ble.n	800bda4 <_dtoa_r+0x944>
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f47f aec0 	bne.w	800baee <_dtoa_r+0x68e>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	2205      	movs	r2, #5
 800bd72:	4658      	mov	r0, fp
 800bd74:	f000 fa9a 	bl	800c2ac <__multadd>
 800bd78:	4601      	mov	r1, r0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f000 fcad 	bl	800c6dc <__mcmp>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f77f aeb3 	ble.w	800baee <_dtoa_r+0x68e>
 800bd88:	4656      	mov	r6, sl
 800bd8a:	2331      	movs	r3, #49	@ 0x31
 800bd8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bd90:	9b04      	ldr	r3, [sp, #16]
 800bd92:	3301      	adds	r3, #1
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	e6ae      	b.n	800baf6 <_dtoa_r+0x696>
 800bd98:	9c07      	ldr	r4, [sp, #28]
 800bd9a:	9704      	str	r7, [sp, #16]
 800bd9c:	4625      	mov	r5, r4
 800bd9e:	e7f3      	b.n	800bd88 <_dtoa_r+0x928>
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f000 8104 	beq.w	800bfb4 <_dtoa_r+0xb54>
 800bdac:	2e00      	cmp	r6, #0
 800bdae:	dd05      	ble.n	800bdbc <_dtoa_r+0x95c>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	4658      	mov	r0, fp
 800bdb6:	f000 fc25 	bl	800c604 <__lshift>
 800bdba:	4605      	mov	r5, r0
 800bdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d05a      	beq.n	800be78 <_dtoa_r+0xa18>
 800bdc2:	6869      	ldr	r1, [r5, #4]
 800bdc4:	4658      	mov	r0, fp
 800bdc6:	f000 fa0f 	bl	800c1e8 <_Balloc>
 800bdca:	4606      	mov	r6, r0
 800bdcc:	b928      	cbnz	r0, 800bdda <_dtoa_r+0x97a>
 800bdce:	4b84      	ldr	r3, [pc, #528]	@ (800bfe0 <_dtoa_r+0xb80>)
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bdd6:	f7ff bb5a 	b.w	800b48e <_dtoa_r+0x2e>
 800bdda:	692a      	ldr	r2, [r5, #16]
 800bddc:	3202      	adds	r2, #2
 800bdde:	0092      	lsls	r2, r2, #2
 800bde0:	f105 010c 	add.w	r1, r5, #12
 800bde4:	300c      	adds	r0, #12
 800bde6:	f7ff faa2 	bl	800b32e <memcpy>
 800bdea:	2201      	movs	r2, #1
 800bdec:	4631      	mov	r1, r6
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f000 fc08 	bl	800c604 <__lshift>
 800bdf4:	f10a 0301 	add.w	r3, sl, #1
 800bdf8:	9307      	str	r3, [sp, #28]
 800bdfa:	9b00      	ldr	r3, [sp, #0]
 800bdfc:	4453      	add	r3, sl
 800bdfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be00:	9b02      	ldr	r3, [sp, #8]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	462f      	mov	r7, r5
 800be08:	930a      	str	r3, [sp, #40]	@ 0x28
 800be0a:	4605      	mov	r5, r0
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	4621      	mov	r1, r4
 800be10:	3b01      	subs	r3, #1
 800be12:	4648      	mov	r0, r9
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	f7ff fa98 	bl	800b34a <quorem>
 800be1a:	4639      	mov	r1, r7
 800be1c:	9002      	str	r0, [sp, #8]
 800be1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be22:	4648      	mov	r0, r9
 800be24:	f000 fc5a 	bl	800c6dc <__mcmp>
 800be28:	462a      	mov	r2, r5
 800be2a:	9008      	str	r0, [sp, #32]
 800be2c:	4621      	mov	r1, r4
 800be2e:	4658      	mov	r0, fp
 800be30:	f000 fc70 	bl	800c714 <__mdiff>
 800be34:	68c2      	ldr	r2, [r0, #12]
 800be36:	4606      	mov	r6, r0
 800be38:	bb02      	cbnz	r2, 800be7c <_dtoa_r+0xa1c>
 800be3a:	4601      	mov	r1, r0
 800be3c:	4648      	mov	r0, r9
 800be3e:	f000 fc4d 	bl	800c6dc <__mcmp>
 800be42:	4602      	mov	r2, r0
 800be44:	4631      	mov	r1, r6
 800be46:	4658      	mov	r0, fp
 800be48:	920e      	str	r2, [sp, #56]	@ 0x38
 800be4a:	f000 fa0d 	bl	800c268 <_Bfree>
 800be4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be52:	9e07      	ldr	r6, [sp, #28]
 800be54:	ea43 0102 	orr.w	r1, r3, r2
 800be58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be5a:	4319      	orrs	r1, r3
 800be5c:	d110      	bne.n	800be80 <_dtoa_r+0xa20>
 800be5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be62:	d029      	beq.n	800beb8 <_dtoa_r+0xa58>
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	2b00      	cmp	r3, #0
 800be68:	dd02      	ble.n	800be70 <_dtoa_r+0xa10>
 800be6a:	9b02      	ldr	r3, [sp, #8]
 800be6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	f883 8000 	strb.w	r8, [r3]
 800be76:	e63f      	b.n	800baf8 <_dtoa_r+0x698>
 800be78:	4628      	mov	r0, r5
 800be7a:	e7bb      	b.n	800bdf4 <_dtoa_r+0x994>
 800be7c:	2201      	movs	r2, #1
 800be7e:	e7e1      	b.n	800be44 <_dtoa_r+0x9e4>
 800be80:	9b08      	ldr	r3, [sp, #32]
 800be82:	2b00      	cmp	r3, #0
 800be84:	db04      	blt.n	800be90 <_dtoa_r+0xa30>
 800be86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be88:	430b      	orrs	r3, r1
 800be8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be8c:	430b      	orrs	r3, r1
 800be8e:	d120      	bne.n	800bed2 <_dtoa_r+0xa72>
 800be90:	2a00      	cmp	r2, #0
 800be92:	dded      	ble.n	800be70 <_dtoa_r+0xa10>
 800be94:	4649      	mov	r1, r9
 800be96:	2201      	movs	r2, #1
 800be98:	4658      	mov	r0, fp
 800be9a:	f000 fbb3 	bl	800c604 <__lshift>
 800be9e:	4621      	mov	r1, r4
 800bea0:	4681      	mov	r9, r0
 800bea2:	f000 fc1b 	bl	800c6dc <__mcmp>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	dc03      	bgt.n	800beb2 <_dtoa_r+0xa52>
 800beaa:	d1e1      	bne.n	800be70 <_dtoa_r+0xa10>
 800beac:	f018 0f01 	tst.w	r8, #1
 800beb0:	d0de      	beq.n	800be70 <_dtoa_r+0xa10>
 800beb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beb6:	d1d8      	bne.n	800be6a <_dtoa_r+0xa0a>
 800beb8:	9a00      	ldr	r2, [sp, #0]
 800beba:	2339      	movs	r3, #57	@ 0x39
 800bebc:	7013      	strb	r3, [r2, #0]
 800bebe:	4633      	mov	r3, r6
 800bec0:	461e      	mov	r6, r3
 800bec2:	3b01      	subs	r3, #1
 800bec4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bec8:	2a39      	cmp	r2, #57	@ 0x39
 800beca:	d052      	beq.n	800bf72 <_dtoa_r+0xb12>
 800becc:	3201      	adds	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	e612      	b.n	800baf8 <_dtoa_r+0x698>
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	dd07      	ble.n	800bee6 <_dtoa_r+0xa86>
 800bed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beda:	d0ed      	beq.n	800beb8 <_dtoa_r+0xa58>
 800bedc:	9a00      	ldr	r2, [sp, #0]
 800bede:	f108 0301 	add.w	r3, r8, #1
 800bee2:	7013      	strb	r3, [r2, #0]
 800bee4:	e608      	b.n	800baf8 <_dtoa_r+0x698>
 800bee6:	9b07      	ldr	r3, [sp, #28]
 800bee8:	9a07      	ldr	r2, [sp, #28]
 800beea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800beee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d028      	beq.n	800bf46 <_dtoa_r+0xae6>
 800bef4:	4649      	mov	r1, r9
 800bef6:	2300      	movs	r3, #0
 800bef8:	220a      	movs	r2, #10
 800befa:	4658      	mov	r0, fp
 800befc:	f000 f9d6 	bl	800c2ac <__multadd>
 800bf00:	42af      	cmp	r7, r5
 800bf02:	4681      	mov	r9, r0
 800bf04:	f04f 0300 	mov.w	r3, #0
 800bf08:	f04f 020a 	mov.w	r2, #10
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	4658      	mov	r0, fp
 800bf10:	d107      	bne.n	800bf22 <_dtoa_r+0xac2>
 800bf12:	f000 f9cb 	bl	800c2ac <__multadd>
 800bf16:	4607      	mov	r7, r0
 800bf18:	4605      	mov	r5, r0
 800bf1a:	9b07      	ldr	r3, [sp, #28]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	e774      	b.n	800be0c <_dtoa_r+0x9ac>
 800bf22:	f000 f9c3 	bl	800c2ac <__multadd>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4607      	mov	r7, r0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	4658      	mov	r0, fp
 800bf30:	f000 f9bc 	bl	800c2ac <__multadd>
 800bf34:	4605      	mov	r5, r0
 800bf36:	e7f0      	b.n	800bf1a <_dtoa_r+0xaba>
 800bf38:	9b00      	ldr	r3, [sp, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfcc      	ite	gt
 800bf3e:	461e      	movgt	r6, r3
 800bf40:	2601      	movle	r6, #1
 800bf42:	4456      	add	r6, sl
 800bf44:	2700      	movs	r7, #0
 800bf46:	4649      	mov	r1, r9
 800bf48:	2201      	movs	r2, #1
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 fb5a 	bl	800c604 <__lshift>
 800bf50:	4621      	mov	r1, r4
 800bf52:	4681      	mov	r9, r0
 800bf54:	f000 fbc2 	bl	800c6dc <__mcmp>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	dcb0      	bgt.n	800bebe <_dtoa_r+0xa5e>
 800bf5c:	d102      	bne.n	800bf64 <_dtoa_r+0xb04>
 800bf5e:	f018 0f01 	tst.w	r8, #1
 800bf62:	d1ac      	bne.n	800bebe <_dtoa_r+0xa5e>
 800bf64:	4633      	mov	r3, r6
 800bf66:	461e      	mov	r6, r3
 800bf68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf6c:	2a30      	cmp	r2, #48	@ 0x30
 800bf6e:	d0fa      	beq.n	800bf66 <_dtoa_r+0xb06>
 800bf70:	e5c2      	b.n	800baf8 <_dtoa_r+0x698>
 800bf72:	459a      	cmp	sl, r3
 800bf74:	d1a4      	bne.n	800bec0 <_dtoa_r+0xa60>
 800bf76:	9b04      	ldr	r3, [sp, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	2331      	movs	r3, #49	@ 0x31
 800bf7e:	f88a 3000 	strb.w	r3, [sl]
 800bf82:	e5b9      	b.n	800baf8 <_dtoa_r+0x698>
 800bf84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bfe4 <_dtoa_r+0xb84>
 800bf8a:	b11b      	cbz	r3, 800bf94 <_dtoa_r+0xb34>
 800bf8c:	f10a 0308 	add.w	r3, sl, #8
 800bf90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	4650      	mov	r0, sl
 800bf96:	b019      	add	sp, #100	@ 0x64
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	f77f ae37 	ble.w	800bc12 <_dtoa_r+0x7b2>
 800bfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	e655      	b.n	800bc58 <_dtoa_r+0x7f8>
 800bfac:	9b00      	ldr	r3, [sp, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f77f aed6 	ble.w	800bd60 <_dtoa_r+0x900>
 800bfb4:	4656      	mov	r6, sl
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4648      	mov	r0, r9
 800bfba:	f7ff f9c6 	bl	800b34a <quorem>
 800bfbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bfc2:	f806 8b01 	strb.w	r8, [r6], #1
 800bfc6:	9b00      	ldr	r3, [sp, #0]
 800bfc8:	eba6 020a 	sub.w	r2, r6, sl
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	ddb3      	ble.n	800bf38 <_dtoa_r+0xad8>
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f000 f968 	bl	800c2ac <__multadd>
 800bfdc:	4681      	mov	r9, r0
 800bfde:	e7ea      	b.n	800bfb6 <_dtoa_r+0xb56>
 800bfe0:	080111e0 	.word	0x080111e0
 800bfe4:	08011164 	.word	0x08011164

0800bfe8 <_free_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4605      	mov	r5, r0
 800bfec:	2900      	cmp	r1, #0
 800bfee:	d041      	beq.n	800c074 <_free_r+0x8c>
 800bff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff4:	1f0c      	subs	r4, r1, #4
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfb8      	it	lt
 800bffa:	18e4      	addlt	r4, r4, r3
 800bffc:	f000 f8e8 	bl	800c1d0 <__malloc_lock>
 800c000:	4a1d      	ldr	r2, [pc, #116]	@ (800c078 <_free_r+0x90>)
 800c002:	6813      	ldr	r3, [r2, #0]
 800c004:	b933      	cbnz	r3, 800c014 <_free_r+0x2c>
 800c006:	6063      	str	r3, [r4, #4]
 800c008:	6014      	str	r4, [r2, #0]
 800c00a:	4628      	mov	r0, r5
 800c00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c010:	f000 b8e4 	b.w	800c1dc <__malloc_unlock>
 800c014:	42a3      	cmp	r3, r4
 800c016:	d908      	bls.n	800c02a <_free_r+0x42>
 800c018:	6820      	ldr	r0, [r4, #0]
 800c01a:	1821      	adds	r1, r4, r0
 800c01c:	428b      	cmp	r3, r1
 800c01e:	bf01      	itttt	eq
 800c020:	6819      	ldreq	r1, [r3, #0]
 800c022:	685b      	ldreq	r3, [r3, #4]
 800c024:	1809      	addeq	r1, r1, r0
 800c026:	6021      	streq	r1, [r4, #0]
 800c028:	e7ed      	b.n	800c006 <_free_r+0x1e>
 800c02a:	461a      	mov	r2, r3
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	b10b      	cbz	r3, 800c034 <_free_r+0x4c>
 800c030:	42a3      	cmp	r3, r4
 800c032:	d9fa      	bls.n	800c02a <_free_r+0x42>
 800c034:	6811      	ldr	r1, [r2, #0]
 800c036:	1850      	adds	r0, r2, r1
 800c038:	42a0      	cmp	r0, r4
 800c03a:	d10b      	bne.n	800c054 <_free_r+0x6c>
 800c03c:	6820      	ldr	r0, [r4, #0]
 800c03e:	4401      	add	r1, r0
 800c040:	1850      	adds	r0, r2, r1
 800c042:	4283      	cmp	r3, r0
 800c044:	6011      	str	r1, [r2, #0]
 800c046:	d1e0      	bne.n	800c00a <_free_r+0x22>
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	6053      	str	r3, [r2, #4]
 800c04e:	4408      	add	r0, r1
 800c050:	6010      	str	r0, [r2, #0]
 800c052:	e7da      	b.n	800c00a <_free_r+0x22>
 800c054:	d902      	bls.n	800c05c <_free_r+0x74>
 800c056:	230c      	movs	r3, #12
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	e7d6      	b.n	800c00a <_free_r+0x22>
 800c05c:	6820      	ldr	r0, [r4, #0]
 800c05e:	1821      	adds	r1, r4, r0
 800c060:	428b      	cmp	r3, r1
 800c062:	bf04      	itt	eq
 800c064:	6819      	ldreq	r1, [r3, #0]
 800c066:	685b      	ldreq	r3, [r3, #4]
 800c068:	6063      	str	r3, [r4, #4]
 800c06a:	bf04      	itt	eq
 800c06c:	1809      	addeq	r1, r1, r0
 800c06e:	6021      	streq	r1, [r4, #0]
 800c070:	6054      	str	r4, [r2, #4]
 800c072:	e7ca      	b.n	800c00a <_free_r+0x22>
 800c074:	bd38      	pop	{r3, r4, r5, pc}
 800c076:	bf00      	nop
 800c078:	2000a76c 	.word	0x2000a76c

0800c07c <malloc>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <malloc+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f000 b825 	b.w	800c0d0 <_malloc_r>
 800c086:	bf00      	nop
 800c088:	2000002c 	.word	0x2000002c

0800c08c <sbrk_aligned>:
 800c08c:	b570      	push	{r4, r5, r6, lr}
 800c08e:	4e0f      	ldr	r6, [pc, #60]	@ (800c0cc <sbrk_aligned+0x40>)
 800c090:	460c      	mov	r4, r1
 800c092:	6831      	ldr	r1, [r6, #0]
 800c094:	4605      	mov	r5, r0
 800c096:	b911      	cbnz	r1, 800c09e <sbrk_aligned+0x12>
 800c098:	f001 fd58 	bl	800db4c <_sbrk_r>
 800c09c:	6030      	str	r0, [r6, #0]
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f001 fd53 	bl	800db4c <_sbrk_r>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d103      	bne.n	800c0b2 <sbrk_aligned+0x26>
 800c0aa:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}
 800c0b2:	1cc4      	adds	r4, r0, #3
 800c0b4:	f024 0403 	bic.w	r4, r4, #3
 800c0b8:	42a0      	cmp	r0, r4
 800c0ba:	d0f8      	beq.n	800c0ae <sbrk_aligned+0x22>
 800c0bc:	1a21      	subs	r1, r4, r0
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f001 fd44 	bl	800db4c <_sbrk_r>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d1f2      	bne.n	800c0ae <sbrk_aligned+0x22>
 800c0c8:	e7ef      	b.n	800c0aa <sbrk_aligned+0x1e>
 800c0ca:	bf00      	nop
 800c0cc:	2000a768 	.word	0x2000a768

0800c0d0 <_malloc_r>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	1ccd      	adds	r5, r1, #3
 800c0d6:	f025 0503 	bic.w	r5, r5, #3
 800c0da:	3508      	adds	r5, #8
 800c0dc:	2d0c      	cmp	r5, #12
 800c0de:	bf38      	it	cc
 800c0e0:	250c      	movcc	r5, #12
 800c0e2:	2d00      	cmp	r5, #0
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	db01      	blt.n	800c0ec <_malloc_r+0x1c>
 800c0e8:	42a9      	cmp	r1, r5
 800c0ea:	d904      	bls.n	800c0f6 <_malloc_r+0x26>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	6033      	str	r3, [r6, #0]
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1cc <_malloc_r+0xfc>
 800c0fa:	f000 f869 	bl	800c1d0 <__malloc_lock>
 800c0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c102:	461c      	mov	r4, r3
 800c104:	bb44      	cbnz	r4, 800c158 <_malloc_r+0x88>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff ffbf 	bl	800c08c <sbrk_aligned>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	4604      	mov	r4, r0
 800c112:	d158      	bne.n	800c1c6 <_malloc_r+0xf6>
 800c114:	f8d8 4000 	ldr.w	r4, [r8]
 800c118:	4627      	mov	r7, r4
 800c11a:	2f00      	cmp	r7, #0
 800c11c:	d143      	bne.n	800c1a6 <_malloc_r+0xd6>
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d04b      	beq.n	800c1ba <_malloc_r+0xea>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	4639      	mov	r1, r7
 800c126:	4630      	mov	r0, r6
 800c128:	eb04 0903 	add.w	r9, r4, r3
 800c12c:	f001 fd0e 	bl	800db4c <_sbrk_r>
 800c130:	4581      	cmp	r9, r0
 800c132:	d142      	bne.n	800c1ba <_malloc_r+0xea>
 800c134:	6821      	ldr	r1, [r4, #0]
 800c136:	1a6d      	subs	r5, r5, r1
 800c138:	4629      	mov	r1, r5
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7ff ffa6 	bl	800c08c <sbrk_aligned>
 800c140:	3001      	adds	r0, #1
 800c142:	d03a      	beq.n	800c1ba <_malloc_r+0xea>
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	442b      	add	r3, r5
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	f8d8 3000 	ldr.w	r3, [r8]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	bb62      	cbnz	r2, 800c1ac <_malloc_r+0xdc>
 800c152:	f8c8 7000 	str.w	r7, [r8]
 800c156:	e00f      	b.n	800c178 <_malloc_r+0xa8>
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	1b52      	subs	r2, r2, r5
 800c15c:	d420      	bmi.n	800c1a0 <_malloc_r+0xd0>
 800c15e:	2a0b      	cmp	r2, #11
 800c160:	d917      	bls.n	800c192 <_malloc_r+0xc2>
 800c162:	1961      	adds	r1, r4, r5
 800c164:	42a3      	cmp	r3, r4
 800c166:	6025      	str	r5, [r4, #0]
 800c168:	bf18      	it	ne
 800c16a:	6059      	strne	r1, [r3, #4]
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	bf08      	it	eq
 800c170:	f8c8 1000 	streq.w	r1, [r8]
 800c174:	5162      	str	r2, [r4, r5]
 800c176:	604b      	str	r3, [r1, #4]
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f82f 	bl	800c1dc <__malloc_unlock>
 800c17e:	f104 000b 	add.w	r0, r4, #11
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	f020 0007 	bic.w	r0, r0, #7
 800c188:	1ac2      	subs	r2, r0, r3
 800c18a:	bf1c      	itt	ne
 800c18c:	1a1b      	subne	r3, r3, r0
 800c18e:	50a3      	strne	r3, [r4, r2]
 800c190:	e7af      	b.n	800c0f2 <_malloc_r+0x22>
 800c192:	6862      	ldr	r2, [r4, #4]
 800c194:	42a3      	cmp	r3, r4
 800c196:	bf0c      	ite	eq
 800c198:	f8c8 2000 	streq.w	r2, [r8]
 800c19c:	605a      	strne	r2, [r3, #4]
 800c19e:	e7eb      	b.n	800c178 <_malloc_r+0xa8>
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	6864      	ldr	r4, [r4, #4]
 800c1a4:	e7ae      	b.n	800c104 <_malloc_r+0x34>
 800c1a6:	463c      	mov	r4, r7
 800c1a8:	687f      	ldr	r7, [r7, #4]
 800c1aa:	e7b6      	b.n	800c11a <_malloc_r+0x4a>
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	42a3      	cmp	r3, r4
 800c1b2:	d1fb      	bne.n	800c1ac <_malloc_r+0xdc>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6053      	str	r3, [r2, #4]
 800c1b8:	e7de      	b.n	800c178 <_malloc_r+0xa8>
 800c1ba:	230c      	movs	r3, #12
 800c1bc:	6033      	str	r3, [r6, #0]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f000 f80c 	bl	800c1dc <__malloc_unlock>
 800c1c4:	e794      	b.n	800c0f0 <_malloc_r+0x20>
 800c1c6:	6005      	str	r5, [r0, #0]
 800c1c8:	e7d6      	b.n	800c178 <_malloc_r+0xa8>
 800c1ca:	bf00      	nop
 800c1cc:	2000a76c 	.word	0x2000a76c

0800c1d0 <__malloc_lock>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	@ (800c1d8 <__malloc_lock+0x8>)
 800c1d2:	f7ff b8aa 	b.w	800b32a <__retarget_lock_acquire_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	2000a764 	.word	0x2000a764

0800c1dc <__malloc_unlock>:
 800c1dc:	4801      	ldr	r0, [pc, #4]	@ (800c1e4 <__malloc_unlock+0x8>)
 800c1de:	f7ff b8a5 	b.w	800b32c <__retarget_lock_release_recursive>
 800c1e2:	bf00      	nop
 800c1e4:	2000a764 	.word	0x2000a764

0800c1e8 <_Balloc>:
 800c1e8:	b570      	push	{r4, r5, r6, lr}
 800c1ea:	69c6      	ldr	r6, [r0, #28]
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	b976      	cbnz	r6, 800c210 <_Balloc+0x28>
 800c1f2:	2010      	movs	r0, #16
 800c1f4:	f7ff ff42 	bl	800c07c <malloc>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	61e0      	str	r0, [r4, #28]
 800c1fc:	b920      	cbnz	r0, 800c208 <_Balloc+0x20>
 800c1fe:	4b18      	ldr	r3, [pc, #96]	@ (800c260 <_Balloc+0x78>)
 800c200:	4818      	ldr	r0, [pc, #96]	@ (800c264 <_Balloc+0x7c>)
 800c202:	216b      	movs	r1, #107	@ 0x6b
 800c204:	f001 fcb2 	bl	800db6c <__assert_func>
 800c208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c20c:	6006      	str	r6, [r0, #0]
 800c20e:	60c6      	str	r6, [r0, #12]
 800c210:	69e6      	ldr	r6, [r4, #28]
 800c212:	68f3      	ldr	r3, [r6, #12]
 800c214:	b183      	cbz	r3, 800c238 <_Balloc+0x50>
 800c216:	69e3      	ldr	r3, [r4, #28]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c21e:	b9b8      	cbnz	r0, 800c250 <_Balloc+0x68>
 800c220:	2101      	movs	r1, #1
 800c222:	fa01 f605 	lsl.w	r6, r1, r5
 800c226:	1d72      	adds	r2, r6, #5
 800c228:	0092      	lsls	r2, r2, #2
 800c22a:	4620      	mov	r0, r4
 800c22c:	f001 fcbc 	bl	800dba8 <_calloc_r>
 800c230:	b160      	cbz	r0, 800c24c <_Balloc+0x64>
 800c232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c236:	e00e      	b.n	800c256 <_Balloc+0x6e>
 800c238:	2221      	movs	r2, #33	@ 0x21
 800c23a:	2104      	movs	r1, #4
 800c23c:	4620      	mov	r0, r4
 800c23e:	f001 fcb3 	bl	800dba8 <_calloc_r>
 800c242:	69e3      	ldr	r3, [r4, #28]
 800c244:	60f0      	str	r0, [r6, #12]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e4      	bne.n	800c216 <_Balloc+0x2e>
 800c24c:	2000      	movs	r0, #0
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	6802      	ldr	r2, [r0, #0]
 800c252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c256:	2300      	movs	r3, #0
 800c258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c25c:	e7f7      	b.n	800c24e <_Balloc+0x66>
 800c25e:	bf00      	nop
 800c260:	08011171 	.word	0x08011171
 800c264:	080111f1 	.word	0x080111f1

0800c268 <_Bfree>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	69c6      	ldr	r6, [r0, #28]
 800c26c:	4605      	mov	r5, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	b976      	cbnz	r6, 800c290 <_Bfree+0x28>
 800c272:	2010      	movs	r0, #16
 800c274:	f7ff ff02 	bl	800c07c <malloc>
 800c278:	4602      	mov	r2, r0
 800c27a:	61e8      	str	r0, [r5, #28]
 800c27c:	b920      	cbnz	r0, 800c288 <_Bfree+0x20>
 800c27e:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <_Bfree+0x3c>)
 800c280:	4809      	ldr	r0, [pc, #36]	@ (800c2a8 <_Bfree+0x40>)
 800c282:	218f      	movs	r1, #143	@ 0x8f
 800c284:	f001 fc72 	bl	800db6c <__assert_func>
 800c288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c28c:	6006      	str	r6, [r0, #0]
 800c28e:	60c6      	str	r6, [r0, #12]
 800c290:	b13c      	cbz	r4, 800c2a2 <_Bfree+0x3a>
 800c292:	69eb      	ldr	r3, [r5, #28]
 800c294:	6862      	ldr	r2, [r4, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c29c:	6021      	str	r1, [r4, #0]
 800c29e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}
 800c2a4:	08011171 	.word	0x08011171
 800c2a8:	080111f1 	.word	0x080111f1

0800c2ac <__multadd>:
 800c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b0:	690d      	ldr	r5, [r1, #16]
 800c2b2:	4607      	mov	r7, r0
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	461e      	mov	r6, r3
 800c2b8:	f101 0c14 	add.w	ip, r1, #20
 800c2bc:	2000      	movs	r0, #0
 800c2be:	f8dc 3000 	ldr.w	r3, [ip]
 800c2c2:	b299      	uxth	r1, r3
 800c2c4:	fb02 6101 	mla	r1, r2, r1, r6
 800c2c8:	0c1e      	lsrs	r6, r3, #16
 800c2ca:	0c0b      	lsrs	r3, r1, #16
 800c2cc:	fb02 3306 	mla	r3, r2, r6, r3
 800c2d0:	b289      	uxth	r1, r1
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2d8:	4285      	cmp	r5, r0
 800c2da:	f84c 1b04 	str.w	r1, [ip], #4
 800c2de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2e2:	dcec      	bgt.n	800c2be <__multadd+0x12>
 800c2e4:	b30e      	cbz	r6, 800c32a <__multadd+0x7e>
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	42ab      	cmp	r3, r5
 800c2ea:	dc19      	bgt.n	800c320 <__multadd+0x74>
 800c2ec:	6861      	ldr	r1, [r4, #4]
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	3101      	adds	r1, #1
 800c2f2:	f7ff ff79 	bl	800c1e8 <_Balloc>
 800c2f6:	4680      	mov	r8, r0
 800c2f8:	b928      	cbnz	r0, 800c306 <__multadd+0x5a>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c330 <__multadd+0x84>)
 800c2fe:	480d      	ldr	r0, [pc, #52]	@ (800c334 <__multadd+0x88>)
 800c300:	21ba      	movs	r1, #186	@ 0xba
 800c302:	f001 fc33 	bl	800db6c <__assert_func>
 800c306:	6922      	ldr	r2, [r4, #16]
 800c308:	3202      	adds	r2, #2
 800c30a:	f104 010c 	add.w	r1, r4, #12
 800c30e:	0092      	lsls	r2, r2, #2
 800c310:	300c      	adds	r0, #12
 800c312:	f7ff f80c 	bl	800b32e <memcpy>
 800c316:	4621      	mov	r1, r4
 800c318:	4638      	mov	r0, r7
 800c31a:	f7ff ffa5 	bl	800c268 <_Bfree>
 800c31e:	4644      	mov	r4, r8
 800c320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c324:	3501      	adds	r5, #1
 800c326:	615e      	str	r6, [r3, #20]
 800c328:	6125      	str	r5, [r4, #16]
 800c32a:	4620      	mov	r0, r4
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	080111e0 	.word	0x080111e0
 800c334:	080111f1 	.word	0x080111f1

0800c338 <__hi0bits>:
 800c338:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c33c:	4603      	mov	r3, r0
 800c33e:	bf36      	itet	cc
 800c340:	0403      	lslcc	r3, r0, #16
 800c342:	2000      	movcs	r0, #0
 800c344:	2010      	movcc	r0, #16
 800c346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c34a:	bf3c      	itt	cc
 800c34c:	021b      	lslcc	r3, r3, #8
 800c34e:	3008      	addcc	r0, #8
 800c350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c354:	bf3c      	itt	cc
 800c356:	011b      	lslcc	r3, r3, #4
 800c358:	3004      	addcc	r0, #4
 800c35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c35e:	bf3c      	itt	cc
 800c360:	009b      	lslcc	r3, r3, #2
 800c362:	3002      	addcc	r0, #2
 800c364:	2b00      	cmp	r3, #0
 800c366:	db05      	blt.n	800c374 <__hi0bits+0x3c>
 800c368:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c36c:	f100 0001 	add.w	r0, r0, #1
 800c370:	bf08      	it	eq
 800c372:	2020      	moveq	r0, #32
 800c374:	4770      	bx	lr

0800c376 <__lo0bits>:
 800c376:	6803      	ldr	r3, [r0, #0]
 800c378:	4602      	mov	r2, r0
 800c37a:	f013 0007 	ands.w	r0, r3, #7
 800c37e:	d00b      	beq.n	800c398 <__lo0bits+0x22>
 800c380:	07d9      	lsls	r1, r3, #31
 800c382:	d421      	bmi.n	800c3c8 <__lo0bits+0x52>
 800c384:	0798      	lsls	r0, r3, #30
 800c386:	bf49      	itett	mi
 800c388:	085b      	lsrmi	r3, r3, #1
 800c38a:	089b      	lsrpl	r3, r3, #2
 800c38c:	2001      	movmi	r0, #1
 800c38e:	6013      	strmi	r3, [r2, #0]
 800c390:	bf5c      	itt	pl
 800c392:	6013      	strpl	r3, [r2, #0]
 800c394:	2002      	movpl	r0, #2
 800c396:	4770      	bx	lr
 800c398:	b299      	uxth	r1, r3
 800c39a:	b909      	cbnz	r1, 800c3a0 <__lo0bits+0x2a>
 800c39c:	0c1b      	lsrs	r3, r3, #16
 800c39e:	2010      	movs	r0, #16
 800c3a0:	b2d9      	uxtb	r1, r3
 800c3a2:	b909      	cbnz	r1, 800c3a8 <__lo0bits+0x32>
 800c3a4:	3008      	adds	r0, #8
 800c3a6:	0a1b      	lsrs	r3, r3, #8
 800c3a8:	0719      	lsls	r1, r3, #28
 800c3aa:	bf04      	itt	eq
 800c3ac:	091b      	lsreq	r3, r3, #4
 800c3ae:	3004      	addeq	r0, #4
 800c3b0:	0799      	lsls	r1, r3, #30
 800c3b2:	bf04      	itt	eq
 800c3b4:	089b      	lsreq	r3, r3, #2
 800c3b6:	3002      	addeq	r0, #2
 800c3b8:	07d9      	lsls	r1, r3, #31
 800c3ba:	d403      	bmi.n	800c3c4 <__lo0bits+0x4e>
 800c3bc:	085b      	lsrs	r3, r3, #1
 800c3be:	f100 0001 	add.w	r0, r0, #1
 800c3c2:	d003      	beq.n	800c3cc <__lo0bits+0x56>
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	4770      	bx	lr
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	4770      	bx	lr
 800c3cc:	2020      	movs	r0, #32
 800c3ce:	4770      	bx	lr

0800c3d0 <__i2b>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	f7ff ff07 	bl	800c1e8 <_Balloc>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	b928      	cbnz	r0, 800c3ea <__i2b+0x1a>
 800c3de:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <__i2b+0x24>)
 800c3e0:	4805      	ldr	r0, [pc, #20]	@ (800c3f8 <__i2b+0x28>)
 800c3e2:	f240 1145 	movw	r1, #325	@ 0x145
 800c3e6:	f001 fbc1 	bl	800db6c <__assert_func>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	6144      	str	r4, [r0, #20]
 800c3ee:	6103      	str	r3, [r0, #16]
 800c3f0:	bd10      	pop	{r4, pc}
 800c3f2:	bf00      	nop
 800c3f4:	080111e0 	.word	0x080111e0
 800c3f8:	080111f1 	.word	0x080111f1

0800c3fc <__multiply>:
 800c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c400:	4614      	mov	r4, r2
 800c402:	690a      	ldr	r2, [r1, #16]
 800c404:	6923      	ldr	r3, [r4, #16]
 800c406:	429a      	cmp	r2, r3
 800c408:	bfa8      	it	ge
 800c40a:	4623      	movge	r3, r4
 800c40c:	460f      	mov	r7, r1
 800c40e:	bfa4      	itt	ge
 800c410:	460c      	movge	r4, r1
 800c412:	461f      	movge	r7, r3
 800c414:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c418:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	6861      	ldr	r1, [r4, #4]
 800c420:	eb0a 0609 	add.w	r6, sl, r9
 800c424:	42b3      	cmp	r3, r6
 800c426:	b085      	sub	sp, #20
 800c428:	bfb8      	it	lt
 800c42a:	3101      	addlt	r1, #1
 800c42c:	f7ff fedc 	bl	800c1e8 <_Balloc>
 800c430:	b930      	cbnz	r0, 800c440 <__multiply+0x44>
 800c432:	4602      	mov	r2, r0
 800c434:	4b44      	ldr	r3, [pc, #272]	@ (800c548 <__multiply+0x14c>)
 800c436:	4845      	ldr	r0, [pc, #276]	@ (800c54c <__multiply+0x150>)
 800c438:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c43c:	f001 fb96 	bl	800db6c <__assert_func>
 800c440:	f100 0514 	add.w	r5, r0, #20
 800c444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c448:	462b      	mov	r3, r5
 800c44a:	2200      	movs	r2, #0
 800c44c:	4543      	cmp	r3, r8
 800c44e:	d321      	bcc.n	800c494 <__multiply+0x98>
 800c450:	f107 0114 	add.w	r1, r7, #20
 800c454:	f104 0214 	add.w	r2, r4, #20
 800c458:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c45c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c460:	9302      	str	r3, [sp, #8]
 800c462:	1b13      	subs	r3, r2, r4
 800c464:	3b15      	subs	r3, #21
 800c466:	f023 0303 	bic.w	r3, r3, #3
 800c46a:	3304      	adds	r3, #4
 800c46c:	f104 0715 	add.w	r7, r4, #21
 800c470:	42ba      	cmp	r2, r7
 800c472:	bf38      	it	cc
 800c474:	2304      	movcc	r3, #4
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	9b02      	ldr	r3, [sp, #8]
 800c47a:	9103      	str	r1, [sp, #12]
 800c47c:	428b      	cmp	r3, r1
 800c47e:	d80c      	bhi.n	800c49a <__multiply+0x9e>
 800c480:	2e00      	cmp	r6, #0
 800c482:	dd03      	ble.n	800c48c <__multiply+0x90>
 800c484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d05b      	beq.n	800c544 <__multiply+0x148>
 800c48c:	6106      	str	r6, [r0, #16]
 800c48e:	b005      	add	sp, #20
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	f843 2b04 	str.w	r2, [r3], #4
 800c498:	e7d8      	b.n	800c44c <__multiply+0x50>
 800c49a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c49e:	f1ba 0f00 	cmp.w	sl, #0
 800c4a2:	d024      	beq.n	800c4ee <__multiply+0xf2>
 800c4a4:	f104 0e14 	add.w	lr, r4, #20
 800c4a8:	46a9      	mov	r9, r5
 800c4aa:	f04f 0c00 	mov.w	ip, #0
 800c4ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c4b6:	fa1f fb87 	uxth.w	fp, r7
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c4c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c4c4:	f8d9 7000 	ldr.w	r7, [r9]
 800c4c8:	4463      	add	r3, ip
 800c4ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800c4d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4dc:	4572      	cmp	r2, lr
 800c4de:	f849 3b04 	str.w	r3, [r9], #4
 800c4e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4e6:	d8e2      	bhi.n	800c4ae <__multiply+0xb2>
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	f845 c003 	str.w	ip, [r5, r3]
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4f4:	3104      	adds	r1, #4
 800c4f6:	f1b9 0f00 	cmp.w	r9, #0
 800c4fa:	d021      	beq.n	800c540 <__multiply+0x144>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	f104 0c14 	add.w	ip, r4, #20
 800c502:	46ae      	mov	lr, r5
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	f8bc b000 	ldrh.w	fp, [ip]
 800c50c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c510:	fb09 770b 	mla	r7, r9, fp, r7
 800c514:	4457      	add	r7, sl
 800c516:	b29b      	uxth	r3, r3
 800c518:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c51c:	f84e 3b04 	str.w	r3, [lr], #4
 800c520:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c524:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c528:	f8be 3000 	ldrh.w	r3, [lr]
 800c52c:	fb09 330a 	mla	r3, r9, sl, r3
 800c530:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c534:	4562      	cmp	r2, ip
 800c536:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c53a:	d8e5      	bhi.n	800c508 <__multiply+0x10c>
 800c53c:	9f01      	ldr	r7, [sp, #4]
 800c53e:	51eb      	str	r3, [r5, r7]
 800c540:	3504      	adds	r5, #4
 800c542:	e799      	b.n	800c478 <__multiply+0x7c>
 800c544:	3e01      	subs	r6, #1
 800c546:	e79b      	b.n	800c480 <__multiply+0x84>
 800c548:	080111e0 	.word	0x080111e0
 800c54c:	080111f1 	.word	0x080111f1

0800c550 <__pow5mult>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	4615      	mov	r5, r2
 800c556:	f012 0203 	ands.w	r2, r2, #3
 800c55a:	4607      	mov	r7, r0
 800c55c:	460e      	mov	r6, r1
 800c55e:	d007      	beq.n	800c570 <__pow5mult+0x20>
 800c560:	4c25      	ldr	r4, [pc, #148]	@ (800c5f8 <__pow5mult+0xa8>)
 800c562:	3a01      	subs	r2, #1
 800c564:	2300      	movs	r3, #0
 800c566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c56a:	f7ff fe9f 	bl	800c2ac <__multadd>
 800c56e:	4606      	mov	r6, r0
 800c570:	10ad      	asrs	r5, r5, #2
 800c572:	d03d      	beq.n	800c5f0 <__pow5mult+0xa0>
 800c574:	69fc      	ldr	r4, [r7, #28]
 800c576:	b97c      	cbnz	r4, 800c598 <__pow5mult+0x48>
 800c578:	2010      	movs	r0, #16
 800c57a:	f7ff fd7f 	bl	800c07c <malloc>
 800c57e:	4602      	mov	r2, r0
 800c580:	61f8      	str	r0, [r7, #28]
 800c582:	b928      	cbnz	r0, 800c590 <__pow5mult+0x40>
 800c584:	4b1d      	ldr	r3, [pc, #116]	@ (800c5fc <__pow5mult+0xac>)
 800c586:	481e      	ldr	r0, [pc, #120]	@ (800c600 <__pow5mult+0xb0>)
 800c588:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c58c:	f001 faee 	bl	800db6c <__assert_func>
 800c590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c594:	6004      	str	r4, [r0, #0]
 800c596:	60c4      	str	r4, [r0, #12]
 800c598:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c59c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5a0:	b94c      	cbnz	r4, 800c5b6 <__pow5mult+0x66>
 800c5a2:	f240 2171 	movw	r1, #625	@ 0x271
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	f7ff ff12 	bl	800c3d0 <__i2b>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	6003      	str	r3, [r0, #0]
 800c5b6:	f04f 0900 	mov.w	r9, #0
 800c5ba:	07eb      	lsls	r3, r5, #31
 800c5bc:	d50a      	bpl.n	800c5d4 <__pow5mult+0x84>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff ff1a 	bl	800c3fc <__multiply>
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4680      	mov	r8, r0
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	f7ff fe4b 	bl	800c268 <_Bfree>
 800c5d2:	4646      	mov	r6, r8
 800c5d4:	106d      	asrs	r5, r5, #1
 800c5d6:	d00b      	beq.n	800c5f0 <__pow5mult+0xa0>
 800c5d8:	6820      	ldr	r0, [r4, #0]
 800c5da:	b938      	cbnz	r0, 800c5ec <__pow5mult+0x9c>
 800c5dc:	4622      	mov	r2, r4
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ff0b 	bl	800c3fc <__multiply>
 800c5e6:	6020      	str	r0, [r4, #0]
 800c5e8:	f8c0 9000 	str.w	r9, [r0]
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	e7e4      	b.n	800c5ba <__pow5mult+0x6a>
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f6:	bf00      	nop
 800c5f8:	0801124c 	.word	0x0801124c
 800c5fc:	08011171 	.word	0x08011171
 800c600:	080111f1 	.word	0x080111f1

0800c604 <__lshift>:
 800c604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c608:	460c      	mov	r4, r1
 800c60a:	6849      	ldr	r1, [r1, #4]
 800c60c:	6923      	ldr	r3, [r4, #16]
 800c60e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	4607      	mov	r7, r0
 800c616:	4691      	mov	r9, r2
 800c618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c61c:	f108 0601 	add.w	r6, r8, #1
 800c620:	42b3      	cmp	r3, r6
 800c622:	db0b      	blt.n	800c63c <__lshift+0x38>
 800c624:	4638      	mov	r0, r7
 800c626:	f7ff fddf 	bl	800c1e8 <_Balloc>
 800c62a:	4605      	mov	r5, r0
 800c62c:	b948      	cbnz	r0, 800c642 <__lshift+0x3e>
 800c62e:	4602      	mov	r2, r0
 800c630:	4b28      	ldr	r3, [pc, #160]	@ (800c6d4 <__lshift+0xd0>)
 800c632:	4829      	ldr	r0, [pc, #164]	@ (800c6d8 <__lshift+0xd4>)
 800c634:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c638:	f001 fa98 	bl	800db6c <__assert_func>
 800c63c:	3101      	adds	r1, #1
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	e7ee      	b.n	800c620 <__lshift+0x1c>
 800c642:	2300      	movs	r3, #0
 800c644:	f100 0114 	add.w	r1, r0, #20
 800c648:	f100 0210 	add.w	r2, r0, #16
 800c64c:	4618      	mov	r0, r3
 800c64e:	4553      	cmp	r3, sl
 800c650:	db33      	blt.n	800c6ba <__lshift+0xb6>
 800c652:	6920      	ldr	r0, [r4, #16]
 800c654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c658:	f104 0314 	add.w	r3, r4, #20
 800c65c:	f019 091f 	ands.w	r9, r9, #31
 800c660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c664:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c668:	d02b      	beq.n	800c6c2 <__lshift+0xbe>
 800c66a:	f1c9 0e20 	rsb	lr, r9, #32
 800c66e:	468a      	mov	sl, r1
 800c670:	2200      	movs	r2, #0
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	fa00 f009 	lsl.w	r0, r0, r9
 800c678:	4310      	orrs	r0, r2
 800c67a:	f84a 0b04 	str.w	r0, [sl], #4
 800c67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c682:	459c      	cmp	ip, r3
 800c684:	fa22 f20e 	lsr.w	r2, r2, lr
 800c688:	d8f3      	bhi.n	800c672 <__lshift+0x6e>
 800c68a:	ebac 0304 	sub.w	r3, ip, r4
 800c68e:	3b15      	subs	r3, #21
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	3304      	adds	r3, #4
 800c696:	f104 0015 	add.w	r0, r4, #21
 800c69a:	4584      	cmp	ip, r0
 800c69c:	bf38      	it	cc
 800c69e:	2304      	movcc	r3, #4
 800c6a0:	50ca      	str	r2, [r1, r3]
 800c6a2:	b10a      	cbz	r2, 800c6a8 <__lshift+0xa4>
 800c6a4:	f108 0602 	add.w	r6, r8, #2
 800c6a8:	3e01      	subs	r6, #1
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	612e      	str	r6, [r5, #16]
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f7ff fdda 	bl	800c268 <_Bfree>
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6be:	3301      	adds	r3, #1
 800c6c0:	e7c5      	b.n	800c64e <__lshift+0x4a>
 800c6c2:	3904      	subs	r1, #4
 800c6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6cc:	459c      	cmp	ip, r3
 800c6ce:	d8f9      	bhi.n	800c6c4 <__lshift+0xc0>
 800c6d0:	e7ea      	b.n	800c6a8 <__lshift+0xa4>
 800c6d2:	bf00      	nop
 800c6d4:	080111e0 	.word	0x080111e0
 800c6d8:	080111f1 	.word	0x080111f1

0800c6dc <__mcmp>:
 800c6dc:	690a      	ldr	r2, [r1, #16]
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6900      	ldr	r0, [r0, #16]
 800c6e2:	1a80      	subs	r0, r0, r2
 800c6e4:	b530      	push	{r4, r5, lr}
 800c6e6:	d10e      	bne.n	800c706 <__mcmp+0x2a>
 800c6e8:	3314      	adds	r3, #20
 800c6ea:	3114      	adds	r1, #20
 800c6ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6fc:	4295      	cmp	r5, r2
 800c6fe:	d003      	beq.n	800c708 <__mcmp+0x2c>
 800c700:	d205      	bcs.n	800c70e <__mcmp+0x32>
 800c702:	f04f 30ff 	mov.w	r0, #4294967295
 800c706:	bd30      	pop	{r4, r5, pc}
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d3f3      	bcc.n	800c6f4 <__mcmp+0x18>
 800c70c:	e7fb      	b.n	800c706 <__mcmp+0x2a>
 800c70e:	2001      	movs	r0, #1
 800c710:	e7f9      	b.n	800c706 <__mcmp+0x2a>
	...

0800c714 <__mdiff>:
 800c714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	4689      	mov	r9, r1
 800c71a:	4606      	mov	r6, r0
 800c71c:	4611      	mov	r1, r2
 800c71e:	4648      	mov	r0, r9
 800c720:	4614      	mov	r4, r2
 800c722:	f7ff ffdb 	bl	800c6dc <__mcmp>
 800c726:	1e05      	subs	r5, r0, #0
 800c728:	d112      	bne.n	800c750 <__mdiff+0x3c>
 800c72a:	4629      	mov	r1, r5
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7ff fd5b 	bl	800c1e8 <_Balloc>
 800c732:	4602      	mov	r2, r0
 800c734:	b928      	cbnz	r0, 800c742 <__mdiff+0x2e>
 800c736:	4b3f      	ldr	r3, [pc, #252]	@ (800c834 <__mdiff+0x120>)
 800c738:	f240 2137 	movw	r1, #567	@ 0x237
 800c73c:	483e      	ldr	r0, [pc, #248]	@ (800c838 <__mdiff+0x124>)
 800c73e:	f001 fa15 	bl	800db6c <__assert_func>
 800c742:	2301      	movs	r3, #1
 800c744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c748:	4610      	mov	r0, r2
 800c74a:	b003      	add	sp, #12
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	bfbc      	itt	lt
 800c752:	464b      	movlt	r3, r9
 800c754:	46a1      	movlt	r9, r4
 800c756:	4630      	mov	r0, r6
 800c758:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c75c:	bfba      	itte	lt
 800c75e:	461c      	movlt	r4, r3
 800c760:	2501      	movlt	r5, #1
 800c762:	2500      	movge	r5, #0
 800c764:	f7ff fd40 	bl	800c1e8 <_Balloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	b918      	cbnz	r0, 800c774 <__mdiff+0x60>
 800c76c:	4b31      	ldr	r3, [pc, #196]	@ (800c834 <__mdiff+0x120>)
 800c76e:	f240 2145 	movw	r1, #581	@ 0x245
 800c772:	e7e3      	b.n	800c73c <__mdiff+0x28>
 800c774:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c778:	6926      	ldr	r6, [r4, #16]
 800c77a:	60c5      	str	r5, [r0, #12]
 800c77c:	f109 0310 	add.w	r3, r9, #16
 800c780:	f109 0514 	add.w	r5, r9, #20
 800c784:	f104 0e14 	add.w	lr, r4, #20
 800c788:	f100 0b14 	add.w	fp, r0, #20
 800c78c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c790:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	46d9      	mov	r9, fp
 800c798:	f04f 0c00 	mov.w	ip, #0
 800c79c:	9b01      	ldr	r3, [sp, #4]
 800c79e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	fa1f f38a 	uxth.w	r3, sl
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	b283      	uxth	r3, r0
 800c7b0:	1acb      	subs	r3, r1, r3
 800c7b2:	0c00      	lsrs	r0, r0, #16
 800c7b4:	4463      	add	r3, ip
 800c7b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7c4:	4576      	cmp	r6, lr
 800c7c6:	f849 3b04 	str.w	r3, [r9], #4
 800c7ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7ce:	d8e5      	bhi.n	800c79c <__mdiff+0x88>
 800c7d0:	1b33      	subs	r3, r6, r4
 800c7d2:	3b15      	subs	r3, #21
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
 800c7d8:	3415      	adds	r4, #21
 800c7da:	3304      	adds	r3, #4
 800c7dc:	42a6      	cmp	r6, r4
 800c7de:	bf38      	it	cc
 800c7e0:	2304      	movcc	r3, #4
 800c7e2:	441d      	add	r5, r3
 800c7e4:	445b      	add	r3, fp
 800c7e6:	461e      	mov	r6, r3
 800c7e8:	462c      	mov	r4, r5
 800c7ea:	4544      	cmp	r4, r8
 800c7ec:	d30e      	bcc.n	800c80c <__mdiff+0xf8>
 800c7ee:	f108 0103 	add.w	r1, r8, #3
 800c7f2:	1b49      	subs	r1, r1, r5
 800c7f4:	f021 0103 	bic.w	r1, r1, #3
 800c7f8:	3d03      	subs	r5, #3
 800c7fa:	45a8      	cmp	r8, r5
 800c7fc:	bf38      	it	cc
 800c7fe:	2100      	movcc	r1, #0
 800c800:	440b      	add	r3, r1
 800c802:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c806:	b191      	cbz	r1, 800c82e <__mdiff+0x11a>
 800c808:	6117      	str	r7, [r2, #16]
 800c80a:	e79d      	b.n	800c748 <__mdiff+0x34>
 800c80c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c810:	46e6      	mov	lr, ip
 800c812:	0c08      	lsrs	r0, r1, #16
 800c814:	fa1c fc81 	uxtah	ip, ip, r1
 800c818:	4471      	add	r1, lr
 800c81a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c81e:	b289      	uxth	r1, r1
 800c820:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c824:	f846 1b04 	str.w	r1, [r6], #4
 800c828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c82c:	e7dd      	b.n	800c7ea <__mdiff+0xd6>
 800c82e:	3f01      	subs	r7, #1
 800c830:	e7e7      	b.n	800c802 <__mdiff+0xee>
 800c832:	bf00      	nop
 800c834:	080111e0 	.word	0x080111e0
 800c838:	080111f1 	.word	0x080111f1

0800c83c <__d2b>:
 800c83c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c840:	460f      	mov	r7, r1
 800c842:	2101      	movs	r1, #1
 800c844:	ec59 8b10 	vmov	r8, r9, d0
 800c848:	4616      	mov	r6, r2
 800c84a:	f7ff fccd 	bl	800c1e8 <_Balloc>
 800c84e:	4604      	mov	r4, r0
 800c850:	b930      	cbnz	r0, 800c860 <__d2b+0x24>
 800c852:	4602      	mov	r2, r0
 800c854:	4b23      	ldr	r3, [pc, #140]	@ (800c8e4 <__d2b+0xa8>)
 800c856:	4824      	ldr	r0, [pc, #144]	@ (800c8e8 <__d2b+0xac>)
 800c858:	f240 310f 	movw	r1, #783	@ 0x30f
 800c85c:	f001 f986 	bl	800db6c <__assert_func>
 800c860:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c868:	b10d      	cbz	r5, 800c86e <__d2b+0x32>
 800c86a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	f1b8 0300 	subs.w	r3, r8, #0
 800c874:	d023      	beq.n	800c8be <__d2b+0x82>
 800c876:	4668      	mov	r0, sp
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	f7ff fd7c 	bl	800c376 <__lo0bits>
 800c87e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c882:	b1d0      	cbz	r0, 800c8ba <__d2b+0x7e>
 800c884:	f1c0 0320 	rsb	r3, r0, #32
 800c888:	fa02 f303 	lsl.w	r3, r2, r3
 800c88c:	430b      	orrs	r3, r1
 800c88e:	40c2      	lsrs	r2, r0
 800c890:	6163      	str	r3, [r4, #20]
 800c892:	9201      	str	r2, [sp, #4]
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	61a3      	str	r3, [r4, #24]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bf0c      	ite	eq
 800c89c:	2201      	moveq	r2, #1
 800c89e:	2202      	movne	r2, #2
 800c8a0:	6122      	str	r2, [r4, #16]
 800c8a2:	b1a5      	cbz	r5, 800c8ce <__d2b+0x92>
 800c8a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8a8:	4405      	add	r5, r0
 800c8aa:	603d      	str	r5, [r7, #0]
 800c8ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8b0:	6030      	str	r0, [r6, #0]
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	b003      	add	sp, #12
 800c8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ba:	6161      	str	r1, [r4, #20]
 800c8bc:	e7ea      	b.n	800c894 <__d2b+0x58>
 800c8be:	a801      	add	r0, sp, #4
 800c8c0:	f7ff fd59 	bl	800c376 <__lo0bits>
 800c8c4:	9b01      	ldr	r3, [sp, #4]
 800c8c6:	6163      	str	r3, [r4, #20]
 800c8c8:	3020      	adds	r0, #32
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	e7e8      	b.n	800c8a0 <__d2b+0x64>
 800c8ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8d6:	6038      	str	r0, [r7, #0]
 800c8d8:	6918      	ldr	r0, [r3, #16]
 800c8da:	f7ff fd2d 	bl	800c338 <__hi0bits>
 800c8de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8e2:	e7e5      	b.n	800c8b0 <__d2b+0x74>
 800c8e4:	080111e0 	.word	0x080111e0
 800c8e8:	080111f1 	.word	0x080111f1

0800c8ec <__ssputs_r>:
 800c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	688e      	ldr	r6, [r1, #8]
 800c8f2:	461f      	mov	r7, r3
 800c8f4:	42be      	cmp	r6, r7
 800c8f6:	680b      	ldr	r3, [r1, #0]
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	4690      	mov	r8, r2
 800c8fe:	d82d      	bhi.n	800c95c <__ssputs_r+0x70>
 800c900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c908:	d026      	beq.n	800c958 <__ssputs_r+0x6c>
 800c90a:	6965      	ldr	r5, [r4, #20]
 800c90c:	6909      	ldr	r1, [r1, #16]
 800c90e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c912:	eba3 0901 	sub.w	r9, r3, r1
 800c916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c91a:	1c7b      	adds	r3, r7, #1
 800c91c:	444b      	add	r3, r9
 800c91e:	106d      	asrs	r5, r5, #1
 800c920:	429d      	cmp	r5, r3
 800c922:	bf38      	it	cc
 800c924:	461d      	movcc	r5, r3
 800c926:	0553      	lsls	r3, r2, #21
 800c928:	d527      	bpl.n	800c97a <__ssputs_r+0x8e>
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7ff fbd0 	bl	800c0d0 <_malloc_r>
 800c930:	4606      	mov	r6, r0
 800c932:	b360      	cbz	r0, 800c98e <__ssputs_r+0xa2>
 800c934:	6921      	ldr	r1, [r4, #16]
 800c936:	464a      	mov	r2, r9
 800c938:	f7fe fcf9 	bl	800b32e <memcpy>
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	6126      	str	r6, [r4, #16]
 800c94a:	6165      	str	r5, [r4, #20]
 800c94c:	444e      	add	r6, r9
 800c94e:	eba5 0509 	sub.w	r5, r5, r9
 800c952:	6026      	str	r6, [r4, #0]
 800c954:	60a5      	str	r5, [r4, #8]
 800c956:	463e      	mov	r6, r7
 800c958:	42be      	cmp	r6, r7
 800c95a:	d900      	bls.n	800c95e <__ssputs_r+0x72>
 800c95c:	463e      	mov	r6, r7
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	4632      	mov	r2, r6
 800c962:	4641      	mov	r1, r8
 800c964:	f001 f89e 	bl	800daa4 <memmove>
 800c968:	68a3      	ldr	r3, [r4, #8]
 800c96a:	1b9b      	subs	r3, r3, r6
 800c96c:	60a3      	str	r3, [r4, #8]
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	4433      	add	r3, r6
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	2000      	movs	r0, #0
 800c976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c97a:	462a      	mov	r2, r5
 800c97c:	f001 f93a 	bl	800dbf4 <_realloc_r>
 800c980:	4606      	mov	r6, r0
 800c982:	2800      	cmp	r0, #0
 800c984:	d1e0      	bne.n	800c948 <__ssputs_r+0x5c>
 800c986:	6921      	ldr	r1, [r4, #16]
 800c988:	4650      	mov	r0, sl
 800c98a:	f7ff fb2d 	bl	800bfe8 <_free_r>
 800c98e:	230c      	movs	r3, #12
 800c990:	f8ca 3000 	str.w	r3, [sl]
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c99a:	81a3      	strh	r3, [r4, #12]
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	e7e9      	b.n	800c976 <__ssputs_r+0x8a>
	...

0800c9a4 <_svfiprintf_r>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	898b      	ldrh	r3, [r1, #12]
 800c9ac:	061b      	lsls	r3, r3, #24
 800c9ae:	b09d      	sub	sp, #116	@ 0x74
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	d510      	bpl.n	800c9da <_svfiprintf_r+0x36>
 800c9b8:	690b      	ldr	r3, [r1, #16]
 800c9ba:	b973      	cbnz	r3, 800c9da <_svfiprintf_r+0x36>
 800c9bc:	2140      	movs	r1, #64	@ 0x40
 800c9be:	f7ff fb87 	bl	800c0d0 <_malloc_r>
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	6128      	str	r0, [r5, #16]
 800c9c6:	b930      	cbnz	r0, 800c9d6 <_svfiprintf_r+0x32>
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	603b      	str	r3, [r7, #0]
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	b01d      	add	sp, #116	@ 0x74
 800c9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d6:	2340      	movs	r3, #64	@ 0x40
 800c9d8:	616b      	str	r3, [r5, #20]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9de:	2320      	movs	r3, #32
 800c9e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e8:	2330      	movs	r3, #48	@ 0x30
 800c9ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb88 <_svfiprintf_r+0x1e4>
 800c9ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9f2:	f04f 0901 	mov.w	r9, #1
 800c9f6:	4623      	mov	r3, r4
 800c9f8:	469a      	mov	sl, r3
 800c9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fe:	b10a      	cbz	r2, 800ca04 <_svfiprintf_r+0x60>
 800ca00:	2a25      	cmp	r2, #37	@ 0x25
 800ca02:	d1f9      	bne.n	800c9f8 <_svfiprintf_r+0x54>
 800ca04:	ebba 0b04 	subs.w	fp, sl, r4
 800ca08:	d00b      	beq.n	800ca22 <_svfiprintf_r+0x7e>
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4638      	mov	r0, r7
 800ca12:	f7ff ff6b 	bl	800c8ec <__ssputs_r>
 800ca16:	3001      	adds	r0, #1
 800ca18:	f000 80a7 	beq.w	800cb6a <_svfiprintf_r+0x1c6>
 800ca1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1e:	445a      	add	r2, fp
 800ca20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca22:	f89a 3000 	ldrb.w	r3, [sl]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f000 809f 	beq.w	800cb6a <_svfiprintf_r+0x1c6>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca36:	f10a 0a01 	add.w	sl, sl, #1
 800ca3a:	9304      	str	r3, [sp, #16]
 800ca3c:	9307      	str	r3, [sp, #28]
 800ca3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca44:	4654      	mov	r4, sl
 800ca46:	2205      	movs	r2, #5
 800ca48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4c:	484e      	ldr	r0, [pc, #312]	@ (800cb88 <_svfiprintf_r+0x1e4>)
 800ca4e:	f7f3 fbbf 	bl	80001d0 <memchr>
 800ca52:	9a04      	ldr	r2, [sp, #16]
 800ca54:	b9d8      	cbnz	r0, 800ca8e <_svfiprintf_r+0xea>
 800ca56:	06d0      	lsls	r0, r2, #27
 800ca58:	bf44      	itt	mi
 800ca5a:	2320      	movmi	r3, #32
 800ca5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca60:	0711      	lsls	r1, r2, #28
 800ca62:	bf44      	itt	mi
 800ca64:	232b      	movmi	r3, #43	@ 0x2b
 800ca66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca70:	d015      	beq.n	800ca9e <_svfiprintf_r+0xfa>
 800ca72:	9a07      	ldr	r2, [sp, #28]
 800ca74:	4654      	mov	r4, sl
 800ca76:	2000      	movs	r0, #0
 800ca78:	f04f 0c0a 	mov.w	ip, #10
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca82:	3b30      	subs	r3, #48	@ 0x30
 800ca84:	2b09      	cmp	r3, #9
 800ca86:	d94b      	bls.n	800cb20 <_svfiprintf_r+0x17c>
 800ca88:	b1b0      	cbz	r0, 800cab8 <_svfiprintf_r+0x114>
 800ca8a:	9207      	str	r2, [sp, #28]
 800ca8c:	e014      	b.n	800cab8 <_svfiprintf_r+0x114>
 800ca8e:	eba0 0308 	sub.w	r3, r0, r8
 800ca92:	fa09 f303 	lsl.w	r3, r9, r3
 800ca96:	4313      	orrs	r3, r2
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	46a2      	mov	sl, r4
 800ca9c:	e7d2      	b.n	800ca44 <_svfiprintf_r+0xa0>
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	1d19      	adds	r1, r3, #4
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	9103      	str	r1, [sp, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	bfbb      	ittet	lt
 800caaa:	425b      	neglt	r3, r3
 800caac:	f042 0202 	orrlt.w	r2, r2, #2
 800cab0:	9307      	strge	r3, [sp, #28]
 800cab2:	9307      	strlt	r3, [sp, #28]
 800cab4:	bfb8      	it	lt
 800cab6:	9204      	strlt	r2, [sp, #16]
 800cab8:	7823      	ldrb	r3, [r4, #0]
 800caba:	2b2e      	cmp	r3, #46	@ 0x2e
 800cabc:	d10a      	bne.n	800cad4 <_svfiprintf_r+0x130>
 800cabe:	7863      	ldrb	r3, [r4, #1]
 800cac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cac2:	d132      	bne.n	800cb2a <_svfiprintf_r+0x186>
 800cac4:	9b03      	ldr	r3, [sp, #12]
 800cac6:	1d1a      	adds	r2, r3, #4
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	9203      	str	r2, [sp, #12]
 800cacc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cad0:	3402      	adds	r4, #2
 800cad2:	9305      	str	r3, [sp, #20]
 800cad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb98 <_svfiprintf_r+0x1f4>
 800cad8:	7821      	ldrb	r1, [r4, #0]
 800cada:	2203      	movs	r2, #3
 800cadc:	4650      	mov	r0, sl
 800cade:	f7f3 fb77 	bl	80001d0 <memchr>
 800cae2:	b138      	cbz	r0, 800caf4 <_svfiprintf_r+0x150>
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	eba0 000a 	sub.w	r0, r0, sl
 800caea:	2240      	movs	r2, #64	@ 0x40
 800caec:	4082      	lsls	r2, r0
 800caee:	4313      	orrs	r3, r2
 800caf0:	3401      	adds	r4, #1
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf8:	4824      	ldr	r0, [pc, #144]	@ (800cb8c <_svfiprintf_r+0x1e8>)
 800cafa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cafe:	2206      	movs	r2, #6
 800cb00:	f7f3 fb66 	bl	80001d0 <memchr>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d036      	beq.n	800cb76 <_svfiprintf_r+0x1d2>
 800cb08:	4b21      	ldr	r3, [pc, #132]	@ (800cb90 <_svfiprintf_r+0x1ec>)
 800cb0a:	bb1b      	cbnz	r3, 800cb54 <_svfiprintf_r+0x1b0>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	3307      	adds	r3, #7
 800cb10:	f023 0307 	bic.w	r3, r3, #7
 800cb14:	3308      	adds	r3, #8
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb1a:	4433      	add	r3, r6
 800cb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1e:	e76a      	b.n	800c9f6 <_svfiprintf_r+0x52>
 800cb20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb24:	460c      	mov	r4, r1
 800cb26:	2001      	movs	r0, #1
 800cb28:	e7a8      	b.n	800ca7c <_svfiprintf_r+0xd8>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	3401      	adds	r4, #1
 800cb2e:	9305      	str	r3, [sp, #20]
 800cb30:	4619      	mov	r1, r3
 800cb32:	f04f 0c0a 	mov.w	ip, #10
 800cb36:	4620      	mov	r0, r4
 800cb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3c:	3a30      	subs	r2, #48	@ 0x30
 800cb3e:	2a09      	cmp	r2, #9
 800cb40:	d903      	bls.n	800cb4a <_svfiprintf_r+0x1a6>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0c6      	beq.n	800cad4 <_svfiprintf_r+0x130>
 800cb46:	9105      	str	r1, [sp, #20]
 800cb48:	e7c4      	b.n	800cad4 <_svfiprintf_r+0x130>
 800cb4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4e:	4604      	mov	r4, r0
 800cb50:	2301      	movs	r3, #1
 800cb52:	e7f0      	b.n	800cb36 <_svfiprintf_r+0x192>
 800cb54:	ab03      	add	r3, sp, #12
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb94 <_svfiprintf_r+0x1f0>)
 800cb5c:	a904      	add	r1, sp, #16
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7fd fca4 	bl	800a4ac <_printf_float>
 800cb64:	1c42      	adds	r2, r0, #1
 800cb66:	4606      	mov	r6, r0
 800cb68:	d1d6      	bne.n	800cb18 <_svfiprintf_r+0x174>
 800cb6a:	89ab      	ldrh	r3, [r5, #12]
 800cb6c:	065b      	lsls	r3, r3, #25
 800cb6e:	f53f af2d 	bmi.w	800c9cc <_svfiprintf_r+0x28>
 800cb72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb74:	e72c      	b.n	800c9d0 <_svfiprintf_r+0x2c>
 800cb76:	ab03      	add	r3, sp, #12
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	4b05      	ldr	r3, [pc, #20]	@ (800cb94 <_svfiprintf_r+0x1f0>)
 800cb7e:	a904      	add	r1, sp, #16
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7fd ff2b 	bl	800a9dc <_printf_i>
 800cb86:	e7ed      	b.n	800cb64 <_svfiprintf_r+0x1c0>
 800cb88:	08011348 	.word	0x08011348
 800cb8c:	08011352 	.word	0x08011352
 800cb90:	0800a4ad 	.word	0x0800a4ad
 800cb94:	0800c8ed 	.word	0x0800c8ed
 800cb98:	0801134e 	.word	0x0801134e

0800cb9c <__sfputc_r>:
 800cb9c:	6893      	ldr	r3, [r2, #8]
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	b410      	push	{r4}
 800cba4:	6093      	str	r3, [r2, #8]
 800cba6:	da08      	bge.n	800cbba <__sfputc_r+0x1e>
 800cba8:	6994      	ldr	r4, [r2, #24]
 800cbaa:	42a3      	cmp	r3, r4
 800cbac:	db01      	blt.n	800cbb2 <__sfputc_r+0x16>
 800cbae:	290a      	cmp	r1, #10
 800cbb0:	d103      	bne.n	800cbba <__sfputc_r+0x1e>
 800cbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbb6:	f7fe ba72 	b.w	800b09e <__swbuf_r>
 800cbba:	6813      	ldr	r3, [r2, #0]
 800cbbc:	1c58      	adds	r0, r3, #1
 800cbbe:	6010      	str	r0, [r2, #0]
 800cbc0:	7019      	strb	r1, [r3, #0]
 800cbc2:	4608      	mov	r0, r1
 800cbc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <__sfputs_r>:
 800cbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	18d5      	adds	r5, r2, r3
 800cbd4:	42ac      	cmp	r4, r5
 800cbd6:	d101      	bne.n	800cbdc <__sfputs_r+0x12>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e007      	b.n	800cbec <__sfputs_r+0x22>
 800cbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe0:	463a      	mov	r2, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f7ff ffda 	bl	800cb9c <__sfputc_r>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d1f3      	bne.n	800cbd4 <__sfputs_r+0xa>
 800cbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbf0 <_vfiprintf_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	460d      	mov	r5, r1
 800cbf6:	b09d      	sub	sp, #116	@ 0x74
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	4698      	mov	r8, r3
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	b118      	cbz	r0, 800cc08 <_vfiprintf_r+0x18>
 800cc00:	6a03      	ldr	r3, [r0, #32]
 800cc02:	b90b      	cbnz	r3, 800cc08 <_vfiprintf_r+0x18>
 800cc04:	f7fe f942 	bl	800ae8c <__sinit>
 800cc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc0a:	07d9      	lsls	r1, r3, #31
 800cc0c:	d405      	bmi.n	800cc1a <_vfiprintf_r+0x2a>
 800cc0e:	89ab      	ldrh	r3, [r5, #12]
 800cc10:	059a      	lsls	r2, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_vfiprintf_r+0x2a>
 800cc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc16:	f7fe fb88 	bl	800b32a <__retarget_lock_acquire_recursive>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	071b      	lsls	r3, r3, #28
 800cc1e:	d501      	bpl.n	800cc24 <_vfiprintf_r+0x34>
 800cc20:	692b      	ldr	r3, [r5, #16]
 800cc22:	b99b      	cbnz	r3, 800cc4c <_vfiprintf_r+0x5c>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7fe fa78 	bl	800b11c <__swsetup_r>
 800cc2c:	b170      	cbz	r0, 800cc4c <_vfiprintf_r+0x5c>
 800cc2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc30:	07dc      	lsls	r4, r3, #31
 800cc32:	d504      	bpl.n	800cc3e <_vfiprintf_r+0x4e>
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	b01d      	add	sp, #116	@ 0x74
 800cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	0598      	lsls	r0, r3, #22
 800cc42:	d4f7      	bmi.n	800cc34 <_vfiprintf_r+0x44>
 800cc44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc46:	f7fe fb71 	bl	800b32c <__retarget_lock_release_recursive>
 800cc4a:	e7f3      	b.n	800cc34 <_vfiprintf_r+0x44>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc50:	2320      	movs	r3, #32
 800cc52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc5a:	2330      	movs	r3, #48	@ 0x30
 800cc5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce0c <_vfiprintf_r+0x21c>
 800cc60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc64:	f04f 0901 	mov.w	r9, #1
 800cc68:	4623      	mov	r3, r4
 800cc6a:	469a      	mov	sl, r3
 800cc6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc70:	b10a      	cbz	r2, 800cc76 <_vfiprintf_r+0x86>
 800cc72:	2a25      	cmp	r2, #37	@ 0x25
 800cc74:	d1f9      	bne.n	800cc6a <_vfiprintf_r+0x7a>
 800cc76:	ebba 0b04 	subs.w	fp, sl, r4
 800cc7a:	d00b      	beq.n	800cc94 <_vfiprintf_r+0xa4>
 800cc7c:	465b      	mov	r3, fp
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	4630      	mov	r0, r6
 800cc84:	f7ff ffa1 	bl	800cbca <__sfputs_r>
 800cc88:	3001      	adds	r0, #1
 800cc8a:	f000 80a7 	beq.w	800cddc <_vfiprintf_r+0x1ec>
 800cc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc90:	445a      	add	r2, fp
 800cc92:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc94:	f89a 3000 	ldrb.w	r3, [sl]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 809f 	beq.w	800cddc <_vfiprintf_r+0x1ec>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f04f 32ff 	mov.w	r2, #4294967295
 800cca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca8:	f10a 0a01 	add.w	sl, sl, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	9307      	str	r3, [sp, #28]
 800ccb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccb6:	4654      	mov	r4, sl
 800ccb8:	2205      	movs	r2, #5
 800ccba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbe:	4853      	ldr	r0, [pc, #332]	@ (800ce0c <_vfiprintf_r+0x21c>)
 800ccc0:	f7f3 fa86 	bl	80001d0 <memchr>
 800ccc4:	9a04      	ldr	r2, [sp, #16]
 800ccc6:	b9d8      	cbnz	r0, 800cd00 <_vfiprintf_r+0x110>
 800ccc8:	06d1      	lsls	r1, r2, #27
 800ccca:	bf44      	itt	mi
 800cccc:	2320      	movmi	r3, #32
 800ccce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccd2:	0713      	lsls	r3, r2, #28
 800ccd4:	bf44      	itt	mi
 800ccd6:	232b      	movmi	r3, #43	@ 0x2b
 800ccd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cce0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cce2:	d015      	beq.n	800cd10 <_vfiprintf_r+0x120>
 800cce4:	9a07      	ldr	r2, [sp, #28]
 800cce6:	4654      	mov	r4, sl
 800cce8:	2000      	movs	r0, #0
 800ccea:	f04f 0c0a 	mov.w	ip, #10
 800ccee:	4621      	mov	r1, r4
 800ccf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccf4:	3b30      	subs	r3, #48	@ 0x30
 800ccf6:	2b09      	cmp	r3, #9
 800ccf8:	d94b      	bls.n	800cd92 <_vfiprintf_r+0x1a2>
 800ccfa:	b1b0      	cbz	r0, 800cd2a <_vfiprintf_r+0x13a>
 800ccfc:	9207      	str	r2, [sp, #28]
 800ccfe:	e014      	b.n	800cd2a <_vfiprintf_r+0x13a>
 800cd00:	eba0 0308 	sub.w	r3, r0, r8
 800cd04:	fa09 f303 	lsl.w	r3, r9, r3
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	46a2      	mov	sl, r4
 800cd0e:	e7d2      	b.n	800ccb6 <_vfiprintf_r+0xc6>
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	1d19      	adds	r1, r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	9103      	str	r1, [sp, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bfbb      	ittet	lt
 800cd1c:	425b      	neglt	r3, r3
 800cd1e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd22:	9307      	strge	r3, [sp, #28]
 800cd24:	9307      	strlt	r3, [sp, #28]
 800cd26:	bfb8      	it	lt
 800cd28:	9204      	strlt	r2, [sp, #16]
 800cd2a:	7823      	ldrb	r3, [r4, #0]
 800cd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd2e:	d10a      	bne.n	800cd46 <_vfiprintf_r+0x156>
 800cd30:	7863      	ldrb	r3, [r4, #1]
 800cd32:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd34:	d132      	bne.n	800cd9c <_vfiprintf_r+0x1ac>
 800cd36:	9b03      	ldr	r3, [sp, #12]
 800cd38:	1d1a      	adds	r2, r3, #4
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	9203      	str	r2, [sp, #12]
 800cd3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd42:	3402      	adds	r4, #2
 800cd44:	9305      	str	r3, [sp, #20]
 800cd46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce1c <_vfiprintf_r+0x22c>
 800cd4a:	7821      	ldrb	r1, [r4, #0]
 800cd4c:	2203      	movs	r2, #3
 800cd4e:	4650      	mov	r0, sl
 800cd50:	f7f3 fa3e 	bl	80001d0 <memchr>
 800cd54:	b138      	cbz	r0, 800cd66 <_vfiprintf_r+0x176>
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	eba0 000a 	sub.w	r0, r0, sl
 800cd5c:	2240      	movs	r2, #64	@ 0x40
 800cd5e:	4082      	lsls	r2, r0
 800cd60:	4313      	orrs	r3, r2
 800cd62:	3401      	adds	r4, #1
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6a:	4829      	ldr	r0, [pc, #164]	@ (800ce10 <_vfiprintf_r+0x220>)
 800cd6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd70:	2206      	movs	r2, #6
 800cd72:	f7f3 fa2d 	bl	80001d0 <memchr>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d03f      	beq.n	800cdfa <_vfiprintf_r+0x20a>
 800cd7a:	4b26      	ldr	r3, [pc, #152]	@ (800ce14 <_vfiprintf_r+0x224>)
 800cd7c:	bb1b      	cbnz	r3, 800cdc6 <_vfiprintf_r+0x1d6>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	3307      	adds	r3, #7
 800cd82:	f023 0307 	bic.w	r3, r3, #7
 800cd86:	3308      	adds	r3, #8
 800cd88:	9303      	str	r3, [sp, #12]
 800cd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd8c:	443b      	add	r3, r7
 800cd8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd90:	e76a      	b.n	800cc68 <_vfiprintf_r+0x78>
 800cd92:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd96:	460c      	mov	r4, r1
 800cd98:	2001      	movs	r0, #1
 800cd9a:	e7a8      	b.n	800ccee <_vfiprintf_r+0xfe>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	3401      	adds	r4, #1
 800cda0:	9305      	str	r3, [sp, #20]
 800cda2:	4619      	mov	r1, r3
 800cda4:	f04f 0c0a 	mov.w	ip, #10
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdae:	3a30      	subs	r2, #48	@ 0x30
 800cdb0:	2a09      	cmp	r2, #9
 800cdb2:	d903      	bls.n	800cdbc <_vfiprintf_r+0x1cc>
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0c6      	beq.n	800cd46 <_vfiprintf_r+0x156>
 800cdb8:	9105      	str	r1, [sp, #20]
 800cdba:	e7c4      	b.n	800cd46 <_vfiprintf_r+0x156>
 800cdbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e7f0      	b.n	800cda8 <_vfiprintf_r+0x1b8>
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4b12      	ldr	r3, [pc, #72]	@ (800ce18 <_vfiprintf_r+0x228>)
 800cdce:	a904      	add	r1, sp, #16
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7fd fb6b 	bl	800a4ac <_printf_float>
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	1c78      	adds	r0, r7, #1
 800cdda:	d1d6      	bne.n	800cd8a <_vfiprintf_r+0x19a>
 800cddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdde:	07d9      	lsls	r1, r3, #31
 800cde0:	d405      	bmi.n	800cdee <_vfiprintf_r+0x1fe>
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	059a      	lsls	r2, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_vfiprintf_r+0x1fe>
 800cde8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdea:	f7fe fa9f 	bl	800b32c <__retarget_lock_release_recursive>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	065b      	lsls	r3, r3, #25
 800cdf2:	f53f af1f 	bmi.w	800cc34 <_vfiprintf_r+0x44>
 800cdf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdf8:	e71e      	b.n	800cc38 <_vfiprintf_r+0x48>
 800cdfa:	ab03      	add	r3, sp, #12
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4b05      	ldr	r3, [pc, #20]	@ (800ce18 <_vfiprintf_r+0x228>)
 800ce02:	a904      	add	r1, sp, #16
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7fd fde9 	bl	800a9dc <_printf_i>
 800ce0a:	e7e4      	b.n	800cdd6 <_vfiprintf_r+0x1e6>
 800ce0c:	08011348 	.word	0x08011348
 800ce10:	08011352 	.word	0x08011352
 800ce14:	0800a4ad 	.word	0x0800a4ad
 800ce18:	0800cbcb 	.word	0x0800cbcb
 800ce1c:	0801134e 	.word	0x0801134e

0800ce20 <__swhatbuf_r>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	460c      	mov	r4, r1
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	b096      	sub	sp, #88	@ 0x58
 800ce2c:	4615      	mov	r5, r2
 800ce2e:	461e      	mov	r6, r3
 800ce30:	da0d      	bge.n	800ce4e <__swhatbuf_r+0x2e>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce38:	f04f 0100 	mov.w	r1, #0
 800ce3c:	bf14      	ite	ne
 800ce3e:	2340      	movne	r3, #64	@ 0x40
 800ce40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce44:	2000      	movs	r0, #0
 800ce46:	6031      	str	r1, [r6, #0]
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	b016      	add	sp, #88	@ 0x58
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f000 fe5a 	bl	800db08 <_fstat_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dbec      	blt.n	800ce32 <__swhatbuf_r+0x12>
 800ce58:	9901      	ldr	r1, [sp, #4]
 800ce5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce62:	4259      	negs	r1, r3
 800ce64:	4159      	adcs	r1, r3
 800ce66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce6a:	e7eb      	b.n	800ce44 <__swhatbuf_r+0x24>

0800ce6c <__smakebuf_r>:
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce70:	079d      	lsls	r5, r3, #30
 800ce72:	4606      	mov	r6, r0
 800ce74:	460c      	mov	r4, r1
 800ce76:	d507      	bpl.n	800ce88 <__smakebuf_r+0x1c>
 800ce78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	2301      	movs	r3, #1
 800ce82:	6163      	str	r3, [r4, #20]
 800ce84:	b003      	add	sp, #12
 800ce86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce88:	ab01      	add	r3, sp, #4
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	f7ff ffc8 	bl	800ce20 <__swhatbuf_r>
 800ce90:	9f00      	ldr	r7, [sp, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	4639      	mov	r1, r7
 800ce96:	4630      	mov	r0, r6
 800ce98:	f7ff f91a 	bl	800c0d0 <_malloc_r>
 800ce9c:	b948      	cbnz	r0, 800ceb2 <__smakebuf_r+0x46>
 800ce9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea2:	059a      	lsls	r2, r3, #22
 800cea4:	d4ee      	bmi.n	800ce84 <__smakebuf_r+0x18>
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	f043 0302 	orr.w	r3, r3, #2
 800ceae:	81a3      	strh	r3, [r4, #12]
 800ceb0:	e7e2      	b.n	800ce78 <__smakebuf_r+0xc>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	6020      	str	r0, [r4, #0]
 800ceb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceba:	81a3      	strh	r3, [r4, #12]
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cec2:	b15b      	cbz	r3, 800cedc <__smakebuf_r+0x70>
 800cec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec8:	4630      	mov	r0, r6
 800ceca:	f000 fe2f 	bl	800db2c <_isatty_r>
 800cece:	b128      	cbz	r0, 800cedc <__smakebuf_r+0x70>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f023 0303 	bic.w	r3, r3, #3
 800ced6:	f043 0301 	orr.w	r3, r3, #1
 800ceda:	81a3      	strh	r3, [r4, #12]
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	431d      	orrs	r5, r3
 800cee0:	81a5      	strh	r5, [r4, #12]
 800cee2:	e7cf      	b.n	800ce84 <__smakebuf_r+0x18>

0800cee4 <wcvt>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	ec57 6b10 	vmov	r6, r7, d0
 800ceec:	2f00      	cmp	r7, #0
 800ceee:	b085      	sub	sp, #20
 800cef0:	460c      	mov	r4, r1
 800cef2:	4619      	mov	r1, r3
 800cef4:	463b      	mov	r3, r7
 800cef6:	bfbb      	ittet	lt
 800cef8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cefc:	461f      	movlt	r7, r3
 800cefe:	2300      	movge	r3, #0
 800cf00:	232d      	movlt	r3, #45	@ 0x2d
 800cf02:	600b      	str	r3, [r1, #0]
 800cf04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800cf0a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800cf0e:	4691      	mov	r9, r2
 800cf10:	f023 0820 	bic.w	r8, r3, #32
 800cf14:	bfbc      	itt	lt
 800cf16:	4632      	movlt	r2, r6
 800cf18:	4616      	movlt	r6, r2
 800cf1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf1e:	d005      	beq.n	800cf2c <wcvt+0x48>
 800cf20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf24:	d100      	bne.n	800cf28 <wcvt+0x44>
 800cf26:	3401      	adds	r4, #1
 800cf28:	2102      	movs	r1, #2
 800cf2a:	e000      	b.n	800cf2e <wcvt+0x4a>
 800cf2c:	2103      	movs	r1, #3
 800cf2e:	ab03      	add	r3, sp, #12
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	ab02      	add	r3, sp, #8
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	ec47 6b10 	vmov	d0, r6, r7
 800cf3a:	4653      	mov	r3, sl
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	f7fe fa8f 	bl	800b460 <_dtoa_r>
 800cf42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf46:	4605      	mov	r5, r0
 800cf48:	d125      	bne.n	800cf96 <wcvt+0xb2>
 800cf4a:	f019 0f01 	tst.w	r9, #1
 800cf4e:	d10f      	bne.n	800cf70 <wcvt+0x8c>
 800cf50:	9b03      	ldr	r3, [sp, #12]
 800cf52:	1b5b      	subs	r3, r3, r5
 800cf54:	f8cb 3000 	str.w	r3, [fp]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f8db 2000 	ldr.w	r2, [fp]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	dd02      	ble.n	800cf68 <wcvt+0x84>
 800cf62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf64:	4293      	cmp	r3, r2
 800cf66:	db2d      	blt.n	800cfc4 <wcvt+0xe0>
 800cf68:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800cf6a:	b005      	add	sp, #20
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf70:	eb00 0904 	add.w	r9, r0, r4
 800cf74:	2200      	movs	r2, #0
 800cf76:	2300      	movs	r3, #0
 800cf78:	4630      	mov	r0, r6
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	f7f3 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf80:	b108      	cbz	r0, 800cf86 <wcvt+0xa2>
 800cf82:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf86:	2230      	movs	r2, #48	@ 0x30
 800cf88:	9b03      	ldr	r3, [sp, #12]
 800cf8a:	454b      	cmp	r3, r9
 800cf8c:	d2e0      	bcs.n	800cf50 <wcvt+0x6c>
 800cf8e:	1c59      	adds	r1, r3, #1
 800cf90:	9103      	str	r1, [sp, #12]
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	e7f8      	b.n	800cf88 <wcvt+0xa4>
 800cf96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf9a:	eb00 0904 	add.w	r9, r0, r4
 800cf9e:	d1e9      	bne.n	800cf74 <wcvt+0x90>
 800cfa0:	7803      	ldrb	r3, [r0, #0]
 800cfa2:	2b30      	cmp	r3, #48	@ 0x30
 800cfa4:	d10a      	bne.n	800cfbc <wcvt+0xd8>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4630      	mov	r0, r6
 800cfac:	4639      	mov	r1, r7
 800cfae:	f7f3 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfb2:	b918      	cbnz	r0, 800cfbc <wcvt+0xd8>
 800cfb4:	f1c4 0401 	rsb	r4, r4, #1
 800cfb8:	f8ca 4000 	str.w	r4, [sl]
 800cfbc:	f8da 3000 	ldr.w	r3, [sl]
 800cfc0:	4499      	add	r9, r3
 800cfc2:	e7d7      	b.n	800cf74 <wcvt+0x90>
 800cfc4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800cfc6:	5cea      	ldrb	r2, [r5, r3]
 800cfc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	e7c4      	b.n	800cf5a <wcvt+0x76>

0800cfd0 <_svfwprintf_r>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	b0d5      	sub	sp, #340	@ 0x154
 800cfd6:	461e      	mov	r6, r3
 800cfd8:	2300      	movs	r3, #0
 800cfda:	468b      	mov	fp, r1
 800cfdc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cfde:	4682      	mov	sl, r0
 800cfe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfe2:	f7fe f92d 	bl	800b240 <_localeconv_r>
 800cfe6:	6803      	ldr	r3, [r0, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	9318      	str	r3, [sp, #96]	@ 0x60
 800cfec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800cff0:	061f      	lsls	r7, r3, #24
 800cff2:	d515      	bpl.n	800d020 <_svfwprintf_r+0x50>
 800cff4:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cff8:	b993      	cbnz	r3, 800d020 <_svfwprintf_r+0x50>
 800cffa:	2140      	movs	r1, #64	@ 0x40
 800cffc:	4650      	mov	r0, sl
 800cffe:	f7ff f867 	bl	800c0d0 <_malloc_r>
 800d002:	f8cb 0000 	str.w	r0, [fp]
 800d006:	f8cb 0010 	str.w	r0, [fp, #16]
 800d00a:	b930      	cbnz	r0, 800d01a <_svfwprintf_r+0x4a>
 800d00c:	230c      	movs	r3, #12
 800d00e:	f8ca 3000 	str.w	r3, [sl]
 800d012:	f04f 33ff 	mov.w	r3, #4294967295
 800d016:	930d      	str	r3, [sp, #52]	@ 0x34
 800d018:	e115      	b.n	800d246 <_svfwprintf_r+0x276>
 800d01a:	2340      	movs	r3, #64	@ 0x40
 800d01c:	f8cb 3014 	str.w	r3, [fp, #20]
 800d020:	ed9f 7b91 	vldr	d7, [pc, #580]	@ 800d268 <_svfwprintf_r+0x298>
 800d024:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d028:	2300      	movs	r3, #0
 800d02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d02c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d02e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d032:	461c      	mov	r4, r3
 800d034:	f853 2b04 	ldr.w	r2, [r3], #4
 800d038:	b10a      	cbz	r2, 800d03e <_svfwprintf_r+0x6e>
 800d03a:	2a25      	cmp	r2, #37	@ 0x25
 800d03c:	d1f9      	bne.n	800d032 <_svfwprintf_r+0x62>
 800d03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d040:	42a3      	cmp	r3, r4
 800d042:	d00d      	beq.n	800d060 <_svfwprintf_r+0x90>
 800d044:	1ae5      	subs	r5, r4, r3
 800d046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d048:	462b      	mov	r3, r5
 800d04a:	4659      	mov	r1, fp
 800d04c:	4650      	mov	r0, sl
 800d04e:	f7ff fc4d 	bl	800c8ec <__ssputs_r>
 800d052:	3001      	adds	r0, #1
 800d054:	f000 80f2 	beq.w	800d23c <_svfwprintf_r+0x26c>
 800d058:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d05a:	eb03 03a5 	add.w	r3, r3, r5, asr #2
 800d05e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 80ea 	beq.w	800d23c <_svfwprintf_r+0x26c>
 800d068:	2200      	movs	r2, #0
 800d06a:	1d23      	adds	r3, r4, #4
 800d06c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d06e:	f04f 34ff 	mov.w	r4, #4294967295
 800d072:	920c      	str	r2, [sp, #48]	@ 0x30
 800d074:	4615      	mov	r5, r2
 800d076:	f853 2b04 	ldr.w	r2, [r3], #4
 800d07a:	9207      	str	r2, [sp, #28]
 800d07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d07e:	9b07      	ldr	r3, [sp, #28]
 800d080:	2b39      	cmp	r3, #57	@ 0x39
 800d082:	d872      	bhi.n	800d16a <_svfwprintf_r+0x19a>
 800d084:	2b1f      	cmp	r3, #31
 800d086:	f240 8358 	bls.w	800d73a <_svfwprintf_r+0x76a>
 800d08a:	9b07      	ldr	r3, [sp, #28]
 800d08c:	3b20      	subs	r3, #32
 800d08e:	2b19      	cmp	r3, #25
 800d090:	f200 8353 	bhi.w	800d73a <_svfwprintf_r+0x76a>
 800d094:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d098:	03510073 	.word	0x03510073
 800d09c:	00780351 	.word	0x00780351
 800d0a0:	03510351 	.word	0x03510351
 800d0a4:	03510351 	.word	0x03510351
 800d0a8:	03510351 	.word	0x03510351
 800d0ac:	0086007c 	.word	0x0086007c
 800d0b0:	00830351 	.word	0x00830351
 800d0b4:	03510088 	.word	0x03510088
 800d0b8:	00a600a3 	.word	0x00a600a3
 800d0bc:	00a600a6 	.word	0x00a600a6
 800d0c0:	00a600a6 	.word	0x00a600a6
 800d0c4:	00a600a6 	.word	0x00a600a6
 800d0c8:	00a600a6 	.word	0x00a600a6
 800d0cc:	2b33      	cmp	r3, #51	@ 0x33
 800d0ce:	f200 8334 	bhi.w	800d73a <_svfwprintf_r+0x76a>
 800d0d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d0d6:	00df      	.short	0x00df
 800d0d8:	00df0332 	.word	0x00df0332
 800d0dc:	03320332 	.word	0x03320332
 800d0e0:	03320332 	.word	0x03320332
 800d0e4:	0332009a 	.word	0x0332009a
 800d0e8:	03320332 	.word	0x03320332
 800d0ec:	03320332 	.word	0x03320332
 800d0f0:	03320332 	.word	0x03320332
 800d0f4:	03320332 	.word	0x03320332
 800d0f8:	03320332 	.word	0x03320332
 800d0fc:	03320308 	.word	0x03320308
 800d100:	03320332 	.word	0x03320332
 800d104:	03320332 	.word	0x03320332
 800d108:	03320332 	.word	0x03320332
 800d10c:	03320332 	.word	0x03320332
 800d110:	00a30332 	.word	0x00a30332
 800d114:	00df00cf 	.word	0x00df00cf
 800d118:	00df00df 	.word	0x00df00df
 800d11c:	00cf009d 	.word	0x00cf009d
 800d120:	03320332 	.word	0x03320332
 800d124:	033200a0 	.word	0x033200a0
 800d128:	027f0274 	.word	0x027f0274
 800d12c:	00a0029d 	.word	0x00a0029d
 800d130:	02ac0332 	.word	0x02ac0332
 800d134:	02fc0332 	.word	0x02fc0332
 800d138:	03320332 	.word	0x03320332
 800d13c:	0034      	.short	0x0034
 800d13e:	4b4c      	ldr	r3, [pc, #304]	@ (800d270 <_svfwprintf_r+0x2a0>)
 800d140:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d142:	4632      	mov	r2, r6
 800d144:	06e9      	lsls	r1, r5, #27
 800d146:	f852 3b04 	ldr.w	r3, [r2], #4
 800d14a:	9208      	str	r2, [sp, #32]
 800d14c:	d402      	bmi.n	800d154 <_svfwprintf_r+0x184>
 800d14e:	066a      	lsls	r2, r5, #25
 800d150:	bf48      	it	mi
 800d152:	b29b      	uxthmi	r3, r3
 800d154:	07ef      	lsls	r7, r5, #31
 800d156:	d506      	bpl.n	800d166 <_svfwprintf_r+0x196>
 800d158:	b12b      	cbz	r3, 800d166 <_svfwprintf_r+0x196>
 800d15a:	2230      	movs	r2, #48	@ 0x30
 800d15c:	921c      	str	r2, [sp, #112]	@ 0x70
 800d15e:	9a07      	ldr	r2, [sp, #28]
 800d160:	921d      	str	r2, [sp, #116]	@ 0x74
 800d162:	f045 0502 	orr.w	r5, r5, #2
 800d166:	2202      	movs	r2, #2
 800d168:	e23c      	b.n	800d5e4 <_svfwprintf_r+0x614>
 800d16a:	9b07      	ldr	r3, [sp, #28]
 800d16c:	3b45      	subs	r3, #69	@ 0x45
 800d16e:	2b33      	cmp	r3, #51	@ 0x33
 800d170:	d9ac      	bls.n	800d0cc <_svfwprintf_r+0xfc>
 800d172:	9b07      	ldr	r3, [sp, #28]
 800d174:	932c      	str	r3, [sp, #176]	@ 0xb0
 800d176:	2300      	movs	r3, #0
 800d178:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d17a:	9608      	str	r6, [sp, #32]
 800d17c:	e06b      	b.n	800d256 <_svfwprintf_r+0x286>
 800d17e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d180:	b923      	cbnz	r3, 800d18c <_svfwprintf_r+0x1bc>
 800d182:	2320      	movs	r3, #32
 800d184:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d186:	e001      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d188:	f045 0501 	orr.w	r5, r5, #1
 800d18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18e:	e772      	b.n	800d076 <_svfwprintf_r+0xa6>
 800d190:	f856 3b04 	ldr.w	r3, [r6], #4
 800d194:	930c      	str	r3, [sp, #48]	@ 0x30
 800d196:	2b00      	cmp	r3, #0
 800d198:	daf8      	bge.n	800d18c <_svfwprintf_r+0x1bc>
 800d19a:	425b      	negs	r3, r3
 800d19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d19e:	f045 0504 	orr.w	r5, r5, #4
 800d1a2:	e7f3      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d1a4:	232b      	movs	r3, #43	@ 0x2b
 800d1a6:	e7ed      	b.n	800d184 <_svfwprintf_r+0x1b4>
 800d1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ae:	9207      	str	r2, [sp, #28]
 800d1b0:	2a2a      	cmp	r2, #42	@ 0x2a
 800d1b2:	d111      	bne.n	800d1d8 <_svfwprintf_r+0x208>
 800d1b4:	f856 4b04 	ldr.w	r4, [r6], #4
 800d1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ba:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800d1be:	e7e5      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d1c0:	fb01 2404 	mla	r4, r1, r4, r2
 800d1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c8:	9207      	str	r2, [sp, #28]
 800d1ca:	9a07      	ldr	r2, [sp, #28]
 800d1cc:	3a30      	subs	r2, #48	@ 0x30
 800d1ce:	2a09      	cmp	r2, #9
 800d1d0:	d9f6      	bls.n	800d1c0 <_svfwprintf_r+0x1f0>
 800d1d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800d1d6:	e751      	b.n	800d07c <_svfwprintf_r+0xac>
 800d1d8:	2400      	movs	r4, #0
 800d1da:	210a      	movs	r1, #10
 800d1dc:	e7f5      	b.n	800d1ca <_svfwprintf_r+0x1fa>
 800d1de:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800d1e2:	e7d3      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1e8:	9b07      	ldr	r3, [sp, #28]
 800d1ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1ec:	3b30      	subs	r3, #48	@ 0x30
 800d1ee:	210a      	movs	r1, #10
 800d1f0:	fb01 3302 	mla	r3, r1, r2, r3
 800d1f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d202:	2b09      	cmp	r3, #9
 800d204:	9207      	str	r2, [sp, #28]
 800d206:	d9ef      	bls.n	800d1e8 <_svfwprintf_r+0x218>
 800d208:	e739      	b.n	800d07e <_svfwprintf_r+0xae>
 800d20a:	f045 0508 	orr.w	r5, r5, #8
 800d20e:	e7bd      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d210:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 800d214:	e7ba      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d216:	f045 0510 	orr.w	r5, r5, #16
 800d21a:	e7b7      	b.n	800d18c <_svfwprintf_r+0x1bc>
 800d21c:	4633      	mov	r3, r6
 800d21e:	06ee      	lsls	r6, r5, #27
 800d220:	f853 0b04 	ldr.w	r0, [r3], #4
 800d224:	9308      	str	r3, [sp, #32]
 800d226:	d412      	bmi.n	800d24e <_svfwprintf_r+0x27e>
 800d228:	f000 fd20 	bl	800dc6c <btowc>
 800d22c:	1c44      	adds	r4, r0, #1
 800d22e:	d10e      	bne.n	800d24e <_svfwprintf_r+0x27e>
 800d230:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800d234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d238:	f8ab 300c 	strh.w	r3, [fp, #12]
 800d23c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800d240:	065b      	lsls	r3, r3, #25
 800d242:	f53f aee6 	bmi.w	800d012 <_svfwprintf_r+0x42>
 800d246:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d248:	b055      	add	sp, #340	@ 0x154
 800d24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24e:	2300      	movs	r3, #0
 800d250:	902c      	str	r0, [sp, #176]	@ 0xb0
 800d252:	932d      	str	r3, [sp, #180]	@ 0xb4
 800d254:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d256:	4698      	mov	r8, r3
 800d258:	2401      	movs	r4, #1
 800d25a:	461f      	mov	r7, r3
 800d25c:	461e      	mov	r6, r3
 800d25e:	f10d 09b0 	add.w	r9, sp, #176	@ 0xb0
 800d262:	e0f5      	b.n	800d450 <_svfwprintf_r+0x480>
 800d264:	f3af 8000 	nop.w
	...
 800d270:	0801139c 	.word	0x0801139c
 800d274:	4632      	mov	r2, r6
 800d276:	06e8      	lsls	r0, r5, #27
 800d278:	f852 3b04 	ldr.w	r3, [r2], #4
 800d27c:	9208      	str	r2, [sp, #32]
 800d27e:	d402      	bmi.n	800d286 <_svfwprintf_r+0x2b6>
 800d280:	0669      	lsls	r1, r5, #25
 800d282:	bf48      	it	mi
 800d284:	b21b      	sxthmi	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	da02      	bge.n	800d290 <_svfwprintf_r+0x2c0>
 800d28a:	222d      	movs	r2, #45	@ 0x2d
 800d28c:	425b      	negs	r3, r3
 800d28e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d290:	2201      	movs	r2, #1
 800d292:	e1a9      	b.n	800d5e8 <_svfwprintf_r+0x618>
 800d294:	3607      	adds	r6, #7
 800d296:	f026 0307 	bic.w	r3, r6, #7
 800d29a:	ecb3 7b02 	vldmia	r3!, {d7}
 800d29e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d2a2:	9308      	str	r3, [sp, #32]
 800d2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2ae:	9311      	str	r3, [sp, #68]	@ 0x44
 800d2b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2b4:	4ba8      	ldr	r3, [pc, #672]	@ (800d558 <_svfwprintf_r+0x588>)
 800d2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ba:	f7f3 fc37 	bl	8000b2c <__aeabi_dcmpun>
 800d2be:	b9f0      	cbnz	r0, 800d2fe <_svfwprintf_r+0x32e>
 800d2c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2c4:	4ba4      	ldr	r3, [pc, #656]	@ (800d558 <_svfwprintf_r+0x588>)
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ca:	f7f3 fc11 	bl	8000af0 <__aeabi_dcmple>
 800d2ce:	b9b0      	cbnz	r0, 800d2fe <_svfwprintf_r+0x32e>
 800d2d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f7f3 fc00 	bl	8000adc <__aeabi_dcmplt>
 800d2dc:	b108      	cbz	r0, 800d2e2 <_svfwprintf_r+0x312>
 800d2de:	232d      	movs	r3, #45	@ 0x2d
 800d2e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d2e2:	4a9e      	ldr	r2, [pc, #632]	@ (800d55c <_svfwprintf_r+0x58c>)
 800d2e4:	4b9e      	ldr	r3, [pc, #632]	@ (800d560 <_svfwprintf_r+0x590>)
 800d2e6:	9907      	ldr	r1, [sp, #28]
 800d2e8:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800d2ec:	2947      	cmp	r1, #71	@ 0x47
 800d2ee:	bf94      	ite	ls
 800d2f0:	4691      	movls	r9, r2
 800d2f2:	4699      	movhi	r9, r3
 800d2f4:	f04f 0800 	mov.w	r8, #0
 800d2f8:	2403      	movs	r4, #3
 800d2fa:	4647      	mov	r7, r8
 800d2fc:	e3cb      	b.n	800da96 <_svfwprintf_r+0xac6>
 800d2fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800d302:	4610      	mov	r0, r2
 800d304:	4619      	mov	r1, r3
 800d306:	f7f3 fc11 	bl	8000b2c <__aeabi_dcmpun>
 800d30a:	b138      	cbz	r0, 800d31c <_svfwprintf_r+0x34c>
 800d30c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d30e:	4a95      	ldr	r2, [pc, #596]	@ (800d564 <_svfwprintf_r+0x594>)
 800d310:	2b00      	cmp	r3, #0
 800d312:	bfbc      	itt	lt
 800d314:	232d      	movlt	r3, #45	@ 0x2d
 800d316:	9317      	strlt	r3, [sp, #92]	@ 0x5c
 800d318:	4b93      	ldr	r3, [pc, #588]	@ (800d568 <_svfwprintf_r+0x598>)
 800d31a:	e7e4      	b.n	800d2e6 <_svfwprintf_r+0x316>
 800d31c:	1c62      	adds	r2, r4, #1
 800d31e:	f000 8107 	beq.w	800d530 <_svfwprintf_r+0x560>
 800d322:	9b07      	ldr	r3, [sp, #28]
 800d324:	f023 0320 	bic.w	r3, r3, #32
 800d328:	2b47      	cmp	r3, #71	@ 0x47
 800d32a:	d102      	bne.n	800d332 <_svfwprintf_r+0x362>
 800d32c:	2c00      	cmp	r4, #0
 800d32e:	bf08      	it	eq
 800d330:	2401      	moveq	r4, #1
 800d332:	2328      	movs	r3, #40	@ 0x28
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d338:	f10d 08b0 	add.w	r8, sp, #176	@ 0xb0
 800d33c:	9302      	str	r3, [sp, #8]
 800d33e:	f445 7780 	orr.w	r7, r5, #256	@ 0x100
 800d342:	9b07      	ldr	r3, [sp, #28]
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	ae1a      	add	r6, sp, #104	@ 0x68
 800d348:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d350:	9600      	str	r6, [sp, #0]
 800d352:	ab19      	add	r3, sp, #100	@ 0x64
 800d354:	463a      	mov	r2, r7
 800d356:	4621      	mov	r1, r4
 800d358:	4650      	mov	r0, sl
 800d35a:	f7ff fdc3 	bl	800cee4 <wcvt>
 800d35e:	4540      	cmp	r0, r8
 800d360:	4681      	mov	r9, r0
 800d362:	f040 80e7 	bne.w	800d534 <_svfwprintf_r+0x564>
 800d366:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d368:	2b28      	cmp	r3, #40	@ 0x28
 800d36a:	f340 80e3 	ble.w	800d534 <_svfwprintf_r+0x564>
 800d36e:	0099      	lsls	r1, r3, #2
 800d370:	4650      	mov	r0, sl
 800d372:	930e      	str	r3, [sp, #56]	@ 0x38
 800d374:	f7fe feac 	bl	800c0d0 <_malloc_r>
 800d378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37a:	4680      	mov	r8, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f43f af57 	beq.w	800d230 <_svfwprintf_r+0x260>
 800d382:	e9cd 0303 	strd	r0, r3, [sp, #12]
 800d386:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d388:	9302      	str	r3, [sp, #8]
 800d38a:	9b07      	ldr	r3, [sp, #28]
 800d38c:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d390:	e9cd 6300 	strd	r6, r3, [sp]
 800d394:	463a      	mov	r2, r7
 800d396:	ab19      	add	r3, sp, #100	@ 0x64
 800d398:	4621      	mov	r1, r4
 800d39a:	4650      	mov	r0, sl
 800d39c:	f7ff fda2 	bl	800cee4 <wcvt>
 800d3a0:	4681      	mov	r9, r0
 800d3a2:	9b07      	ldr	r3, [sp, #28]
 800d3a4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d3a6:	f023 0320 	bic.w	r3, r3, #32
 800d3aa:	2b47      	cmp	r3, #71	@ 0x47
 800d3ac:	f040 80c5 	bne.w	800d53a <_svfwprintf_r+0x56a>
 800d3b0:	1cf3      	adds	r3, r6, #3
 800d3b2:	db02      	blt.n	800d3ba <_svfwprintf_r+0x3ea>
 800d3b4:	42b4      	cmp	r4, r6
 800d3b6:	f280 80e6 	bge.w	800d586 <_svfwprintf_r+0x5b6>
 800d3ba:	9b07      	ldr	r3, [sp, #28]
 800d3bc:	3b02      	subs	r3, #2
 800d3be:	9307      	str	r3, [sp, #28]
 800d3c0:	1e73      	subs	r3, r6, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	9a07      	ldr	r2, [sp, #28]
 800d3c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3c8:	bfb8      	it	lt
 800d3ca:	f1c6 0301 	rsblt	r3, r6, #1
 800d3ce:	921e      	str	r2, [sp, #120]	@ 0x78
 800d3d0:	bfb4      	ite	lt
 800d3d2:	222d      	movlt	r2, #45	@ 0x2d
 800d3d4:	222b      	movge	r2, #43	@ 0x2b
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	921f      	str	r2, [sp, #124]	@ 0x7c
 800d3da:	f340 80ce 	ble.w	800d57a <_svfwprintf_r+0x5aa>
 800d3de:	a92c      	add	r1, sp, #176	@ 0xb0
 800d3e0:	260a      	movs	r6, #10
 800d3e2:	460a      	mov	r2, r1
 800d3e4:	fbb3 f4f6 	udiv	r4, r3, r6
 800d3e8:	fb06 3014 	mls	r0, r6, r4, r3
 800d3ec:	3030      	adds	r0, #48	@ 0x30
 800d3ee:	f842 0c04 	str.w	r0, [r2, #-4]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	2863      	cmp	r0, #99	@ 0x63
 800d3f6:	f1a1 0104 	sub.w	r1, r1, #4
 800d3fa:	4623      	mov	r3, r4
 800d3fc:	dcf1      	bgt.n	800d3e2 <_svfwprintf_r+0x412>
 800d3fe:	3330      	adds	r3, #48	@ 0x30
 800d400:	f841 3c04 	str.w	r3, [r1, #-4]
 800d404:	f1a2 0008 	sub.w	r0, r2, #8
 800d408:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d40a:	a92c      	add	r1, sp, #176	@ 0xb0
 800d40c:	4288      	cmp	r0, r1
 800d40e:	f0c0 80af 	bcc.w	800d570 <_svfwprintf_r+0x5a0>
 800d412:	f10d 03bb 	add.w	r3, sp, #187	@ 0xbb
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	f023 0303 	bic.w	r3, r3, #3
 800d41c:	3a0b      	subs	r2, #11
 800d41e:	4291      	cmp	r1, r2
 800d420:	bf38      	it	cc
 800d422:	2300      	movcc	r3, #0
 800d424:	aa20      	add	r2, sp, #128	@ 0x80
 800d426:	18d4      	adds	r4, r2, r3
 800d428:	ab1e      	add	r3, sp, #120	@ 0x78
 800d42a:	1ae4      	subs	r4, r4, r3
 800d42c:	10a3      	asrs	r3, r4, #2
 800d42e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d430:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d432:	2b01      	cmp	r3, #1
 800d434:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800d438:	dc02      	bgt.n	800d440 <_svfwprintf_r+0x470>
 800d43a:	f015 0601 	ands.w	r6, r5, #1
 800d43e:	d001      	beq.n	800d444 <_svfwprintf_r+0x474>
 800d440:	3401      	adds	r4, #1
 800d442:	2600      	movs	r6, #0
 800d444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d446:	2b00      	cmp	r3, #0
 800d448:	f040 80b6 	bne.w	800d5b8 <_svfwprintf_r+0x5e8>
 800d44c:	463d      	mov	r5, r7
 800d44e:	2700      	movs	r7, #0
 800d450:	42a7      	cmp	r7, r4
 800d452:	463b      	mov	r3, r7
 800d454:	bfb8      	it	lt
 800d456:	4623      	movlt	r3, r4
 800d458:	930e      	str	r3, [sp, #56]	@ 0x38
 800d45a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d45c:	b113      	cbz	r3, 800d464 <_svfwprintf_r+0x494>
 800d45e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d460:	3301      	adds	r3, #1
 800d462:	930e      	str	r3, [sp, #56]	@ 0x38
 800d464:	f015 0302 	ands.w	r3, r5, #2
 800d468:	9314      	str	r3, [sp, #80]	@ 0x50
 800d46a:	bf1e      	ittt	ne
 800d46c:	9b0e      	ldrne	r3, [sp, #56]	@ 0x38
 800d46e:	3302      	addne	r3, #2
 800d470:	930e      	strne	r3, [sp, #56]	@ 0x38
 800d472:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800d476:	9315      	str	r3, [sp, #84]	@ 0x54
 800d478:	f000 8164 	beq.w	800d744 <_svfwprintf_r+0x774>
 800d47c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d47e:	b143      	cbz	r3, 800d492 <_svfwprintf_r+0x4c2>
 800d480:	2304      	movs	r3, #4
 800d482:	aa17      	add	r2, sp, #92	@ 0x5c
 800d484:	4659      	mov	r1, fp
 800d486:	4650      	mov	r0, sl
 800d488:	f7ff fa30 	bl	800c8ec <__ssputs_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	f000 816d 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d492:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d494:	b143      	cbz	r3, 800d4a8 <_svfwprintf_r+0x4d8>
 800d496:	2308      	movs	r3, #8
 800d498:	aa1c      	add	r2, sp, #112	@ 0x70
 800d49a:	4659      	mov	r1, fp
 800d49c:	4650      	mov	r0, sl
 800d49e:	f7ff fa25 	bl	800c8ec <__ssputs_r>
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	f000 8162 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d4a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4aa:	2b80      	cmp	r3, #128	@ 0x80
 800d4ac:	d113      	bne.n	800d4d6 <_svfwprintf_r+0x506>
 800d4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4b2:	1a9b      	subs	r3, r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4b8:	dd0d      	ble.n	800d4d6 <_svfwprintf_r+0x506>
 800d4ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4bc:	4a2b      	ldr	r2, [pc, #172]	@ (800d56c <_svfwprintf_r+0x59c>)
 800d4be:	2b10      	cmp	r3, #16
 800d4c0:	f300 8168 	bgt.w	800d794 <_svfwprintf_r+0x7c4>
 800d4c4:	4a29      	ldr	r2, [pc, #164]	@ (800d56c <_svfwprintf_r+0x59c>)
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4659      	mov	r1, fp
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	f7ff fa0e 	bl	800c8ec <__ssputs_r>
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f000 814b 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d4d6:	1b3f      	subs	r7, r7, r4
 800d4d8:	2f00      	cmp	r7, #0
 800d4da:	dd0c      	ble.n	800d4f6 <_svfwprintf_r+0x526>
 800d4dc:	2f10      	cmp	r7, #16
 800d4de:	4a23      	ldr	r2, [pc, #140]	@ (800d56c <_svfwprintf_r+0x59c>)
 800d4e0:	f300 8163 	bgt.w	800d7aa <_svfwprintf_r+0x7da>
 800d4e4:	4a21      	ldr	r2, [pc, #132]	@ (800d56c <_svfwprintf_r+0x59c>)
 800d4e6:	00bb      	lsls	r3, r7, #2
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	4650      	mov	r0, sl
 800d4ec:	f7ff f9fe 	bl	800c8ec <__ssputs_r>
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	f000 813b 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d4f6:	05e9      	lsls	r1, r5, #23
 800d4f8:	f100 8160 	bmi.w	800d7bc <_svfwprintf_r+0x7ec>
 800d4fc:	00a3      	lsls	r3, r4, #2
 800d4fe:	464a      	mov	r2, r9
 800d500:	4659      	mov	r1, fp
 800d502:	4650      	mov	r0, sl
 800d504:	f7ff f9f2 	bl	800c8ec <__ssputs_r>
 800d508:	3001      	adds	r0, #1
 800d50a:	f000 812f 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d50e:	076a      	lsls	r2, r5, #29
 800d510:	f100 8279 	bmi.w	800da06 <_svfwprintf_r+0xa36>
 800d514:	f1b8 0f00 	cmp.w	r8, #0
 800d518:	f040 8293 	bne.w	800da42 <_svfwprintf_r+0xa72>
 800d51c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d520:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d522:	9e08      	ldr	r6, [sp, #32]
 800d524:	428a      	cmp	r2, r1
 800d526:	bfac      	ite	ge
 800d528:	189b      	addge	r3, r3, r2
 800d52a:	185b      	addlt	r3, r3, r1
 800d52c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d52e:	e57f      	b.n	800d030 <_svfwprintf_r+0x60>
 800d530:	2406      	movs	r4, #6
 800d532:	e6fe      	b.n	800d332 <_svfwprintf_r+0x362>
 800d534:	f04f 0800 	mov.w	r8, #0
 800d538:	e733      	b.n	800d3a2 <_svfwprintf_r+0x3d2>
 800d53a:	9b07      	ldr	r3, [sp, #28]
 800d53c:	2b66      	cmp	r3, #102	@ 0x66
 800d53e:	f47f af3f 	bne.w	800d3c0 <_svfwprintf_r+0x3f0>
 800d542:	f005 0501 	and.w	r5, r5, #1
 800d546:	2e00      	cmp	r6, #0
 800d548:	ea45 0504 	orr.w	r5, r5, r4
 800d54c:	dd25      	ble.n	800d59a <_svfwprintf_r+0x5ca>
 800d54e:	b36d      	cbz	r5, 800d5ac <_svfwprintf_r+0x5dc>
 800d550:	3401      	adds	r4, #1
 800d552:	4434      	add	r4, r6
 800d554:	e776      	b.n	800d444 <_svfwprintf_r+0x474>
 800d556:	bf00      	nop
 800d558:	7fefffff 	.word	0x7fefffff
 800d55c:	0801135c 	.word	0x0801135c
 800d560:	0801136c 	.word	0x0801136c
 800d564:	0801137c 	.word	0x0801137c
 800d568:	0801138c 	.word	0x0801138c
 800d56c:	0801142c 	.word	0x0801142c
 800d570:	f850 4b04 	ldr.w	r4, [r0], #4
 800d574:	f843 4f04 	str.w	r4, [r3, #4]!
 800d578:	e748      	b.n	800d40c <_svfwprintf_r+0x43c>
 800d57a:	2230      	movs	r2, #48	@ 0x30
 800d57c:	4413      	add	r3, r2
 800d57e:	9220      	str	r2, [sp, #128]	@ 0x80
 800d580:	9321      	str	r3, [sp, #132]	@ 0x84
 800d582:	ac22      	add	r4, sp, #136	@ 0x88
 800d584:	e750      	b.n	800d428 <_svfwprintf_r+0x458>
 800d586:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d588:	42b3      	cmp	r3, r6
 800d58a:	dd09      	ble.n	800d5a0 <_svfwprintf_r+0x5d0>
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	bfd4      	ite	le
 800d590:	f1c6 0402 	rsble	r4, r6, #2
 800d594:	2401      	movgt	r4, #1
 800d596:	441c      	add	r4, r3
 800d598:	e005      	b.n	800d5a6 <_svfwprintf_r+0x5d6>
 800d59a:	b14d      	cbz	r5, 800d5b0 <_svfwprintf_r+0x5e0>
 800d59c:	3402      	adds	r4, #2
 800d59e:	e751      	b.n	800d444 <_svfwprintf_r+0x474>
 800d5a0:	07ec      	lsls	r4, r5, #31
 800d5a2:	d507      	bpl.n	800d5b4 <_svfwprintf_r+0x5e4>
 800d5a4:	1c74      	adds	r4, r6, #1
 800d5a6:	2367      	movs	r3, #103	@ 0x67
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	e74b      	b.n	800d444 <_svfwprintf_r+0x474>
 800d5ac:	4634      	mov	r4, r6
 800d5ae:	e749      	b.n	800d444 <_svfwprintf_r+0x474>
 800d5b0:	2401      	movs	r4, #1
 800d5b2:	e747      	b.n	800d444 <_svfwprintf_r+0x474>
 800d5b4:	4634      	mov	r4, r6
 800d5b6:	e7f6      	b.n	800d5a6 <_svfwprintf_r+0x5d6>
 800d5b8:	232d      	movs	r3, #45	@ 0x2d
 800d5ba:	9317      	str	r3, [sp, #92]	@ 0x5c
 800d5bc:	e746      	b.n	800d44c <_svfwprintf_r+0x47c>
 800d5be:	06e8      	lsls	r0, r5, #27
 800d5c0:	6833      	ldr	r3, [r6, #0]
 800d5c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5c4:	d501      	bpl.n	800d5ca <_svfwprintf_r+0x5fa>
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	e002      	b.n	800d5d0 <_svfwprintf_r+0x600>
 800d5ca:	0669      	lsls	r1, r5, #25
 800d5cc:	d5fb      	bpl.n	800d5c6 <_svfwprintf_r+0x5f6>
 800d5ce:	801a      	strh	r2, [r3, #0]
 800d5d0:	3604      	adds	r6, #4
 800d5d2:	e52d      	b.n	800d030 <_svfwprintf_r+0x60>
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	f015 0110 	ands.w	r1, r5, #16
 800d5da:	f852 3b04 	ldr.w	r3, [r2], #4
 800d5de:	9208      	str	r2, [sp, #32]
 800d5e0:	d011      	beq.n	800d606 <_svfwprintf_r+0x636>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d5e8:	1c66      	adds	r6, r4, #1
 800d5ea:	f000 822f 	beq.w	800da4c <_svfwprintf_r+0xa7c>
 800d5ee:	f025 0180 	bic.w	r1, r5, #128	@ 0x80
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f040 822e 	bne.w	800da54 <_svfwprintf_r+0xa84>
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	f000 8096 	beq.w	800d72a <_svfwprintf_r+0x75a>
 800d5fe:	2a01      	cmp	r2, #1
 800d600:	f040 822b 	bne.w	800da5a <_svfwprintf_r+0xa8a>
 800d604:	e073      	b.n	800d6ee <_svfwprintf_r+0x71e>
 800d606:	f015 0240 	ands.w	r2, r5, #64	@ 0x40
 800d60a:	d0eb      	beq.n	800d5e4 <_svfwprintf_r+0x614>
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	e7e8      	b.n	800d5e2 <_svfwprintf_r+0x612>
 800d610:	4632      	mov	r2, r6
 800d612:	2178      	movs	r1, #120	@ 0x78
 800d614:	f852 3b04 	ldr.w	r3, [r2], #4
 800d618:	9208      	str	r2, [sp, #32]
 800d61a:	2230      	movs	r2, #48	@ 0x30
 800d61c:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
 800d620:	4a9d      	ldr	r2, [pc, #628]	@ (800d898 <_svfwprintf_r+0x8c8>)
 800d622:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d624:	f045 0502 	orr.w	r5, r5, #2
 800d628:	2202      	movs	r2, #2
 800d62a:	9107      	str	r1, [sp, #28]
 800d62c:	e7da      	b.n	800d5e4 <_svfwprintf_r+0x614>
 800d62e:	4633      	mov	r3, r6
 800d630:	2700      	movs	r7, #0
 800d632:	f853 9b04 	ldr.w	r9, [r3], #4
 800d636:	9308      	str	r3, [sp, #32]
 800d638:	f015 0610 	ands.w	r6, r5, #16
 800d63c:	9717      	str	r7, [sp, #92]	@ 0x5c
 800d63e:	d12d      	bne.n	800d69c <_svfwprintf_r+0x6cc>
 800d640:	1c62      	adds	r2, r4, #1
 800d642:	d014      	beq.n	800d66e <_svfwprintf_r+0x69e>
 800d644:	4622      	mov	r2, r4
 800d646:	4631      	mov	r1, r6
 800d648:	4648      	mov	r0, r9
 800d64a:	4627      	mov	r7, r4
 800d64c:	f7f2 fdc0 	bl	80001d0 <memchr>
 800d650:	b108      	cbz	r0, 800d656 <_svfwprintf_r+0x686>
 800d652:	eba0 0709 	sub.w	r7, r0, r9
 800d656:	2f27      	cmp	r7, #39	@ 0x27
 800d658:	d90e      	bls.n	800d678 <_svfwprintf_r+0x6a8>
 800d65a:	1c79      	adds	r1, r7, #1
 800d65c:	0089      	lsls	r1, r1, #2
 800d65e:	4650      	mov	r0, sl
 800d660:	f7fe fd36 	bl	800c0d0 <_malloc_r>
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f ade3 	beq.w	800d230 <_svfwprintf_r+0x260>
 800d66a:	4680      	mov	r8, r0
 800d66c:	e007      	b.n	800d67e <_svfwprintf_r+0x6ae>
 800d66e:	4648      	mov	r0, r9
 800d670:	f7f2 fdfe 	bl	8000270 <strlen>
 800d674:	4607      	mov	r7, r0
 800d676:	e7ee      	b.n	800d656 <_svfwprintf_r+0x686>
 800d678:	f04f 0800 	mov.w	r8, #0
 800d67c:	a82c      	add	r0, sp, #176	@ 0xb0
 800d67e:	463c      	mov	r4, r7
 800d680:	2300      	movs	r3, #0
 800d682:	42bb      	cmp	r3, r7
 800d684:	d104      	bne.n	800d690 <_svfwprintf_r+0x6c0>
 800d686:	2700      	movs	r7, #0
 800d688:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800d68c:	4681      	mov	r9, r0
 800d68e:	e6df      	b.n	800d450 <_svfwprintf_r+0x480>
 800d690:	f819 2003 	ldrb.w	r2, [r9, r3]
 800d694:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d698:	3301      	adds	r3, #1
 800d69a:	e7f2      	b.n	800d682 <_svfwprintf_r+0x6b2>
 800d69c:	1c63      	adds	r3, r4, #1
 800d69e:	d011      	beq.n	800d6c4 <_svfwprintf_r+0x6f4>
 800d6a0:	4622      	mov	r2, r4
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	4648      	mov	r0, r9
 800d6a6:	f000 fa20 	bl	800daea <wmemchr>
 800d6aa:	4680      	mov	r8, r0
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	f43f ae24 	beq.w	800d2fa <_svfwprintf_r+0x32a>
 800d6b2:	eba0 0809 	sub.w	r8, r0, r9
 800d6b6:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800d6ba:	4544      	cmp	r4, r8
 800d6bc:	bfa8      	it	ge
 800d6be:	4644      	movge	r4, r8
 800d6c0:	46b8      	mov	r8, r7
 800d6c2:	e61a      	b.n	800d2fa <_svfwprintf_r+0x32a>
 800d6c4:	4648      	mov	r0, r9
 800d6c6:	f000 fa07 	bl	800dad8 <wcslen>
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	e7f8      	b.n	800d6c0 <_svfwprintf_r+0x6f0>
 800d6ce:	4632      	mov	r2, r6
 800d6d0:	06ee      	lsls	r6, r5, #27
 800d6d2:	f852 3b04 	ldr.w	r3, [r2], #4
 800d6d6:	9208      	str	r2, [sp, #32]
 800d6d8:	d501      	bpl.n	800d6de <_svfwprintf_r+0x70e>
 800d6da:	2201      	movs	r2, #1
 800d6dc:	e782      	b.n	800d5e4 <_svfwprintf_r+0x614>
 800d6de:	0668      	lsls	r0, r5, #25
 800d6e0:	bf48      	it	mi
 800d6e2:	b29b      	uxthmi	r3, r3
 800d6e4:	e7f9      	b.n	800d6da <_svfwprintf_r+0x70a>
 800d6e6:	4b6d      	ldr	r3, [pc, #436]	@ (800d89c <_svfwprintf_r+0x8cc>)
 800d6e8:	e52a      	b.n	800d140 <_svfwprintf_r+0x170>
 800d6ea:	2b09      	cmp	r3, #9
 800d6ec:	d804      	bhi.n	800d6f8 <_svfwprintf_r+0x728>
 800d6ee:	3330      	adds	r3, #48	@ 0x30
 800d6f0:	9353      	str	r3, [sp, #332]	@ 0x14c
 800d6f2:	f50d 79a6 	add.w	r9, sp, #332	@ 0x14c
 800d6f6:	e1c6      	b.n	800da86 <_svfwprintf_r+0xab6>
 800d6f8:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 800d6fc:	250a      	movs	r5, #10
 800d6fe:	fbb3 f0f5 	udiv	r0, r3, r5
 800d702:	fb05 3210 	mls	r2, r5, r0, r3
 800d706:	3230      	adds	r2, #48	@ 0x30
 800d708:	f849 2d04 	str.w	r2, [r9, #-4]!
 800d70c:	461a      	mov	r2, r3
 800d70e:	2a09      	cmp	r2, #9
 800d710:	4603      	mov	r3, r0
 800d712:	d8f4      	bhi.n	800d6fe <_svfwprintf_r+0x72e>
 800d714:	e1b7      	b.n	800da86 <_svfwprintf_r+0xab6>
 800d716:	f003 020f 	and.w	r2, r3, #15
 800d71a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800d71c:	091b      	lsrs	r3, r3, #4
 800d71e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800d722:	f849 2d04 	str.w	r2, [r9, #-4]!
 800d726:	d1f6      	bne.n	800d716 <_svfwprintf_r+0x746>
 800d728:	e1ad      	b.n	800da86 <_svfwprintf_r+0xab6>
 800d72a:	b91a      	cbnz	r2, 800d734 <_svfwprintf_r+0x764>
 800d72c:	07e8      	lsls	r0, r5, #31
 800d72e:	d501      	bpl.n	800d734 <_svfwprintf_r+0x764>
 800d730:	2330      	movs	r3, #48	@ 0x30
 800d732:	e7dd      	b.n	800d6f0 <_svfwprintf_r+0x720>
 800d734:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 800d738:	e1a5      	b.n	800da86 <_svfwprintf_r+0xab6>
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f47f ad18 	bne.w	800d172 <_svfwprintf_r+0x1a2>
 800d742:	e57b      	b.n	800d23c <_svfwprintf_r+0x26c>
 800d744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d748:	1a9b      	subs	r3, r3, r2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d74e:	f77f ae95 	ble.w	800d47c <_svfwprintf_r+0x4ac>
 800d752:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d754:	4a52      	ldr	r2, [pc, #328]	@ (800d8a0 <_svfwprintf_r+0x8d0>)
 800d756:	2b10      	cmp	r3, #16
 800d758:	dc11      	bgt.n	800d77e <_svfwprintf_r+0x7ae>
 800d75a:	4a51      	ldr	r2, [pc, #324]	@ (800d8a0 <_svfwprintf_r+0x8d0>)
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4659      	mov	r1, fp
 800d760:	4650      	mov	r0, sl
 800d762:	f7ff f8c3 	bl	800c8ec <__ssputs_r>
 800d766:	3001      	adds	r0, #1
 800d768:	f47f ae88 	bne.w	800d47c <_svfwprintf_r+0x4ac>
 800d76c:	f1b8 0f00 	cmp.w	r8, #0
 800d770:	f43f ad64 	beq.w	800d23c <_svfwprintf_r+0x26c>
 800d774:	4641      	mov	r1, r8
 800d776:	4650      	mov	r0, sl
 800d778:	f7fe fc36 	bl	800bfe8 <_free_r>
 800d77c:	e55e      	b.n	800d23c <_svfwprintf_r+0x26c>
 800d77e:	2340      	movs	r3, #64	@ 0x40
 800d780:	4659      	mov	r1, fp
 800d782:	4650      	mov	r0, sl
 800d784:	f7ff f8b2 	bl	800c8ec <__ssputs_r>
 800d788:	3001      	adds	r0, #1
 800d78a:	d0ef      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d78c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d78e:	3b10      	subs	r3, #16
 800d790:	9312      	str	r3, [sp, #72]	@ 0x48
 800d792:	e7de      	b.n	800d752 <_svfwprintf_r+0x782>
 800d794:	2340      	movs	r3, #64	@ 0x40
 800d796:	4659      	mov	r1, fp
 800d798:	4650      	mov	r0, sl
 800d79a:	f7ff f8a7 	bl	800c8ec <__ssputs_r>
 800d79e:	3001      	adds	r0, #1
 800d7a0:	d0e4      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d7a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7a4:	3b10      	subs	r3, #16
 800d7a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d7a8:	e687      	b.n	800d4ba <_svfwprintf_r+0x4ea>
 800d7aa:	2340      	movs	r3, #64	@ 0x40
 800d7ac:	4659      	mov	r1, fp
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	f7ff f89c 	bl	800c8ec <__ssputs_r>
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d0d9      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d7b8:	3f10      	subs	r7, #16
 800d7ba:	e68f      	b.n	800d4dc <_svfwprintf_r+0x50c>
 800d7bc:	9b07      	ldr	r3, [sp, #28]
 800d7be:	2b65      	cmp	r3, #101	@ 0x65
 800d7c0:	f240 80e0 	bls.w	800d984 <_svfwprintf_r+0x9b4>
 800d7c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f7f3 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7d0:	b350      	cbz	r0, 800d828 <_svfwprintf_r+0x858>
 800d7d2:	4a34      	ldr	r2, [pc, #208]	@ (800d8a4 <_svfwprintf_r+0x8d4>)
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	4659      	mov	r1, fp
 800d7d8:	4650      	mov	r0, sl
 800d7da:	f7ff f887 	bl	800c8ec <__ssputs_r>
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d0c4      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d7e2:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	@ 0x68
 800d7e6:	42a3      	cmp	r3, r4
 800d7e8:	db02      	blt.n	800d7f0 <_svfwprintf_r+0x820>
 800d7ea:	07eb      	lsls	r3, r5, #31
 800d7ec:	f57f ae8f 	bpl.w	800d50e <_svfwprintf_r+0x53e>
 800d7f0:	2304      	movs	r3, #4
 800d7f2:	aa18      	add	r2, sp, #96	@ 0x60
 800d7f4:	4659      	mov	r1, fp
 800d7f6:	4650      	mov	r0, sl
 800d7f8:	f7ff f878 	bl	800c8ec <__ssputs_r>
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d0b5      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d800:	3c01      	subs	r4, #1
 800d802:	2c00      	cmp	r4, #0
 800d804:	f77f ae83 	ble.w	800d50e <_svfwprintf_r+0x53e>
 800d808:	4e27      	ldr	r6, [pc, #156]	@ (800d8a8 <_svfwprintf_r+0x8d8>)
 800d80a:	2c10      	cmp	r4, #16
 800d80c:	dc02      	bgt.n	800d814 <_svfwprintf_r+0x844>
 800d80e:	4a26      	ldr	r2, [pc, #152]	@ (800d8a8 <_svfwprintf_r+0x8d8>)
 800d810:	00a3      	lsls	r3, r4, #2
 800d812:	e675      	b.n	800d500 <_svfwprintf_r+0x530>
 800d814:	2340      	movs	r3, #64	@ 0x40
 800d816:	4632      	mov	r2, r6
 800d818:	4659      	mov	r1, fp
 800d81a:	4650      	mov	r0, sl
 800d81c:	f7ff f866 	bl	800c8ec <__ssputs_r>
 800d820:	3001      	adds	r0, #1
 800d822:	d0a3      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d824:	3c10      	subs	r4, #16
 800d826:	e7f0      	b.n	800d80a <_svfwprintf_r+0x83a>
 800d828:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dc3e      	bgt.n	800d8ac <_svfwprintf_r+0x8dc>
 800d82e:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a4 <_svfwprintf_r+0x8d4>)
 800d830:	2304      	movs	r3, #4
 800d832:	4659      	mov	r1, fp
 800d834:	4650      	mov	r0, sl
 800d836:	f7ff f859 	bl	800c8ec <__ssputs_r>
 800d83a:	3001      	adds	r0, #1
 800d83c:	d096      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d83e:	e9dd 361a 	ldrd	r3, r6, [sp, #104]	@ 0x68
 800d842:	f005 0201 	and.w	r2, r5, #1
 800d846:	4333      	orrs	r3, r6
 800d848:	4313      	orrs	r3, r2
 800d84a:	f43f ae60 	beq.w	800d50e <_svfwprintf_r+0x53e>
 800d84e:	2304      	movs	r3, #4
 800d850:	aa18      	add	r2, sp, #96	@ 0x60
 800d852:	4659      	mov	r1, fp
 800d854:	4650      	mov	r0, sl
 800d856:	f7ff f849 	bl	800c8ec <__ssputs_r>
 800d85a:	3001      	adds	r0, #1
 800d85c:	d086      	beq.n	800d76c <_svfwprintf_r+0x79c>
 800d85e:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800d860:	2c00      	cmp	r4, #0
 800d862:	da0c      	bge.n	800d87e <_svfwprintf_r+0x8ae>
 800d864:	4f10      	ldr	r7, [pc, #64]	@ (800d8a8 <_svfwprintf_r+0x8d8>)
 800d866:	4264      	negs	r4, r4
 800d868:	2c10      	cmp	r4, #16
 800d86a:	dc0a      	bgt.n	800d882 <_svfwprintf_r+0x8b2>
 800d86c:	4a0e      	ldr	r2, [pc, #56]	@ (800d8a8 <_svfwprintf_r+0x8d8>)
 800d86e:	00a3      	lsls	r3, r4, #2
 800d870:	4659      	mov	r1, fp
 800d872:	4650      	mov	r0, sl
 800d874:	f7ff f83a 	bl	800c8ec <__ssputs_r>
 800d878:	3001      	adds	r0, #1
 800d87a:	f43f af77 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d87e:	00b3      	lsls	r3, r6, #2
 800d880:	e63d      	b.n	800d4fe <_svfwprintf_r+0x52e>
 800d882:	2340      	movs	r3, #64	@ 0x40
 800d884:	463a      	mov	r2, r7
 800d886:	4659      	mov	r1, fp
 800d888:	4650      	mov	r0, sl
 800d88a:	f7ff f82f 	bl	800c8ec <__ssputs_r>
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f af6c 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d894:	3c10      	subs	r4, #16
 800d896:	e7e7      	b.n	800d868 <_svfwprintf_r+0x898>
 800d898:	0801139c 	.word	0x0801139c
 800d89c:	080113e0 	.word	0x080113e0
 800d8a0:	0801146c 	.word	0x0801146c
 800d8a4:	08011424 	.word	0x08011424
 800d8a8:	0801142c 	.word	0x0801142c
 800d8ac:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800d8ae:	00a3      	lsls	r3, r4, #2
 800d8b0:	9307      	str	r3, [sp, #28]
 800d8b2:	f344 031d 	sbfx	r3, r4, #0, #30
 800d8b6:	42b3      	cmp	r3, r6
 800d8b8:	bfa8      	it	ge
 800d8ba:	4633      	movge	r3, r6
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	461f      	mov	r7, r3
 800d8c0:	dc1f      	bgt.n	800d902 <_svfwprintf_r+0x932>
 800d8c2:	2f00      	cmp	r7, #0
 800d8c4:	bfac      	ite	ge
 800d8c6:	1bf7      	subge	r7, r6, r7
 800d8c8:	4637      	movlt	r7, r6
 800d8ca:	2f00      	cmp	r7, #0
 800d8cc:	dd0b      	ble.n	800d8e6 <_svfwprintf_r+0x916>
 800d8ce:	2f10      	cmp	r7, #16
 800d8d0:	4a72      	ldr	r2, [pc, #456]	@ (800da9c <_svfwprintf_r+0xacc>)
 800d8d2:	dc1f      	bgt.n	800d914 <_svfwprintf_r+0x944>
 800d8d4:	4a71      	ldr	r2, [pc, #452]	@ (800da9c <_svfwprintf_r+0xacc>)
 800d8d6:	00bb      	lsls	r3, r7, #2
 800d8d8:	4659      	mov	r1, fp
 800d8da:	4650      	mov	r0, sl
 800d8dc:	f7ff f806 	bl	800c8ec <__ssputs_r>
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	f43f af43 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d8e6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d8e8:	429c      	cmp	r4, r3
 800d8ea:	ea4f 0686 	mov.w	r6, r6, lsl #2
 800d8ee:	dd1b      	ble.n	800d928 <_svfwprintf_r+0x958>
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	aa18      	add	r2, sp, #96	@ 0x60
 800d8f4:	4659      	mov	r1, fp
 800d8f6:	4650      	mov	r0, sl
 800d8f8:	f7fe fff8 	bl	800c8ec <__ssputs_r>
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	d115      	bne.n	800d92c <_svfwprintf_r+0x95c>
 800d900:	e734      	b.n	800d76c <_svfwprintf_r+0x79c>
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	464a      	mov	r2, r9
 800d906:	4659      	mov	r1, fp
 800d908:	4650      	mov	r0, sl
 800d90a:	f7fe ffef 	bl	800c8ec <__ssputs_r>
 800d90e:	3001      	adds	r0, #1
 800d910:	d1d7      	bne.n	800d8c2 <_svfwprintf_r+0x8f2>
 800d912:	e72b      	b.n	800d76c <_svfwprintf_r+0x79c>
 800d914:	2340      	movs	r3, #64	@ 0x40
 800d916:	4659      	mov	r1, fp
 800d918:	4650      	mov	r0, sl
 800d91a:	f7fe ffe7 	bl	800c8ec <__ssputs_r>
 800d91e:	3001      	adds	r0, #1
 800d920:	f43f af24 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d924:	3f10      	subs	r7, #16
 800d926:	e7d2      	b.n	800d8ce <_svfwprintf_r+0x8fe>
 800d928:	07ef      	lsls	r7, r5, #31
 800d92a:	d4e1      	bmi.n	800d8f0 <_svfwprintf_r+0x920>
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800d930:	1b9b      	subs	r3, r3, r6
 800d932:	1be7      	subs	r7, r4, r7
 800d934:	109b      	asrs	r3, r3, #2
 800d936:	429f      	cmp	r7, r3
 800d938:	bfa8      	it	ge
 800d93a:	461f      	movge	r7, r3
 800d93c:	2f00      	cmp	r7, #0
 800d93e:	dd09      	ble.n	800d954 <_svfwprintf_r+0x984>
 800d940:	00bb      	lsls	r3, r7, #2
 800d942:	eb09 0206 	add.w	r2, r9, r6
 800d946:	4659      	mov	r1, fp
 800d948:	4650      	mov	r0, sl
 800d94a:	f7fe ffcf 	bl	800c8ec <__ssputs_r>
 800d94e:	3001      	adds	r0, #1
 800d950:	f43f af0c 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d954:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d956:	2f00      	cmp	r7, #0
 800d958:	eba4 0403 	sub.w	r4, r4, r3
 800d95c:	bfa8      	it	ge
 800d95e:	1be4      	subge	r4, r4, r7
 800d960:	2c00      	cmp	r4, #0
 800d962:	f77f add4 	ble.w	800d50e <_svfwprintf_r+0x53e>
 800d966:	4e4d      	ldr	r6, [pc, #308]	@ (800da9c <_svfwprintf_r+0xacc>)
 800d968:	2c10      	cmp	r4, #16
 800d96a:	f77f af50 	ble.w	800d80e <_svfwprintf_r+0x83e>
 800d96e:	2340      	movs	r3, #64	@ 0x40
 800d970:	4632      	mov	r2, r6
 800d972:	4659      	mov	r1, fp
 800d974:	4650      	mov	r0, sl
 800d976:	f7fe ffb9 	bl	800c8ec <__ssputs_r>
 800d97a:	3001      	adds	r0, #1
 800d97c:	f43f aef6 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d980:	3c10      	subs	r4, #16
 800d982:	e7f1      	b.n	800d968 <_svfwprintf_r+0x998>
 800d984:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 800d986:	2e01      	cmp	r6, #1
 800d988:	f04f 0304 	mov.w	r3, #4
 800d98c:	464a      	mov	r2, r9
 800d98e:	4659      	mov	r1, fp
 800d990:	4650      	mov	r0, sl
 800d992:	dc01      	bgt.n	800d998 <_svfwprintf_r+0x9c8>
 800d994:	07ec      	lsls	r4, r5, #31
 800d996:	d51a      	bpl.n	800d9ce <_svfwprintf_r+0x9fe>
 800d998:	f7fe ffa8 	bl	800c8ec <__ssputs_r>
 800d99c:	3001      	adds	r0, #1
 800d99e:	f43f aee5 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d9a2:	2304      	movs	r3, #4
 800d9a4:	aa18      	add	r2, sp, #96	@ 0x60
 800d9a6:	4659      	mov	r1, fp
 800d9a8:	4650      	mov	r0, sl
 800d9aa:	f7fe ff9f 	bl	800c8ec <__ssputs_r>
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	f43f aedc 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d9b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	1e74      	subs	r4, r6, #1
 800d9be:	f7f3 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9c2:	b968      	cbnz	r0, 800d9e0 <_svfwprintf_r+0xa10>
 800d9c4:	00a3      	lsls	r3, r4, #2
 800d9c6:	f109 0204 	add.w	r2, r9, #4
 800d9ca:	4659      	mov	r1, fp
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	f7fe ff8d 	bl	800c8ec <__ssputs_r>
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	f43f aeca 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800d9d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d9da:	aa1e      	add	r2, sp, #120	@ 0x78
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	e58f      	b.n	800d500 <_svfwprintf_r+0x530>
 800d9e0:	2e01      	cmp	r6, #1
 800d9e2:	ddf9      	ble.n	800d9d8 <_svfwprintf_r+0xa08>
 800d9e4:	4e2d      	ldr	r6, [pc, #180]	@ (800da9c <_svfwprintf_r+0xacc>)
 800d9e6:	2c10      	cmp	r4, #16
 800d9e8:	dc02      	bgt.n	800d9f0 <_svfwprintf_r+0xa20>
 800d9ea:	4a2c      	ldr	r2, [pc, #176]	@ (800da9c <_svfwprintf_r+0xacc>)
 800d9ec:	00a3      	lsls	r3, r4, #2
 800d9ee:	e7ec      	b.n	800d9ca <_svfwprintf_r+0x9fa>
 800d9f0:	2340      	movs	r3, #64	@ 0x40
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	4659      	mov	r1, fp
 800d9f6:	4650      	mov	r0, sl
 800d9f8:	f7fe ff78 	bl	800c8ec <__ssputs_r>
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f aeb5 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800da02:	3c10      	subs	r4, #16
 800da04:	e7ef      	b.n	800d9e6 <_svfwprintf_r+0xa16>
 800da06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da0a:	1a9c      	subs	r4, r3, r2
 800da0c:	2c00      	cmp	r4, #0
 800da0e:	f77f ad81 	ble.w	800d514 <_svfwprintf_r+0x544>
 800da12:	4d23      	ldr	r5, [pc, #140]	@ (800daa0 <_svfwprintf_r+0xad0>)
 800da14:	2c10      	cmp	r4, #16
 800da16:	dc09      	bgt.n	800da2c <_svfwprintf_r+0xa5c>
 800da18:	4a21      	ldr	r2, [pc, #132]	@ (800daa0 <_svfwprintf_r+0xad0>)
 800da1a:	00a3      	lsls	r3, r4, #2
 800da1c:	4659      	mov	r1, fp
 800da1e:	4650      	mov	r0, sl
 800da20:	f7fe ff64 	bl	800c8ec <__ssputs_r>
 800da24:	3001      	adds	r0, #1
 800da26:	f47f ad75 	bne.w	800d514 <_svfwprintf_r+0x544>
 800da2a:	e69f      	b.n	800d76c <_svfwprintf_r+0x79c>
 800da2c:	2340      	movs	r3, #64	@ 0x40
 800da2e:	462a      	mov	r2, r5
 800da30:	4659      	mov	r1, fp
 800da32:	4650      	mov	r0, sl
 800da34:	f7fe ff5a 	bl	800c8ec <__ssputs_r>
 800da38:	3001      	adds	r0, #1
 800da3a:	f43f ae97 	beq.w	800d76c <_svfwprintf_r+0x79c>
 800da3e:	3c10      	subs	r4, #16
 800da40:	e7e8      	b.n	800da14 <_svfwprintf_r+0xa44>
 800da42:	4641      	mov	r1, r8
 800da44:	4650      	mov	r0, sl
 800da46:	f7fe facf 	bl	800bfe8 <_free_r>
 800da4a:	e567      	b.n	800d51c <_svfwprintf_r+0x54c>
 800da4c:	4629      	mov	r1, r5
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f43f add5 	beq.w	800d5fe <_svfwprintf_r+0x62e>
 800da54:	2a01      	cmp	r2, #1
 800da56:	f43f ae48 	beq.w	800d6ea <_svfwprintf_r+0x71a>
 800da5a:	2a02      	cmp	r2, #2
 800da5c:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 800da60:	f43f ae59 	beq.w	800d716 <_svfwprintf_r+0x746>
 800da64:	f003 0207 	and.w	r2, r3, #7
 800da68:	3230      	adds	r2, #48	@ 0x30
 800da6a:	08db      	lsrs	r3, r3, #3
 800da6c:	4648      	mov	r0, r9
 800da6e:	f849 2d04 	str.w	r2, [r9, #-4]!
 800da72:	d1f7      	bne.n	800da64 <_svfwprintf_r+0xa94>
 800da74:	07cd      	lsls	r5, r1, #31
 800da76:	d506      	bpl.n	800da86 <_svfwprintf_r+0xab6>
 800da78:	2a30      	cmp	r2, #48	@ 0x30
 800da7a:	d004      	beq.n	800da86 <_svfwprintf_r+0xab6>
 800da7c:	2330      	movs	r3, #48	@ 0x30
 800da7e:	f849 3c04 	str.w	r3, [r9, #-4]
 800da82:	f1a0 0908 	sub.w	r9, r0, #8
 800da86:	ab54      	add	r3, sp, #336	@ 0x150
 800da88:	eba3 0309 	sub.w	r3, r3, r9
 800da8c:	4627      	mov	r7, r4
 800da8e:	460d      	mov	r5, r1
 800da90:	109c      	asrs	r4, r3, #2
 800da92:	f04f 0800 	mov.w	r8, #0
 800da96:	4646      	mov	r6, r8
 800da98:	e4da      	b.n	800d450 <_svfwprintf_r+0x480>
 800da9a:	bf00      	nop
 800da9c:	0801142c 	.word	0x0801142c
 800daa0:	0801146c 	.word	0x0801146c

0800daa4 <memmove>:
 800daa4:	4288      	cmp	r0, r1
 800daa6:	b510      	push	{r4, lr}
 800daa8:	eb01 0402 	add.w	r4, r1, r2
 800daac:	d902      	bls.n	800dab4 <memmove+0x10>
 800daae:	4284      	cmp	r4, r0
 800dab0:	4623      	mov	r3, r4
 800dab2:	d807      	bhi.n	800dac4 <memmove+0x20>
 800dab4:	1e43      	subs	r3, r0, #1
 800dab6:	42a1      	cmp	r1, r4
 800dab8:	d008      	beq.n	800dacc <memmove+0x28>
 800daba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dabe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dac2:	e7f8      	b.n	800dab6 <memmove+0x12>
 800dac4:	4402      	add	r2, r0
 800dac6:	4601      	mov	r1, r0
 800dac8:	428a      	cmp	r2, r1
 800daca:	d100      	bne.n	800dace <memmove+0x2a>
 800dacc:	bd10      	pop	{r4, pc}
 800dace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dad6:	e7f7      	b.n	800dac8 <memmove+0x24>

0800dad8 <wcslen>:
 800dad8:	4602      	mov	r2, r0
 800dada:	4613      	mov	r3, r2
 800dadc:	3204      	adds	r2, #4
 800dade:	6819      	ldr	r1, [r3, #0]
 800dae0:	2900      	cmp	r1, #0
 800dae2:	d1fa      	bne.n	800dada <wcslen+0x2>
 800dae4:	1a18      	subs	r0, r3, r0
 800dae6:	1080      	asrs	r0, r0, #2
 800dae8:	4770      	bx	lr

0800daea <wmemchr>:
 800daea:	b530      	push	{r4, r5, lr}
 800daec:	4603      	mov	r3, r0
 800daee:	2400      	movs	r4, #0
 800daf0:	4294      	cmp	r4, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	d101      	bne.n	800dafa <wmemchr+0x10>
 800daf6:	2000      	movs	r0, #0
 800daf8:	bd30      	pop	{r4, r5, pc}
 800dafa:	6805      	ldr	r5, [r0, #0]
 800dafc:	428d      	cmp	r5, r1
 800dafe:	f103 0304 	add.w	r3, r3, #4
 800db02:	d0f9      	beq.n	800daf8 <wmemchr+0xe>
 800db04:	3401      	adds	r4, #1
 800db06:	e7f3      	b.n	800daf0 <wmemchr+0x6>

0800db08 <_fstat_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d07      	ldr	r5, [pc, #28]	@ (800db28 <_fstat_r+0x20>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	4611      	mov	r1, r2
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	f7f4 ff67 	bl	80029e8 <_fstat>
 800db1a:	1c43      	adds	r3, r0, #1
 800db1c:	d102      	bne.n	800db24 <_fstat_r+0x1c>
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	b103      	cbz	r3, 800db24 <_fstat_r+0x1c>
 800db22:	6023      	str	r3, [r4, #0]
 800db24:	bd38      	pop	{r3, r4, r5, pc}
 800db26:	bf00      	nop
 800db28:	2000a760 	.word	0x2000a760

0800db2c <_isatty_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d06      	ldr	r5, [pc, #24]	@ (800db48 <_isatty_r+0x1c>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	602b      	str	r3, [r5, #0]
 800db38:	f7f4 ff66 	bl	8002a08 <_isatty>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_isatty_r+0x1a>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_isatty_r+0x1a>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	2000a760 	.word	0x2000a760

0800db4c <_sbrk_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d06      	ldr	r5, [pc, #24]	@ (800db68 <_sbrk_r+0x1c>)
 800db50:	2300      	movs	r3, #0
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	f7f4 ff6e 	bl	8002a38 <_sbrk>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_sbrk_r+0x1a>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_sbrk_r+0x1a>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	2000a760 	.word	0x2000a760

0800db6c <__assert_func>:
 800db6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db6e:	4614      	mov	r4, r2
 800db70:	461a      	mov	r2, r3
 800db72:	4b09      	ldr	r3, [pc, #36]	@ (800db98 <__assert_func+0x2c>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4605      	mov	r5, r0
 800db78:	68d8      	ldr	r0, [r3, #12]
 800db7a:	b954      	cbnz	r4, 800db92 <__assert_func+0x26>
 800db7c:	4b07      	ldr	r3, [pc, #28]	@ (800db9c <__assert_func+0x30>)
 800db7e:	461c      	mov	r4, r3
 800db80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db84:	9100      	str	r1, [sp, #0]
 800db86:	462b      	mov	r3, r5
 800db88:	4905      	ldr	r1, [pc, #20]	@ (800dba0 <__assert_func+0x34>)
 800db8a:	f000 f8b9 	bl	800dd00 <fiprintf>
 800db8e:	f000 f8c9 	bl	800dd24 <abort>
 800db92:	4b04      	ldr	r3, [pc, #16]	@ (800dba4 <__assert_func+0x38>)
 800db94:	e7f4      	b.n	800db80 <__assert_func+0x14>
 800db96:	bf00      	nop
 800db98:	2000002c 	.word	0x2000002c
 800db9c:	080114f1 	.word	0x080114f1
 800dba0:	080114c3 	.word	0x080114c3
 800dba4:	080114b6 	.word	0x080114b6

0800dba8 <_calloc_r>:
 800dba8:	b570      	push	{r4, r5, r6, lr}
 800dbaa:	fba1 5402 	umull	r5, r4, r1, r2
 800dbae:	b93c      	cbnz	r4, 800dbc0 <_calloc_r+0x18>
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	f7fe fa8d 	bl	800c0d0 <_malloc_r>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	b928      	cbnz	r0, 800dbc6 <_calloc_r+0x1e>
 800dbba:	2600      	movs	r6, #0
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	220c      	movs	r2, #12
 800dbc2:	6002      	str	r2, [r0, #0]
 800dbc4:	e7f9      	b.n	800dbba <_calloc_r+0x12>
 800dbc6:	462a      	mov	r2, r5
 800dbc8:	4621      	mov	r1, r4
 800dbca:	f7fd fb31 	bl	800b230 <memset>
 800dbce:	e7f5      	b.n	800dbbc <_calloc_r+0x14>

0800dbd0 <__ascii_mbtowc>:
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	b901      	cbnz	r1, 800dbd6 <__ascii_mbtowc+0x6>
 800dbd4:	a901      	add	r1, sp, #4
 800dbd6:	b142      	cbz	r2, 800dbea <__ascii_mbtowc+0x1a>
 800dbd8:	b14b      	cbz	r3, 800dbee <__ascii_mbtowc+0x1e>
 800dbda:	7813      	ldrb	r3, [r2, #0]
 800dbdc:	600b      	str	r3, [r1, #0]
 800dbde:	7812      	ldrb	r2, [r2, #0]
 800dbe0:	1e10      	subs	r0, r2, #0
 800dbe2:	bf18      	it	ne
 800dbe4:	2001      	movne	r0, #1
 800dbe6:	b002      	add	sp, #8
 800dbe8:	4770      	bx	lr
 800dbea:	4610      	mov	r0, r2
 800dbec:	e7fb      	b.n	800dbe6 <__ascii_mbtowc+0x16>
 800dbee:	f06f 0001 	mvn.w	r0, #1
 800dbf2:	e7f8      	b.n	800dbe6 <__ascii_mbtowc+0x16>

0800dbf4 <_realloc_r>:
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	4615      	mov	r5, r2
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	b921      	cbnz	r1, 800dc0a <_realloc_r+0x16>
 800dc00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc04:	4611      	mov	r1, r2
 800dc06:	f7fe ba63 	b.w	800c0d0 <_malloc_r>
 800dc0a:	b92a      	cbnz	r2, 800dc18 <_realloc_r+0x24>
 800dc0c:	f7fe f9ec 	bl	800bfe8 <_free_r>
 800dc10:	2400      	movs	r4, #0
 800dc12:	4620      	mov	r0, r4
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc18:	f000 f88b 	bl	800dd32 <_malloc_usable_size_r>
 800dc1c:	4285      	cmp	r5, r0
 800dc1e:	4606      	mov	r6, r0
 800dc20:	d802      	bhi.n	800dc28 <_realloc_r+0x34>
 800dc22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc26:	d8f4      	bhi.n	800dc12 <_realloc_r+0x1e>
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	f7fe fa50 	bl	800c0d0 <_malloc_r>
 800dc30:	4607      	mov	r7, r0
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d0ec      	beq.n	800dc10 <_realloc_r+0x1c>
 800dc36:	42b5      	cmp	r5, r6
 800dc38:	462a      	mov	r2, r5
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	bf28      	it	cs
 800dc3e:	4632      	movcs	r2, r6
 800dc40:	f7fd fb75 	bl	800b32e <memcpy>
 800dc44:	4621      	mov	r1, r4
 800dc46:	4640      	mov	r0, r8
 800dc48:	f7fe f9ce 	bl	800bfe8 <_free_r>
 800dc4c:	463c      	mov	r4, r7
 800dc4e:	e7e0      	b.n	800dc12 <_realloc_r+0x1e>

0800dc50 <__ascii_wctomb>:
 800dc50:	4603      	mov	r3, r0
 800dc52:	4608      	mov	r0, r1
 800dc54:	b141      	cbz	r1, 800dc68 <__ascii_wctomb+0x18>
 800dc56:	2aff      	cmp	r2, #255	@ 0xff
 800dc58:	d904      	bls.n	800dc64 <__ascii_wctomb+0x14>
 800dc5a:	228a      	movs	r2, #138	@ 0x8a
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc62:	4770      	bx	lr
 800dc64:	700a      	strb	r2, [r1, #0]
 800dc66:	2001      	movs	r0, #1
 800dc68:	4770      	bx	lr
	...

0800dc6c <btowc>:
 800dc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6e:	1c43      	adds	r3, r0, #1
 800dc70:	b087      	sub	sp, #28
 800dc72:	d103      	bne.n	800dc7c <btowc+0x10>
 800dc74:	f04f 30ff 	mov.w	r0, #4294967295
 800dc78:	b007      	add	sp, #28
 800dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7c:	4d1c      	ldr	r5, [pc, #112]	@ (800dcf0 <btowc+0x84>)
 800dc7e:	f88d 000b 	strb.w	r0, [sp, #11]
 800dc82:	ae04      	add	r6, sp, #16
 800dc84:	2208      	movs	r2, #8
 800dc86:	2100      	movs	r1, #0
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7fd fad1 	bl	800b230 <memset>
 800dc8e:	682f      	ldr	r7, [r5, #0]
 800dc90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dc92:	b9fc      	cbnz	r4, 800dcd4 <btowc+0x68>
 800dc94:	2050      	movs	r0, #80	@ 0x50
 800dc96:	f7fe f9f1 	bl	800c07c <malloc>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	6478      	str	r0, [r7, #68]	@ 0x44
 800dc9e:	b920      	cbnz	r0, 800dcaa <btowc+0x3e>
 800dca0:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <btowc+0x88>)
 800dca2:	4815      	ldr	r0, [pc, #84]	@ (800dcf8 <btowc+0x8c>)
 800dca4:	2118      	movs	r1, #24
 800dca6:	f7ff ff61 	bl	800db6c <__assert_func>
 800dcaa:	682b      	ldr	r3, [r5, #0]
 800dcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcae:	e9c3 4400 	strd	r4, r4, [r3]
 800dcb2:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800dcb6:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800dcba:	e9c3 440a 	strd	r4, r4, [r3, #40]	@ 0x28
 800dcbe:	e9c3 440c 	strd	r4, r4, [r3, #48]	@ 0x30
 800dcc2:	e9c3 440e 	strd	r4, r4, [r3, #56]	@ 0x38
 800dcc6:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
 800dcca:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
 800dcce:	619c      	str	r4, [r3, #24]
 800dcd0:	771c      	strb	r4, [r3, #28]
 800dcd2:	625c      	str	r4, [r3, #36]	@ 0x24
 800dcd4:	4b09      	ldr	r3, [pc, #36]	@ (800dcfc <btowc+0x90>)
 800dcd6:	9600      	str	r6, [sp, #0]
 800dcd8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 800dcdc:	6828      	ldr	r0, [r5, #0]
 800dcde:	2301      	movs	r3, #1
 800dce0:	f10d 020b 	add.w	r2, sp, #11
 800dce4:	a903      	add	r1, sp, #12
 800dce6:	47a0      	blx	r4
 800dce8:	2801      	cmp	r0, #1
 800dcea:	d8c3      	bhi.n	800dc74 <btowc+0x8>
 800dcec:	9803      	ldr	r0, [sp, #12]
 800dcee:	e7c3      	b.n	800dc78 <btowc+0xc>
 800dcf0:	2000002c 	.word	0x2000002c
 800dcf4:	08011171 	.word	0x08011171
 800dcf8:	080114f2 	.word	0x080114f2
 800dcfc:	2000007c 	.word	0x2000007c

0800dd00 <fiprintf>:
 800dd00:	b40e      	push	{r1, r2, r3}
 800dd02:	b503      	push	{r0, r1, lr}
 800dd04:	4601      	mov	r1, r0
 800dd06:	ab03      	add	r3, sp, #12
 800dd08:	4805      	ldr	r0, [pc, #20]	@ (800dd20 <fiprintf+0x20>)
 800dd0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0e:	6800      	ldr	r0, [r0, #0]
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	f7fe ff6d 	bl	800cbf0 <_vfiprintf_r>
 800dd16:	b002      	add	sp, #8
 800dd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd1c:	b003      	add	sp, #12
 800dd1e:	4770      	bx	lr
 800dd20:	2000002c 	.word	0x2000002c

0800dd24 <abort>:
 800dd24:	b508      	push	{r3, lr}
 800dd26:	2006      	movs	r0, #6
 800dd28:	f000 f834 	bl	800dd94 <raise>
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	f7f4 fe0b 	bl	8002948 <_exit>

0800dd32 <_malloc_usable_size_r>:
 800dd32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd36:	1f18      	subs	r0, r3, #4
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	bfbc      	itt	lt
 800dd3c:	580b      	ldrlt	r3, [r1, r0]
 800dd3e:	18c0      	addlt	r0, r0, r3
 800dd40:	4770      	bx	lr

0800dd42 <_raise_r>:
 800dd42:	291f      	cmp	r1, #31
 800dd44:	b538      	push	{r3, r4, r5, lr}
 800dd46:	4605      	mov	r5, r0
 800dd48:	460c      	mov	r4, r1
 800dd4a:	d904      	bls.n	800dd56 <_raise_r+0x14>
 800dd4c:	2316      	movs	r3, #22
 800dd4e:	6003      	str	r3, [r0, #0]
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd58:	b112      	cbz	r2, 800dd60 <_raise_r+0x1e>
 800dd5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd5e:	b94b      	cbnz	r3, 800dd74 <_raise_r+0x32>
 800dd60:	4628      	mov	r0, r5
 800dd62:	f000 f831 	bl	800ddc8 <_getpid_r>
 800dd66:	4622      	mov	r2, r4
 800dd68:	4601      	mov	r1, r0
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd70:	f000 b818 	b.w	800dda4 <_kill_r>
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d00a      	beq.n	800dd8e <_raise_r+0x4c>
 800dd78:	1c59      	adds	r1, r3, #1
 800dd7a:	d103      	bne.n	800dd84 <_raise_r+0x42>
 800dd7c:	2316      	movs	r3, #22
 800dd7e:	6003      	str	r3, [r0, #0]
 800dd80:	2001      	movs	r0, #1
 800dd82:	e7e7      	b.n	800dd54 <_raise_r+0x12>
 800dd84:	2100      	movs	r1, #0
 800dd86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	4798      	blx	r3
 800dd8e:	2000      	movs	r0, #0
 800dd90:	e7e0      	b.n	800dd54 <_raise_r+0x12>
	...

0800dd94 <raise>:
 800dd94:	4b02      	ldr	r3, [pc, #8]	@ (800dda0 <raise+0xc>)
 800dd96:	4601      	mov	r1, r0
 800dd98:	6818      	ldr	r0, [r3, #0]
 800dd9a:	f7ff bfd2 	b.w	800dd42 <_raise_r>
 800dd9e:	bf00      	nop
 800dda0:	2000002c 	.word	0x2000002c

0800dda4 <_kill_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4d07      	ldr	r5, [pc, #28]	@ (800ddc4 <_kill_r+0x20>)
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4608      	mov	r0, r1
 800ddae:	4611      	mov	r1, r2
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	f7f4 fdb9 	bl	8002928 <_kill>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d102      	bne.n	800ddc0 <_kill_r+0x1c>
 800ddba:	682b      	ldr	r3, [r5, #0]
 800ddbc:	b103      	cbz	r3, 800ddc0 <_kill_r+0x1c>
 800ddbe:	6023      	str	r3, [r4, #0]
 800ddc0:	bd38      	pop	{r3, r4, r5, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2000a760 	.word	0x2000a760

0800ddc8 <_getpid_r>:
 800ddc8:	f7f4 bda6 	b.w	8002918 <_getpid>

0800ddcc <_init>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	bf00      	nop
 800ddd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd2:	bc08      	pop	{r3}
 800ddd4:	469e      	mov	lr, r3
 800ddd6:	4770      	bx	lr

0800ddd8 <_fini>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	bf00      	nop
 800dddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddde:	bc08      	pop	{r3}
 800dde0:	469e      	mov	lr, r3
 800dde2:	4770      	bx	lr
